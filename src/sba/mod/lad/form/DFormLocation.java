/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.lad.form;

import cfd.ver40.DCfdi40Catalogs;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiItem;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.lad.db.DDbLocation;
import sba.mod.lad.db.DLadCatalogAddressCountry;
import sba.mod.lad.db.DLadCatalogAddressCounty;
import sba.mod.lad.db.DLadCatalogAddressDistrict;
import sba.mod.lad.db.DLadCatalogAddressLocality;
import sba.mod.lad.db.DLadCatalogAddressState;
import sba.mod.lad.db.DLadCatalogConsts;

/**
 *
 * @author Sergio Flores
 */
public class DFormLocation extends DBeanForm implements ActionListener, ItemListener, FocusListener, KeyListener {
    
    protected DDbLocation moLocation;
    
    protected DPickerCatalogAddressState moPickerCatalogAddressState;
    protected DPickerCatalogAddressCounty moPickerCatalogAddressCounty;
    protected DPickerCatalogAddressLocality moPickerCatalogAddressLocality;
    protected DPickerCatalogAddressDistrict moPickerCatalogAddressDistrict;

    /**
     * Creates new form DFormLocation
     * @param client GUI Client.
     * @param title Title.
     */
    public DFormLocation(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.LU_LOC, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgBolIntlTransportDirections = new javax.swing.ButtonGroup();
        bgMerchDimensionUnits = new javax.swing.ButtonGroup();
        bgMerchHazardousMaterial = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jpHeader = new javax.swing.JPanel();
        jpLocInput1 = new javax.swing.JPanel();
        jpLocInput11 = new javax.swing.JPanel();
        jlLocLocationType = new javax.swing.JLabel();
        moKeyLocLocationType = new sba.lib.gui.bean.DBeanFieldKey();
        jbLocEditType = new javax.swing.JButton();
        jpLocInput12 = new javax.swing.JPanel();
        jlLocName = new javax.swing.JLabel();
        moTextLocName = new sba.lib.gui.bean.DBeanFieldText();
        jpLocInput13 = new javax.swing.JPanel();
        jlLocCode = new javax.swing.JLabel();
        moTextLocCode = new sba.lib.gui.bean.DBeanFieldText();
        jbLocGetNextCode = new javax.swing.JButton();
        jpLocInput14 = new javax.swing.JPanel();
        jlLocLocationId = new javax.swing.JLabel();
        jtfLocLocationId = new javax.swing.JTextField();
        jpLocInput2 = new javax.swing.JPanel();
        jpLocInput21 = new javax.swing.JPanel();
        jlLocAddressCountry = new javax.swing.JLabel();
        moKeyLocAddressCountry = new sba.lib.gui.bean.DBeanFieldKey();
        jpLocInput22 = new javax.swing.JPanel();
        jlLocAddressState = new javax.swing.JLabel();
        moTextLocAddressStateCode = new sba.lib.gui.bean.DBeanFieldText();
        moTextLocAddressStateName = new sba.lib.gui.bean.DBeanFieldText();
        jpLocInput23 = new javax.swing.JPanel();
        jlLocAddressCounty = new javax.swing.JLabel();
        moTextLocAddressCountyCode = new sba.lib.gui.bean.DBeanFieldText();
        moTextLocAddressCountyName = new sba.lib.gui.bean.DBeanFieldText();
        jpLocInput24 = new javax.swing.JPanel();
        jlLocAddressLocality = new javax.swing.JLabel();
        moTextLocAddressLocalityCode = new sba.lib.gui.bean.DBeanFieldText();
        moTextLocAddressLocalityName = new sba.lib.gui.bean.DBeanFieldText();
        jpLocInput25 = new javax.swing.JPanel();
        jlLocAddressZipCode = new javax.swing.JLabel();
        moTextLocAddressZipCode = new sba.lib.gui.bean.DBeanFieldText();
        jpLocInput26 = new javax.swing.JPanel();
        jlLocAddressDistrict = new javax.swing.JLabel();
        moTextLocAddressDistrictCode = new sba.lib.gui.bean.DBeanFieldText();
        moTextLocAddressDistrictName = new sba.lib.gui.bean.DBeanFieldText();
        jpLocInput27 = new javax.swing.JPanel();
        jlLocAddressStreet = new javax.swing.JLabel();
        moTextLocAddressStreet = new sba.lib.gui.bean.DBeanFieldText();
        moTextLocAddressNumberExt = new sba.lib.gui.bean.DBeanFieldText();
        moTextLocAddressNumberInt = new sba.lib.gui.bean.DBeanFieldText();
        jpLocInput28 = new javax.swing.JPanel();
        jlLocAddressReference = new javax.swing.JLabel();
        moTextLocAddressReference = new sba.lib.gui.bean.DBeanFieldText();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpHeader.setLayout(new java.awt.GridLayout(1, 2));

        jpLocInput1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ubicación:"));
        jpLocInput1.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jpLocInput11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocLocationType.setText("Tipo:*");
        jlLocLocationType.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput11.add(jlLocLocationType);

        moKeyLocLocationType.setPreferredSize(new java.awt.Dimension(265, 23));
        jpLocInput11.add(moKeyLocLocationType);

        jbLocEditType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_edit.gif"))); // NOI18N
        jbLocEditType.setToolTipText("Modificar");
        jbLocEditType.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLocInput11.add(jbLocEditType);

        jpLocInput1.add(jpLocInput11);

        jpLocInput12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocName.setText("Nombre:*");
        jlLocName.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput12.add(jlLocName);

        moTextLocName.setText("TEXT");
        moTextLocName.setPreferredSize(new java.awt.Dimension(290, 23));
        jpLocInput12.add(moTextLocName);

        jpLocInput1.add(jpLocInput12);

        jpLocInput13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocCode.setText("Código:*");
        jlLocCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput13.add(jlLocCode);

        moTextLocCode.setText("000000");
        moTextLocCode.setPreferredSize(new java.awt.Dimension(60, 23));
        jpLocInput13.add(moTextLocCode);

        jbLocGetNextCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_mov_lft.gif"))); // NOI18N
        jbLocGetNextCode.setToolTipText("Obtener siguiente código");
        jbLocGetNextCode.setPreferredSize(new java.awt.Dimension(23, 23));
        jpLocInput13.add(jbLocGetNextCode);

        jpLocInput1.add(jpLocInput13);

        jpLocInput14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocLocationId.setText("ID ubicación:");
        jlLocLocationId.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput14.add(jlLocLocationId);

        jtfLocLocationId.setEditable(false);
        jtfLocLocationId.setText("TEXT");
        jtfLocLocationId.setFocusable(false);
        jtfLocLocationId.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput14.add(jtfLocLocationId);

        jpLocInput1.add(jpLocInput14);

        jpHeader.add(jpLocInput1);

        jpLocInput2.setBorder(javax.swing.BorderFactory.createTitledBorder("Domicilio:"));
        jpLocInput2.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jpLocInput21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocAddressCountry.setText("País:*");
        jlLocAddressCountry.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput21.add(jlLocAddressCountry);

        moKeyLocAddressCountry.setPreferredSize(new java.awt.Dimension(290, 23));
        jpLocInput21.add(moKeyLocAddressCountry);

        jpLocInput2.add(jpLocInput21);

        jpLocInput22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocAddressState.setText("Estado:*");
        jlLocAddressState.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput22.add(jlLocAddressState);

        moTextLocAddressStateCode.setForeground(java.awt.Color.blue);
        moTextLocAddressStateCode.setText("XXX");
        moTextLocAddressStateCode.setToolTipText("Clave (F5 para buscar)");
        moTextLocAddressStateCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jpLocInput22.add(moTextLocAddressStateCode);

        moTextLocAddressStateName.setText("TEXT");
        moTextLocAddressStateName.setToolTipText("Descripción");
        moTextLocAddressStateName.setPreferredSize(new java.awt.Dimension(250, 23));
        jpLocInput22.add(moTextLocAddressStateName);

        jpLocInput2.add(jpLocInput22);

        jpLocInput23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocAddressCounty.setText("Municipio:");
        jlLocAddressCounty.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput23.add(jlLocAddressCounty);

        moTextLocAddressCountyCode.setForeground(java.awt.Color.blue);
        moTextLocAddressCountyCode.setText("000");
        moTextLocAddressCountyCode.setToolTipText("Clave (F5 para buscar)");
        moTextLocAddressCountyCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jpLocInput23.add(moTextLocAddressCountyCode);

        moTextLocAddressCountyName.setText("TEXT");
        moTextLocAddressCountyName.setToolTipText("Descripción");
        moTextLocAddressCountyName.setPreferredSize(new java.awt.Dimension(250, 23));
        jpLocInput23.add(moTextLocAddressCountyName);

        jpLocInput2.add(jpLocInput23);

        jpLocInput24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocAddressLocality.setText("Localidad:");
        jlLocAddressLocality.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput24.add(jlLocAddressLocality);

        moTextLocAddressLocalityCode.setForeground(java.awt.Color.blue);
        moTextLocAddressLocalityCode.setText("00");
        moTextLocAddressLocalityCode.setToolTipText("Clave (F5 para buscar)");
        moTextLocAddressLocalityCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jpLocInput24.add(moTextLocAddressLocalityCode);

        moTextLocAddressLocalityName.setText("TEXT");
        moTextLocAddressLocalityName.setToolTipText("Descripción");
        moTextLocAddressLocalityName.setPreferredSize(new java.awt.Dimension(250, 23));
        jpLocInput24.add(moTextLocAddressLocalityName);

        jpLocInput2.add(jpLocInput24);

        jpLocInput25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocAddressZipCode.setText("CP:");
        jlLocAddressZipCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput25.add(jlLocAddressZipCode);

        moTextLocAddressZipCode.setText("000000000000");
        jpLocInput25.add(moTextLocAddressZipCode);

        jpLocInput2.add(jpLocInput25);

        jpLocInput26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocAddressDistrict.setText("Colonia:");
        jlLocAddressDistrict.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput26.add(jlLocAddressDistrict);

        moTextLocAddressDistrictCode.setForeground(java.awt.Color.blue);
        moTextLocAddressDistrictCode.setText("0000");
        moTextLocAddressDistrictCode.setToolTipText("Clave (F5 para buscar)");
        moTextLocAddressDistrictCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jpLocInput26.add(moTextLocAddressDistrictCode);

        moTextLocAddressDistrictName.setText("TEXT");
        moTextLocAddressDistrictName.setToolTipText("Descripción");
        moTextLocAddressDistrictName.setPreferredSize(new java.awt.Dimension(250, 23));
        jpLocInput26.add(moTextLocAddressDistrictName);

        jpLocInput2.add(jpLocInput26);

        jpLocInput27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocAddressStreet.setText("Calle:");
        jlLocAddressStreet.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput27.add(jlLocAddressStreet);

        moTextLocAddressStreet.setText("TEXT");
        moTextLocAddressStreet.setToolTipText("Calle");
        moTextLocAddressStreet.setPreferredSize(new java.awt.Dimension(180, 23));
        jpLocInput27.add(moTextLocAddressStreet);

        moTextLocAddressNumberExt.setText("TEXT");
        moTextLocAddressNumberExt.setToolTipText("No. exterior");
        moTextLocAddressNumberExt.setPreferredSize(new java.awt.Dimension(50, 23));
        jpLocInput27.add(moTextLocAddressNumberExt);

        moTextLocAddressNumberInt.setText("TEXT");
        moTextLocAddressNumberInt.setToolTipText("No. interior");
        moTextLocAddressNumberInt.setPreferredSize(new java.awt.Dimension(50, 23));
        jpLocInput27.add(moTextLocAddressNumberInt);

        jpLocInput2.add(jpLocInput27);

        jpLocInput28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLocAddressReference.setText("Referencia:");
        jlLocAddressReference.setPreferredSize(new java.awt.Dimension(75, 23));
        jpLocInput28.add(jlLocAddressReference);

        moTextLocAddressReference.setText("TEXT");
        moTextLocAddressReference.setPreferredSize(new java.awt.Dimension(290, 23));
        jpLocInput28.add(moTextLocAddressReference);

        jpLocInput2.add(jpLocInput28);

        jpHeader.add(jpLocInput2);

        jPanel1.add(jpHeader, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgBolIntlTransportDirections;
    private javax.swing.ButtonGroup bgMerchDimensionUnits;
    private javax.swing.ButtonGroup bgMerchHazardousMaterial;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbLocEditType;
    private javax.swing.JButton jbLocGetNextCode;
    private javax.swing.JLabel jlLocAddressCountry;
    private javax.swing.JLabel jlLocAddressCounty;
    private javax.swing.JLabel jlLocAddressDistrict;
    private javax.swing.JLabel jlLocAddressLocality;
    private javax.swing.JLabel jlLocAddressReference;
    private javax.swing.JLabel jlLocAddressState;
    private javax.swing.JLabel jlLocAddressStreet;
    private javax.swing.JLabel jlLocAddressZipCode;
    private javax.swing.JLabel jlLocCode;
    private javax.swing.JLabel jlLocLocationId;
    private javax.swing.JLabel jlLocLocationType;
    private javax.swing.JLabel jlLocName;
    private javax.swing.JPanel jpHeader;
    private javax.swing.JPanel jpLocInput1;
    private javax.swing.JPanel jpLocInput11;
    private javax.swing.JPanel jpLocInput12;
    private javax.swing.JPanel jpLocInput13;
    private javax.swing.JPanel jpLocInput14;
    private javax.swing.JPanel jpLocInput2;
    private javax.swing.JPanel jpLocInput21;
    private javax.swing.JPanel jpLocInput22;
    private javax.swing.JPanel jpLocInput23;
    private javax.swing.JPanel jpLocInput24;
    private javax.swing.JPanel jpLocInput25;
    private javax.swing.JPanel jpLocInput26;
    private javax.swing.JPanel jpLocInput27;
    private javax.swing.JPanel jpLocInput28;
    private javax.swing.JTextField jtfLocLocationId;
    private sba.lib.gui.bean.DBeanFieldKey moKeyLocAddressCountry;
    private sba.lib.gui.bean.DBeanFieldKey moKeyLocLocationType;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressCountyCode;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressCountyName;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressDistrictCode;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressDistrictName;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressLocalityCode;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressLocalityName;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressNumberExt;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressNumberInt;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressReference;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressStateCode;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressStateName;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressStreet;
    private sba.lib.gui.bean.DBeanFieldText moTextLocAddressZipCode;
    private sba.lib.gui.bean.DBeanFieldText moTextLocCode;
    private sba.lib.gui.bean.DBeanFieldText moTextLocName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 800, 500);
        
        moKeyLocLocationType.setKeySettings(miClient, DGuiUtils.getLabelName(jlLocLocationType), true);
        moTextLocName.setTextSettings(DGuiUtils.getLabelName(jlLocName), 50);
        moTextLocCode.setTextSettings(DGuiUtils.getLabelName(jlLocCode), 6, 6);
        
        moKeyLocAddressCountry.setKeySettings(miClient, DGuiUtils.getLabelName(jlLocAddressCountry), true);
        moTextLocAddressStateCode.setTextSettings(DGuiUtils.getLabelName(jlLocAddressState) + ": clave", 3);
        moTextLocAddressStateName.setTextSettings(DGuiUtils.getLabelName(jlLocAddressState) + ": " + moTextLocAddressStateName.getToolTipText(), 30);
        moTextLocAddressCountyCode.setTextSettings(DGuiUtils.getLabelName(jlLocAddressCounty) + ": clave", 3, 0); 
        moTextLocAddressCountyName.setTextSettings(DGuiUtils.getLabelName(jlLocAddressCounty) + ": " + moTextLocAddressCountyName.getToolTipText(), 120, 0);
        moTextLocAddressLocalityCode.setTextSettings(DGuiUtils.getLabelName(jlLocAddressLocality) + ": clave", 3, 0);
        moTextLocAddressLocalityName.setTextSettings(DGuiUtils.getLabelName(jlLocAddressLocality) + ": " + moTextLocAddressLocalityName.getToolTipText(), 120, 0);
        moTextLocAddressZipCode.setTextSettings(DGuiUtils.getLabelName(jlLocAddressZipCode), 12, 5);
        moTextLocAddressDistrictCode.setTextSettings(DGuiUtils.getLabelName(jlLocAddressDistrict) + ": clave", 4, 0);
        moTextLocAddressDistrictName.setTextSettings(DGuiUtils.getLabelName(jlLocAddressDistrict) + ": " + moTextLocAddressDistrictName.getToolTipText(), 30, 0);
        moTextLocAddressStreet.setTextSettings(DGuiUtils.getLabelName(jlLocAddressStreet), 100); // street is mandatory for location
        moTextLocAddressNumberExt.setTextSettings(DGuiUtils.getLabelName(jlLocAddressStreet) + ": " + moTextLocAddressNumberExt.getToolTipText(), 25, 0);
        moTextLocAddressNumberInt.setTextSettings(DGuiUtils.getLabelName(jlLocAddressStreet) + ": " + moTextLocAddressNumberInt.getToolTipText(), 25, 0);
        moTextLocAddressReference.setTextSettings(DGuiUtils.getLabelName(jlLocAddressReference), 120, 0);
        
        moFields.addField(moKeyLocLocationType);
        moFields.addField(moTextLocName);
        moFields.addField(moTextLocCode);
        
        moFields.addField(moKeyLocAddressCountry);
        moFields.addField(moTextLocAddressStateCode);
        moFields.addField(moTextLocAddressStateName);
        moFields.addField(moTextLocAddressCountyCode);
        moFields.addField(moTextLocAddressCountyName);
        moFields.addField(moTextLocAddressLocalityCode);
        moFields.addField(moTextLocAddressLocalityName);
        moFields.addField(moTextLocAddressZipCode);
        moFields.addField(moTextLocAddressDistrictCode);
        moFields.addField(moTextLocAddressDistrictName);
        moFields.addField(moTextLocAddressStreet);
        moFields.addField(moTextLocAddressNumberExt);
        moFields.addField(moTextLocAddressNumberInt);
        moFields.addField(moTextLocAddressReference);
        
        moFields.setFormButton(jbSave);
    }

    private void renderLocation(final DDbLocation location) {
        moLocation = location;
        
        if (moLocation == null) {
            moFields.resetFields();
            
            moTextLocCode.setValue(DFormBolUtils.DEF_CODE_LOCATION);
            
            jtfLocLocationId.setText("");
        }
        else {
            moKeyLocLocationType.setValue(new int[] { moLocation.getFkLocationTypeId() });
            itemStateChangedLocLocationType();
            moTextLocName.setValue(moLocation.getName());
            moTextLocCode.setValue(moLocation.getCode());
            
            jtfLocLocationId.setText(moLocation.getLocationCode());
            jtfLocLocationId.setCaretPosition(0);
            
            moKeyLocAddressCountry.setValue(new int[] { moLocation.getFkAddressCountryId() });
            itemStateChangedLocAddressCountry();
            moTextLocAddressStateCode.setValue(moLocation.getAddressStateCode());
            moTextLocAddressStateName.setValue(moLocation.getAddressStateName());
            moTextLocAddressCountyCode.setValue(moLocation.getAddressCountyCode());
            moTextLocAddressCountyName.setValue(moLocation.getAddressCountyName());
            moTextLocAddressLocalityCode.setValue(moLocation.getAddressLocalityCode());
            moTextLocAddressLocalityName.setValue(moLocation.getAddressLocalityName());
            moTextLocAddressZipCode.setValue(moLocation.getAddressZipCode());
            moTextLocAddressDistrictCode.setValue(moLocation.getAddressDistrictCode());
            moTextLocAddressDistrictName.setValue(moLocation.getAddressDistrictName());
            moTextLocAddressStreet.setValue(moLocation.getAddressStreet());
            moTextLocAddressNumberExt.setValue(moLocation.getAddressNumberExt());
            moTextLocAddressNumberInt.setValue(moLocation.getAddressNumberInt());
            moTextLocAddressReference.setValue(moLocation.getAddressReference());
        }
    }
    
    private void computeLocCode() {
        // format location code:
        moTextLocCode.setValue(DFormBolUtils.FormatCodeLocation.format(DLibUtils.parseInt(moTextLocCode.getValue())));
        
        // compose location ID:
        if (moKeyLocLocationType.getSelectedIndex() <= 0) {
            jtfLocLocationId.setText("");
        }
        else {
            jtfLocLocationId.setText(moKeyLocLocationType.getSelectedItem().getCode() + moTextLocCode.getValue());
            jtfLocLocationId.setCaretPosition(0);
        }
    }
    
    private void computeLocAddressStateCode() {
        DFormBolUtils.computeCatalogCode(moTextLocAddressStateCode, moTextLocAddressStateName, DFormBolUtils.DEF_CODE_ADDRESS_STATE, 
                null, DCfdi40Catalogs.XML_CCP_EDO_40, false, moKeyLocAddressCountry, DFormBolUtils.ATT_COUNTRY);
    }
    
    private void computeLocAddressCountyCode() {
        DFormBolUtils.computeCatalogCode(moTextLocAddressCountyCode, moTextLocAddressCountyName, DFormBolUtils.DEF_CODE_ADDRESS_COUNTY, 
                DFormBolUtils.FormatCodeAddressCounty, DCfdi40Catalogs.XML_CCP_MUN, false, moTextLocAddressStateCode, DFormBolUtils.ATT_STATE);
    }

    private void computeLocAddressLocalityCode() {
        DFormBolUtils.computeCatalogCode(moTextLocAddressLocalityCode, moTextLocAddressLocalityName, DFormBolUtils.DEF_CODE_ADDRESS_LOCALITY, 
                DFormBolUtils.FormatCodeAddressLocality, DCfdi40Catalogs.XML_CCP_LOC, false, moTextLocAddressStateCode, DFormBolUtils.ATT_STATE);
    }

    private void computeLocAddressDistrictCode() {
        DFormBolUtils.computeCatalogCode(moTextLocAddressDistrictCode, moTextLocAddressDistrictName, DFormBolUtils.DEF_CODE_ADDRESS_DISTRICT, 
                DFormBolUtils.FormatCodeAddressDistrict, DCfdi40Catalogs.XML_CCP_COL, true, moTextLocAddressZipCode, DFormBolUtils.ATT_ZIP);
    }

    private void actionPerformedLocEditType() {
        if (miClient.showMsgBoxConfirm("¿Está seguro que desea cambiar el tipo de la ubicación?") == JOptionPane.YES_OPTION) {
            jbLocEditType.setEnabled(false);
            moKeyLocLocationType.setEnabled(true);
            moKeyLocLocationType.requestFocusInWindow();
        }
    }
    
    private void actionPerformedLocGetNextCode() {
        try {
            if (moTextLocCode.getValue().equals(DFormBolUtils.DEF_CODE_LOCATION) || 
                    miClient.showMsgBoxConfirm("¿Está seguro que desea obtener el siguiente código para el campo '" + DGuiUtils.getLabelName(jlLocCode) + "'?") == JOptionPane.YES_OPTION) {
                int nextCode = DFormBolUtils.getNextCode(miClient.getSession(), DModConsts.LU_LOC, moKeyLocLocationType.getValue()[0]);
                moTextLocCode.setValue("" + nextCode);
                moTextLocCode.requestFocusInWindow();
                computeLocCode();
            }
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }
    
    private void itemStateChangedLocLocationType() {
        computeLocCode();
    }
    
    private void itemStateChangedLocAddressCountry() {
        moTextLocAddressStateCode.resetField();
        moTextLocAddressStateName.resetField();
        moTextLocAddressCountyCode.resetField();
        moTextLocAddressCountyName.resetField();
        moTextLocAddressLocalityCode.resetField();
        moTextLocAddressLocalityName.resetField();
        moTextLocAddressZipCode.resetField();
        moTextLocAddressDistrictCode.resetField();
        moTextLocAddressDistrictName.resetField();
        moTextLocAddressStreet.resetField();
        moTextLocAddressNumberExt.resetField();
        moTextLocAddressNumberInt.resetField();
        moTextLocAddressReference.resetField();
        
        if (moKeyLocAddressCountry.getSelectedIndex() <= 0) {
            moTextLocAddressStateCode.setEnabled(false);
            moTextLocAddressStateName.setEnabled(false);
            moTextLocAddressCountyCode.setEnabled(false);
            moTextLocAddressCountyName.setEnabled(false);
            moTextLocAddressLocalityCode.setEnabled(false);
            moTextLocAddressLocalityName.setEnabled(false);
            moTextLocAddressZipCode.setEnabled(false);
            moTextLocAddressDistrictCode.setEnabled(false);
            moTextLocAddressDistrictName.setEnabled(false);
            moTextLocAddressStreet.setEnabled(false);
            moTextLocAddressNumberExt.setEnabled(false);
            moTextLocAddressNumberInt.setEnabled(false);
            moTextLocAddressReference.setEnabled(false);
        }
        else {
            String countryCode = moKeyLocAddressCountry.getSelectedItem().getCode(); // convenience variable
            boolean applyStateCatalog = DFormBolUtils.applyStateCatalog(countryCode);
            boolean applyAddressCatalogs = DFormBolUtils.applyAddressCatalogs(countryCode);
            
            moTextLocAddressStateCode.setEnabled(applyStateCatalog);
            moTextLocAddressStateName.setEnabled(!applyStateCatalog);
            moTextLocAddressCountyCode.setEnabled(applyAddressCatalogs);
            moTextLocAddressCountyName.setEnabled(!applyAddressCatalogs);
            moTextLocAddressLocalityCode.setEnabled(applyAddressCatalogs);
            moTextLocAddressLocalityName.setEnabled(!applyAddressCatalogs);
            moTextLocAddressZipCode.setEnabled(true);
            moTextLocAddressDistrictCode.setEnabled(applyAddressCatalogs);
            moTextLocAddressDistrictName.setEnabled(!applyAddressCatalogs);
            moTextLocAddressStreet.setEnabled(true);
            moTextLocAddressNumberExt.setEnabled(true);
            moTextLocAddressNumberInt.setEnabled(true);
            moTextLocAddressReference.setEnabled(true);
        }
        
        if (moTextLocAddressStateCode.isEnabled()) {
            moTextLocAddressStateCode.setValue(DFormBolUtils.DEF_CODE_ADDRESS_STATE);
        }
        
        if (moTextLocAddressCountyCode.isEnabled()) {
            moTextLocAddressCountyCode.setValue(DFormBolUtils.DEF_CODE_ADDRESS_COUNTY);
        }
        
        if (moTextLocAddressLocalityCode.isEnabled()) {
            moTextLocAddressLocalityCode.setValue(DFormBolUtils.DEF_CODE_ADDRESS_LOCALITY);
        }
        
        if (moTextLocAddressDistrictCode.isEnabled()) {
            moTextLocAddressDistrictCode.setValue(DFormBolUtils.DEF_CODE_ADDRESS_DISTRICT);
        }
    }
    
    private void focusGainedLocCode() {
        if (moTextLocCode.getValue().equals(DFormBolUtils.DEF_CODE_LOCATION)) {
            moTextLocCode.resetField();
        }
    }
    
    private void focusGainedLocAddressStateCode() {
        if (moTextLocAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
            moTextLocAddressStateCode.resetField();
        }
    }
    
    private void focusGainedLocAddressCountyCode() {
        if (moTextLocAddressCountyCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_COUNTY)) {
            moTextLocAddressCountyCode.resetField();
        }
    }
    
    private void focusGainedLocAddressLocalityCode() {
        if (moTextLocAddressLocalityCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_LOCALITY)) {
            moTextLocAddressLocalityCode.resetField();
        }
    }
    
    private void focusGainedLocAddressDistrictCode() {
        if (moTextLocAddressDistrictCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_DISTRICT)) {
            moTextLocAddressDistrictCode.resetField();
        }
    }

    private void focusLostLocCode() {
        computeLocCode();
    }
    
    private void focusLostLocAddressStateCode() {
        computeLocAddressStateCode();
    }

    private void focusLostLocAddressCountyCode() {
        computeLocAddressCountyCode();
    }

    private void focusLostLocAddressLocalityCode() {
        computeLocAddressLocalityCode();
    }

    private void focusLostLocAddressDistrictCode() {
        computeLocAddressDistrictCode();
    }
    
    private void keyReleasedLocAddressStateCode(final KeyEvent keyEvent) {
        if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
            DGuiValidation validation = moKeyLocAddressCountry.validateField();
            
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moPickerCatalogAddressState == null) {
                    moPickerCatalogAddressState = new DPickerCatalogAddressState(miClient);
                }

                DGuiItem guiItem = moKeyLocAddressCountry.getSelectedItem();
                DLadCatalogAddressCountry country = new DLadCatalogAddressCountry(guiItem.getCode(), guiItem.getItem());
                
                moPickerCatalogAddressState.setValue(DLadCatalogConsts.ADDRESS_COUNTRY, country);
                moPickerCatalogAddressState.resetForm();
                moPickerCatalogAddressState.setVisible(true);
                
                if (moPickerCatalogAddressState.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                    DLadCatalogAddressState state = (DLadCatalogAddressState) moPickerCatalogAddressState.getValue(DLadCatalogConsts.ADDRESS_STATE);
                    if (state != null) {
                        moTextLocAddressStateCode.setValue(state.Code);
                        moTextLocAddressStateName.setValue(state.Name);
                    }
                }
            }
        }
    }

    private void keyReleasedLocAddressCountyCode(final KeyEvent keyEvent) {
        if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
            DGuiValidation validation = moKeyLocAddressCountry.validateField();
            
            if (validation.isValid()) {
                if (moTextLocAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlLocAddressState) + "'.");
                    validation.setComponent(moTextLocAddressStateCode);
                }
            }
            
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moPickerCatalogAddressCounty == null) {
                    moPickerCatalogAddressCounty = new DPickerCatalogAddressCounty(miClient);
                }

                DGuiItem guiItem = moKeyLocAddressCountry.getSelectedItem();
                DLadCatalogAddressCountry country = new DLadCatalogAddressCountry(guiItem.getCode(), guiItem.getItem());
                DLadCatalogAddressState state = new DLadCatalogAddressState(moTextLocAddressStateCode.getValue(), moTextLocAddressStateName.getValue());
                
                moPickerCatalogAddressCounty.setValue(DLadCatalogConsts.ADDRESS_COUNTRY, country);
                moPickerCatalogAddressCounty.setValue(DLadCatalogConsts.ADDRESS_STATE, state);
                moPickerCatalogAddressCounty.resetForm();
                moPickerCatalogAddressCounty.setVisible(true);
                
                if (moPickerCatalogAddressCounty.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                    DLadCatalogAddressCounty county = (DLadCatalogAddressCounty) moPickerCatalogAddressCounty.getValue(DLadCatalogConsts.ADDRESS_COUNTY);
                    if (county != null) {
                        moTextLocAddressCountyCode.setValue(county.Code);
                        moTextLocAddressCountyName.setValue(county.Name);
                    }
                }
            }
        }
    }

    private void keyReleasedLocAddressLocalityCode(final KeyEvent keyEvent) {
        if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
            DGuiValidation validation = moKeyLocAddressCountry.validateField();
            
            if (validation.isValid()) {
                validation = moTextLocAddressStateCode.validateField();
                
                if (validation.isValid()) {
                    if (moTextLocAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlLocAddressState) + "'.");
                        validation.setComponent(moTextLocAddressStateCode);
                    }
                    else if (moTextLocAddressCountyCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_COUNTY)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlLocAddressCounty) + "'.");
                        validation.setComponent(moTextLocAddressCountyCode);
                    }
                }
            }
            
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moPickerCatalogAddressLocality == null) {
                    moPickerCatalogAddressLocality = new DPickerCatalogAddressLocality(miClient);
                }

                DGuiItem guiItem = moKeyLocAddressCountry.getSelectedItem();
                DLadCatalogAddressCountry country = new DLadCatalogAddressCountry(guiItem.getCode(), guiItem.getItem());
                DLadCatalogAddressState state = new DLadCatalogAddressState(moTextLocAddressStateCode.getValue(), moTextLocAddressStateName.getValue());
                DLadCatalogAddressCounty county = new DLadCatalogAddressCounty(moTextLocAddressCountyCode.getValue(), moTextLocAddressCountyName.getValue());
                
                moPickerCatalogAddressLocality.setValue(DLadCatalogConsts.ADDRESS_COUNTRY, country);
                moPickerCatalogAddressLocality.setValue(DLadCatalogConsts.ADDRESS_STATE, state);
                moPickerCatalogAddressLocality.setValue(DLadCatalogConsts.ADDRESS_COUNTY, county);
                moPickerCatalogAddressLocality.resetForm();
                moPickerCatalogAddressLocality.setVisible(true);
                
                if (moPickerCatalogAddressLocality.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                    DLadCatalogAddressLocality locality = (DLadCatalogAddressLocality) moPickerCatalogAddressLocality.getValue(DLadCatalogConsts.ADDRESS_LOCALITY);
                    if (locality != null) {
                        moTextLocAddressLocalityCode.setValue(locality.Code);
                        moTextLocAddressLocalityName.setValue(locality.Name);
                    }
                }
            }
        }
    }

    private void keyReleasedLocAddressDistrictCode(final KeyEvent keyEvent) {
        if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
            DGuiValidation validation = moKeyLocAddressCountry.validateField();
            
            if (validation.isValid()) {
                validation = moTextLocAddressStateCode.validateField();
                
                if (validation.isValid()) {
                    if (moTextLocAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlLocAddressState) + "'.");
                        validation.setComponent(moTextLocAddressStateCode);
                    }
                    else if (moTextLocAddressCountyCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_COUNTY)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlLocAddressCounty) + "'.");
                        validation.setComponent(moTextLocAddressCountyCode);
                    }
                    else if (moTextLocAddressLocalityCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_LOCALITY)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlLocAddressLocality) + "'.");
                        validation.setComponent(moTextLocAddressLocalityCode);
                    }
                    else {
                        validation = moTextLocAddressZipCode.validateField();
                    }
                }
            }
            
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moPickerCatalogAddressDistrict == null) {
                    moPickerCatalogAddressDistrict = new DPickerCatalogAddressDistrict(miClient);
                }

                DGuiItem guiItem = moKeyLocAddressCountry.getSelectedItem();
                DLadCatalogAddressCountry country = new DLadCatalogAddressCountry(guiItem.getCode(), guiItem.getItem());
                DLadCatalogAddressState state = new DLadCatalogAddressState(moTextLocAddressStateCode.getValue(), moTextLocAddressStateName.getValue());
                DLadCatalogAddressCounty county = new DLadCatalogAddressCounty(moTextLocAddressCountyCode.getValue(), moTextLocAddressCountyName.getValue());
                DLadCatalogAddressLocality locality = new DLadCatalogAddressLocality(moTextLocAddressLocalityCode.getValue(), moTextLocAddressLocalityName.getValue());
                
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_COUNTRY, country);
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_STATE, state);
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_COUNTY, county);
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_LOCALITY, locality);
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_ZIP_CODE, moTextLocAddressZipCode.getValue());
                moPickerCatalogAddressDistrict.resetForm();
                moPickerCatalogAddressDistrict.setVisible(true);
                
                if (moPickerCatalogAddressDistrict.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                    DLadCatalogAddressDistrict district = (DLadCatalogAddressDistrict) moPickerCatalogAddressDistrict.getValue(DLadCatalogConsts.ADDRESS_DISTRICT);
                    if (district != null) {
                        moTextLocAddressDistrictCode.setValue(district.Code);
                        moTextLocAddressDistrictName.setValue(district.Name);
                    }
                }
            }
        }
    }
    
    /*
     * DBeanForm methods
     */

    @Override
    public void addAllListeners() {
        jbLocEditType.addActionListener(this);
        jbLocGetNextCode.addActionListener(this);
        
        moKeyLocLocationType.addItemListener(this);
        moKeyLocAddressCountry.addItemListener(this);
        
        moTextLocCode.addFocusListener(this);
        moTextLocAddressStateCode.addFocusListener(this);
        moTextLocAddressCountyCode.addFocusListener(this);
        moTextLocAddressLocalityCode.addFocusListener(this);
        moTextLocAddressDistrictCode.addFocusListener(this);
        
        moTextLocAddressStateCode.addKeyListener(this);
        moTextLocAddressCountyCode.addKeyListener(this);
        moTextLocAddressLocalityCode.addKeyListener(this);
        moTextLocAddressDistrictCode.addKeyListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbLocEditType.removeActionListener(this);
        jbLocGetNextCode.removeActionListener(this);
        
        moKeyLocLocationType.removeItemListener(this);
        moKeyLocAddressCountry.removeItemListener(this);
        
        moTextLocCode.removeFocusListener(this);
        moTextLocAddressStateCode.removeFocusListener(this);
        moTextLocAddressCountyCode.removeFocusListener(this);
        moTextLocAddressLocalityCode.removeFocusListener(this);
        moTextLocAddressDistrictCode.removeFocusListener(this);
        
        moTextLocAddressStateCode.removeKeyListener(this);
        moTextLocAddressCountyCode.removeKeyListener(this);
        moTextLocAddressLocalityCode.removeKeyListener(this);
        moTextLocAddressDistrictCode.removeKeyListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyLocLocationType, DModConsts.LS_LOC_TP, DModConsts.L_BOL, null);
        miClient.getSession().populateCatalogue(moKeyLocAddressCountry, DModConsts.CS_CTY, 0, null);
    }
    
    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moLocation = (DDbLocation) registry;

        mnFormResult = 0;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moLocation.isRegistryNew()) {
            moLocation.initPrimaryKey();
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moLocation.getPrimaryKey()));
        }

        setFormEditable(true);
        
        renderLocation(moLocation);
        
        if (moLocation.isRegistryNew()) {
            moKeyLocLocationType.setEnabled(true);
            jbLocEditType.setEnabled(false);
        }
        else {
            moKeyLocLocationType.setEnabled(false);
            jbLocEditType.setEnabled(true);
        }
        
        addAllListeners();
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        DDbLocation location = moLocation.clone();

        if (location.isRegistryNew()) {
            //location.setPkLocationId(...);
        }
        
        location.setCode(moTextLocCode.getValue());
        //location.setCodeSource(...);
        //location.setCodeDestiny(...);
        location.setName(moTextLocName.getValue());
        location.setAddressStreet(moTextLocAddressStreet.getValue());
        location.setAddressNumberExt(moTextLocAddressNumberExt.getValue());
        location.setAddressNumberInt(moTextLocAddressNumberInt.getValue());
        location.setAddressDistrictCode(moTextLocAddressDistrictCode.getValue());
        location.setAddressDistrictName(moTextLocAddressDistrictName.getValue());
        location.setAddressLocalityCode(moTextLocAddressLocalityCode.getValue());
        location.setAddressLocalityName(moTextLocAddressLocalityName.getValue());
        location.setAddressReference(moTextLocAddressReference.getValue());
        location.setAddressCountyCode(moTextLocAddressCountyCode.getValue());
        location.setAddressCountyName(moTextLocAddressCountyName.getValue());
        location.setAddressStateCode(moTextLocAddressStateCode.getValue());
        location.setAddressStateName(moTextLocAddressStateName.getValue());
        location.setAddressZipCode(moTextLocAddressZipCode.getValue());
        //location.setUpdatable(...);
        //location.setDisableable(...);
        //location.setDeletable(...);
        //location.setDisabled(...);
        //location.setDeleted(...);
        //location.setSystem(...);
        location.setFkLocationTypeId(moKeyLocLocationType.getValue()[0]);
        location.setFkAddressCountryId(moKeyLocAddressCountry.getValue()[0]);
        //location.setFkUserInsertId(...);
        //location.setFkUserUpdateId(...);
        //location.setTsUserInsert(...);
        //location.setTsUserUpdate(...);

        location.setDbmsLocationTypeName(moKeyLocLocationType.getSelectedItem().getItem());
        location.setDbmsLocationTypeCode(moKeyLocLocationType.getSelectedItem().getCode());

        location.sanitize();

        location.setRegistryEdited(true);
        
        return location;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moTextLocCode.getValue().equals(DFormBolUtils.DEF_CODE_LOCATION)) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + moTextLocCode.getFieldName() + "'.");
                validation.setComponent(moTextLocCode);
            }
            else if (moTextLocAddressStateCode.isEnabled() && moTextLocAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + moTextLocAddressStateCode.getFieldName() + "'.");
                validation.setComponent(moTextLocAddressStateCode);
            }
        }
        
        return validation;
    }
    
    /*
     * Listeners methods
     */

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbLocEditType) {
                actionPerformedLocEditType();
            }
            else if (button == jbLocGetNextCode) {
                actionPerformedLocGetNextCode();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyLocLocationType) {
                    itemStateChangedLocLocationType();
                }
                else if (field == moKeyLocAddressCountry) {
                    itemStateChangedLocAddressCountry();
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextLocCode) {
                focusGainedLocCode();
            }
            else if (field == moTextLocAddressStateCode) {
                focusGainedLocAddressStateCode();
            }
            else if (field == moTextLocAddressCountyCode) {
                focusGainedLocAddressCountyCode();
            }
            else if (field == moTextLocAddressLocalityCode) {
                focusGainedLocAddressLocalityCode();
            }
            else if (field == moTextLocAddressDistrictCode) {
                focusGainedLocAddressDistrictCode();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextLocCode) {
                focusLostLocCode();
            }
            else if (field == moTextLocAddressStateCode) {
                focusLostLocAddressStateCode();
            }
            else if (field == moTextLocAddressCountyCode) {
                focusLostLocAddressCountyCode();
            }
            else if (field == moTextLocAddressLocalityCode) {
                focusLostLocAddressLocalityCode();
            }
            else if (field == moTextLocAddressDistrictCode) {
                focusLostLocAddressDistrictCode();
            }
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {

    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextLocAddressStateCode) {
                keyReleasedLocAddressStateCode(e);
            }
            else if (field == moTextLocAddressCountyCode) {
                keyReleasedLocAddressCountyCode(e);
            }
            else if (field == moTextLocAddressLocalityCode) {
                keyReleasedLocAddressLocalityCode(e);
            }
            else if (field == moTextLocAddressDistrictCode) {
                keyReleasedLocAddressDistrictCode(e);
            }
        }
    }
}
