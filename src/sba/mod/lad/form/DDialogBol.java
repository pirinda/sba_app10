/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.lad.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JButton;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalTime;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFields;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.itm.db.DDbItem;
import sba.mod.itm.db.DDbUnit;
import sba.mod.lad.db.DDbBol;
import sba.mod.lad.db.DDbBolLocation;
import sba.mod.lad.db.DDbBolMerchandise;
import sba.mod.lad.db.DDbBolMerchandiseMove;

/**
 *
 * @author Sergio Flores
 */
public class DDialogBol extends DBeanFormDialog implements ActionListener, FocusListener {

    protected DDbBol moBol;
    protected ArrayList<DDbRegistry> maRegistries;
    protected DDbRegistry moCurrentRegistry;
    protected DGuiFields moCurrentFields;
    protected DDbUnit moCurrentUnit;
    
    /**
     * Creates new form DDialogBol
     * @param client GUI Client.
     * @param title Title.
     */
    public DDialogBol(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.L_BOL, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jpBol = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlElementType = new javax.swing.JLabel();
        jtfElementType = new javax.swing.JTextField();
        jlElement = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlDescription1 = new javax.swing.JLabel();
        jtfDescription1 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlDescription2 = new javax.swing.JLabel();
        jtfDescription2 = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlDescription3 = new javax.swing.JLabel();
        jtfDescription3 = new javax.swing.JTextField();
        jPanelInput1 = new javax.swing.JPanel();
        jlInput1 = new javax.swing.JLabel();
        moDateDate = new sba.lib.gui.bean.DBeanFieldDate();
        jlDateHelp = new javax.swing.JLabel();
        moDecQuantity = new sba.lib.gui.bean.DBeanFieldDecimal();
        jlQuantityUnit = new javax.swing.JLabel();
        jPanelInput2 = new javax.swing.JPanel();
        jlInput2 = new javax.swing.JLabel();
        moIntHourHr = new sba.lib.gui.bean.DBeanFieldInteger();
        jlHrSeparator1 = new javax.swing.JLabel();
        moIntHourMin = new sba.lib.gui.bean.DBeanFieldInteger();
        jlHrSeparator2 = new javax.swing.JLabel();
        moIntHourSec = new sba.lib.gui.bean.DBeanFieldInteger();
        jlHourHelp = new javax.swing.JLabel();
        moDecWeightKg = new sba.lib.gui.bean.DBeanFieldDecimal();
        jlWeightKgUnit = new javax.swing.JLabel();
        jbSetWeightKg = new javax.swing.JButton();
        jlRatioKgHint = new javax.swing.JLabel();
        jpNav = new javax.swing.JPanel();
        jbNavPrev = new javax.swing.JButton();
        jbNavNext = new javax.swing.JButton();

        jPanel.setLayout(new java.awt.BorderLayout());

        jpBol.setBorder(javax.swing.BorderFactory.createTitledBorder("Carta porte:"));
        jpBol.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlElementType.setText("Tipo elemento:");
        jlElementType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlElementType);

        jtfElementType.setEditable(false);
        jtfElementType.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfElementType.setText("TEXT");
        jtfElementType.setFocusable(false);
        jtfElementType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(jtfElementType);

        jlElement.setEditable(false);
        jlElement.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlElement.setText("TEXT");
        jlElement.setFocusable(false);
        jlElement.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlElement);

        jPanel1.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDescription1.setText("Descripción 1:");
        jlDescription1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDescription1);

        jtfDescription1.setEditable(false);
        jtfDescription1.setText("TEXT");
        jtfDescription1.setFocusable(false);
        jtfDescription1.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel12.add(jtfDescription1);

        jPanel1.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDescription2.setText("Descripción 2:");
        jlDescription2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlDescription2);

        jtfDescription2.setEditable(false);
        jtfDescription2.setText("TEXT");
        jtfDescription2.setFocusable(false);
        jtfDescription2.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel13.add(jtfDescription2);

        jPanel1.add(jPanel13);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDescription3.setText("Descripción 3:");
        jlDescription3.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlDescription3);

        jtfDescription3.setEditable(false);
        jtfDescription3.setText("TEXT");
        jtfDescription3.setFocusable(false);
        jtfDescription3.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel16.add(jtfDescription3);

        jPanel1.add(jPanel16);

        jPanelInput1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInput1.setText("Captura 1:");
        jlInput1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelInput1.add(jlInput1);
        jPanelInput1.add(moDateDate);

        jlDateHelp.setForeground(java.awt.Color.gray);
        jlDateHelp.setText("Formato: dd/mm/aaaa");
        jlDateHelp.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanelInput1.add(jlDateHelp);

        moDecQuantity.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanelInput1.add(moDecQuantity);

        jlQuantityUnit.setText("kg");
        jlQuantityUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelInput1.add(jlQuantityUnit);

        jPanel1.add(jPanelInput1);

        jPanelInput2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInput2.setText("Captura 2:");
        jlInput2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelInput2.add(jlInput2);

        moIntHourHr.setText("00");
        moIntHourHr.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanelInput2.add(moIntHourHr);

        jlHrSeparator1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlHrSeparator1.setText(":");
        jlHrSeparator1.setPreferredSize(new java.awt.Dimension(5, 23));
        jPanelInput2.add(jlHrSeparator1);

        moIntHourMin.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanelInput2.add(moIntHourMin);

        jlHrSeparator2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlHrSeparator2.setText(":");
        jlHrSeparator2.setPreferredSize(new java.awt.Dimension(5, 23));
        jPanelInput2.add(jlHrSeparator2);

        moIntHourSec.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanelInput2.add(moIntHourSec);

        jlHourHelp.setForeground(java.awt.Color.gray);
        jlHourHelp.setText("Formato: hh:mm:ss (24 hr)");
        jlHourHelp.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanelInput2.add(jlHourHelp);

        moDecWeightKg.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanelInput2.add(moDecWeightKg);

        jlWeightKgUnit.setText("kg");
        jlWeightKgUnit.setPreferredSize(new java.awt.Dimension(20, 23));
        jPanelInput2.add(jlWeightKgUnit);

        jbSetWeightKg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_mov_lft.gif"))); // NOI18N
        jbSetWeightKg.setToolTipText("Asignar peso bruto");
        jbSetWeightKg.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelInput2.add(jbSetWeightKg);

        jlRatioKgHint.setForeground(java.awt.Color.gray);
        jlRatioKgHint.setText("1.000 x unidad");
        jlRatioKgHint.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanelInput2.add(jlRatioKgHint);

        jPanel1.add(jPanelInput2);

        jpBol.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel.add(jpBol, java.awt.BorderLayout.CENTER);

        jbNavPrev.setBackground(java.awt.Color.yellow);
        jbNavPrev.setText("◄");
        jbNavPrev.setToolTipText("Ir atrás");
        jbNavPrev.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbNavPrev.setPreferredSize(new java.awt.Dimension(100, 23));
        jpNav.add(jbNavPrev);

        jbNavNext.setBackground(java.awt.Color.yellow);
        jbNavNext.setText("►");
        jbNavNext.setToolTipText("Ir adelante");
        jbNavNext.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbNavNext.setPreferredSize(new java.awt.Dimension(100, 23));
        jpNav.add(jbNavNext);

        jPanel.add(jpNav, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanelInput1;
    private javax.swing.JPanel jPanelInput2;
    private javax.swing.JButton jbNavNext;
    private javax.swing.JButton jbNavPrev;
    private javax.swing.JButton jbSetWeightKg;
    private javax.swing.JLabel jlDateHelp;
    private javax.swing.JLabel jlDescription1;
    private javax.swing.JLabel jlDescription2;
    private javax.swing.JLabel jlDescription3;
    private javax.swing.JTextField jlElement;
    private javax.swing.JLabel jlElementType;
    private javax.swing.JLabel jlHourHelp;
    private javax.swing.JLabel jlHrSeparator1;
    private javax.swing.JLabel jlHrSeparator2;
    private javax.swing.JLabel jlInput1;
    private javax.swing.JLabel jlInput2;
    private javax.swing.JLabel jlQuantityUnit;
    private javax.swing.JLabel jlRatioKgHint;
    private javax.swing.JLabel jlWeightKgUnit;
    private javax.swing.JPanel jpBol;
    private javax.swing.JPanel jpNav;
    private javax.swing.JTextField jtfDescription1;
    private javax.swing.JTextField jtfDescription2;
    private javax.swing.JTextField jtfDescription3;
    private javax.swing.JTextField jtfElementType;
    private sba.lib.gui.bean.DBeanFieldDate moDateDate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecQuantity;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecWeightKg;
    private sba.lib.gui.bean.DBeanFieldInteger moIntHourHr;
    private sba.lib.gui.bean.DBeanFieldInteger moIntHourMin;
    private sba.lib.gui.bean.DBeanFieldInteger moIntHourSec;
    // End of variables declaration//GEN-END:variables

    /*
     * General private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);
        
        moDateDate.setDateSettings(miClient, "fecha", true);
        moIntHourHr.setIntegerSettings("hora (24 hr)", DGuiConsts.GUI_TYPE_INT_CAL_MONTH, false);
        moIntHourHr.setMaxInteger(23);
        moIntHourMin.setIntegerSettings("minutos", DGuiConsts.GUI_TYPE_INT_CAL_MONTH, false);
        moIntHourMin.setMaxInteger(59);
        moIntHourSec.setIntegerSettings("segundos", DGuiConsts.GUI_TYPE_INT_CAL_MONTH, false);
        moIntHourSec.setMaxInteger(59);
        moDecQuantity.setDecimalSettings("cantidad", DGuiConsts.GUI_TYPE_DEC, true);
        moDecQuantity.setDecimalFormat(DLibUtils.DecimalFormatValue6D);
        moDecWeightKg.setDecimalSettings("peso bruto", DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecWeightKg.setDecimalFormat(DLibUtils.DecimalFormatValue3D);
        
        moFields.addField(moDateDate);
        moFields.addField(moIntHourHr);
        moFields.addField(moIntHourMin);
        moFields.addField(moIntHourSec);
        moFields.addField(moDecQuantity);
        moFields.addField(moDecWeightKg);
        
        moFields.setFormButton(jbSave);
        
        jbSave.setText(DGuiConsts.TXT_BTN_OK);
    }
    
    private boolean preserveCurrentRegistry() {
        boolean preserved = false;
        
        if (moCurrentFields != null) {
            DGuiValidation validation = moCurrentFields.validateFields();
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moCurrentRegistry != null) {
                    if (moCurrentRegistry instanceof DDbBolLocation) {
                        DDbBolLocation bolLocation = (DDbBolLocation) moCurrentRegistry; // convenience variable

                        int[] date = DLibTimeUtils.digestDate(moDateDate.getValue());
                        DateTime dateTime = new DateTime(date[0], date[1], date[2], moIntHourHr.getValue(), moIntHourMin.getValue(), moIntHourSec.getValue(), DateTimeZone.getDefault());

                        bolLocation.setArrivalDepartureDatetime(dateTime.toDate());
                        
                        preserved = true;
                    }
                    else if (moCurrentRegistry instanceof DDbBolMerchandise) {
                        DDbBolMerchandise bolMerchandise = (DDbBolMerchandise) moCurrentRegistry; // convenience variable

                        bolMerchandise.setQuantity(moDecQuantity.getValue());
                        bolMerchandise.setWeightKg(moDecWeightKg.getValue());

                        if (bolMerchandise.getChildMoves().size() == 1) {
                            DDbBolMerchandiseMove bolMerchandiseMove = bolMerchandise.getChildMoves().get(0); // convenience variable

                            bolMerchandiseMove.setQuantity(bolMerchandise.getQuantity());
                        }
                        
                        preserved = true;
                    }
                    else if (moCurrentRegistry instanceof DDbBolMerchandiseMove) {
                        DDbBolMerchandiseMove bolMerchandiseMove = (DDbBolMerchandiseMove) moCurrentRegistry; // convenience variable

                        bolMerchandiseMove.setQuantity(moDecQuantity.getValue());
                        
                        preserved = true;
                    }
                }
            }
        }
        
        return preserved;
    }
    
    private void renderCurrentRegistry() {
        jlElement.setText("");
        
        jlInput1.setText("");
        jlInput2.setText("");
        
        jPanelInput1.remove(moDateDate);
        jPanelInput1.remove(jlDateHelp);
        jPanelInput1.remove(moDecQuantity);
        jPanelInput1.remove(jlQuantityUnit);
        
        jPanelInput2.remove(moIntHourHr);
        jPanelInput2.remove(jlHrSeparator1);
        jPanelInput2.remove(moIntHourMin);
        jPanelInput2.remove(jlHrSeparator2);
        jPanelInput2.remove(moIntHourSec);
        jPanelInput2.remove(jlHourHelp);
        jPanelInput2.remove(moDecWeightKg);
        jPanelInput2.remove(jlWeightKgUnit);
        jPanelInput2.remove(jbSetWeightKg);
        jPanelInput2.remove(jlRatioKgHint);
        
        moFields.resetFields();
        
        moCurrentFields = new DGuiFields();
        
        moIntHourSec.setNextButton(null);
        moDecQuantity.setNextButton(null);
        moDecWeightKg.setNextButton(null);
        
        if (moCurrentRegistry != null && maRegistries != null) {
            int pos = maRegistries.indexOf(moCurrentRegistry) + 1;
            int tot = maRegistries.size();
            boolean last = pos == tot;
            
            jlElement.setText(pos + " de " + tot); // current step out of total steps
            
            if (moCurrentRegistry instanceof DDbBolLocation) {
                jtfElementType.setText("UBICACIÓN");
                
                jlDescription1.setText("Tipo:");
                jlDescription2.setText("Nombre:");
                jlDescription3.setText("ID ubicación:");
                
                jlInput1.setText("Fecha:*");
                jlInput2.setText("Hora:*");

                jPanelInput1.add(moDateDate);
                jPanelInput1.add(jlDateHelp);
                
                jPanelInput2.add(moIntHourHr);
                jPanelInput2.add(jlHrSeparator1);
                jPanelInput2.add(moIntHourMin);
                jPanelInput2.add(jlHrSeparator2);
                jPanelInput2.add(moIntHourSec);
                jPanelInput2.add(jlHourHelp);
                
                DDbBolLocation bolLocation = (DDbBolLocation) moCurrentRegistry; // convenience variable
                
                jtfDescription1.setText((String) miClient.getSession().readField(DModConsts.LS_LOC_TP, new int[] { bolLocation.getFkLocationTypeId() }, DDbRegistry.FIELD_NAME));
                jtfDescription1.setCaretPosition(0);
                jtfDescription2.setText(bolLocation.getOwnLocation().getName());
                jtfDescription2.setCaretPosition(0);
                jtfDescription3.setText(bolLocation.getLocationId());
                jtfDescription3.setCaretPosition(0);
                
                // init current fields:
                
                moDateDate.setValue(bolLocation.getArrivalDepartureDatetime());
                LocalTime time = new LocalTime(bolLocation.getArrivalDepartureDatetime().getTime());
                moIntHourHr.setValue(time.getHourOfDay());
                moIntHourMin.setValue(time.getMinuteOfHour());
                moIntHourSec.setValue(time.getSecondOfMinute());
                
                // prepare current fields:
                
                moCurrentFields.addField(moDateDate);
                moCurrentFields.addField(moIntHourHr);
                moCurrentFields.addField(moIntHourMin);
                moCurrentFields.addField(moIntHourSec);
                
                // prepare for user input:
                
                moDateDate.requestFocusInWindow();
                
                moIntHourSec.setNextButton(last ? jbSave : jbNavNext);
            }
            else if (moCurrentRegistry instanceof DDbBolMerchandise) {
                jtfElementType.setText("MERCANCÍA");
                
                jlDescription1.setText("Cve. bienes:");
                jlDescription2.setText("Descripción:");
                jlDescription3.setText("Unidad:");
                
                jlInput1.setText("Cantidad:*");
                jlInput2.setText("Peso bruto:*");
                
                jPanelInput1.add(moDecQuantity);
                jPanelInput1.add(jlQuantityUnit);
                
                jPanelInput2.add(moDecWeightKg);
                jPanelInput2.add(jlWeightKgUnit);
                jPanelInput2.add(jbSetWeightKg);
                jPanelInput2.add(jlRatioKgHint);
                
                DDbBolMerchandise bolMerchandise = (DDbBolMerchandise) moCurrentRegistry; // convenience variable
                DDbItem item = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, new int[] { bolMerchandise.getFkItemId() });
                
                jtfDescription1.setText(item.getName() + " (ProdServ: " + (item.getActualCfdItemKey().isEmpty() ? "?" : item.getActualCfdItemKey()) + ")");
                jtfDescription1.setCaretPosition(0);
                jtfDescription2.setText(bolMerchandise.getDescriptionItem());
                jtfDescription2.setCaretPosition(0);
                jtfDescription3.setText(bolMerchandise.getDescriptionUnit());
                jtfDescription3.setCaretPosition(0);
                
                // init current fields:
                
                moDecQuantity.setValue(bolMerchandise.getQuantity());
                jlQuantityUnit.setText((String) miClient.getSession().readField(DModConsts.IU_UNT, new int[] { bolMerchandise.getFkUnitId()}, DDbRegistry.FIELD_CODE));
                moDecWeightKg.setValue(bolMerchandise.getWeightKg());
                
                // prepare current fields:
                
                moCurrentFields.addField(moDecQuantity);
                moCurrentFields.addField(moDecWeightKg);
                
                // prepare for user input:
                
                moDecQuantity.requestFocusInWindow();
                
                moDecWeightKg.setNextButton(last ? jbSave : jbNavNext);
            }
            else if (moCurrentRegistry instanceof DDbBolMerchandiseMove) {
                jtfElementType.setText("CANTIDAD TRANSPORTA");
                
                jlDescription1.setText("Cve. bienes:");
                jlDescription2.setText("Descripción:");
                jlDescription3.setText("Origen/Destino:");
                
                jlInput1.setText("Cantidad:*");
                jlInput2.setText("");
                
                jPanelInput1.add(moDecQuantity);
                jPanelInput1.add(jlQuantityUnit);
                
                DDbBolMerchandiseMove bolMerchandiseMove = (DDbBolMerchandiseMove) moCurrentRegistry; // convenience variable
                DDbBolMerchandise bolMerchandise = moBol.getChildMerchandise(new int[] { bolMerchandiseMove.getPkBolId(), bolMerchandiseMove.getPkMerchandiseId() }); // convenience variable
                DDbItem item = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, new int[] { bolMerchandise.getFkItemId() });
                
                jtfDescription1.setText(item.getName() + " (ProdServ: " + (item.getActualCfdItemKey().isEmpty() ? "?" : item.getActualCfdItemKey()) + ")");
                jtfDescription1.setCaretPosition(0);
                jtfDescription2.setText(bolMerchandise.getDescriptionItem());
                jtfDescription2.setCaretPosition(0);
                jtfDescription3.setText(bolMerchandiseMove.getOwnSourceLocation().getName() + " / " + bolMerchandiseMove.getOwnDestinyLocation().getName());
                jtfDescription3.setCaretPosition(0);
                
                // init current fields:
                
                moDecQuantity.setValue(bolMerchandiseMove.getQuantity());
                jlQuantityUnit.setText((String) miClient.getSession().readField(DModConsts.IU_UNT, new int[] { bolMerchandise.getFkUnitId()}, DDbRegistry.FIELD_CODE));
                
                // prepare current fields:
                
                moCurrentFields.addField(moDecQuantity);
                
                // prepare for user input:
                
                moDecQuantity.requestFocusInWindow();
                
                moDecQuantity.setNextButton(last ? jbSave : jbNavNext);
            }
        }
        
        jPanelInput1.repaint();
        jPanelInput2.repaint();
    }
    
    private void renderCurrentRegistryAndEnableNavButtons(final int index) {
        renderCurrentRegistry();
        
        jbNavPrev.setEnabled(false);
        jbNavNext.setEnabled(false);
        
        if (index != -1) {
            if (index > 0) {
                jbNavPrev.setEnabled(true);
            }

            if (index + 1 < maRegistries.size()) {
                jbNavNext.setEnabled(true);
            }
        }
        
        jbSave.setEnabled(index + 1 == maRegistries.size());
    }
    
    private void prepareCurrentUnit() {
        moCurrentUnit = null;
        
        if (moCurrentRegistry != null && moCurrentRegistry instanceof DDbBolMerchandise) {
            DDbBolMerchandise bolMerchandise = (DDbBolMerchandise) moCurrentRegistry; // convenience variable
            
            moCurrentUnit = (DDbUnit) miClient.getSession().readRegistry(DModConsts.IU_UNT, new int[] { bolMerchandise.getFkUnitId() });
        }
    }
    
    private void prepareRegistries() {
        maRegistries = new ArrayList<>();
        moCurrentRegistry = null;
        
        if (moBol != null) {
            if (!moBol.getChildLocations().isEmpty()) {
                maRegistries.addAll(moBol.getChildLocations());
            }
            
            if (!moBol.getChildMerchandises().isEmpty()) {
                for (DDbBolMerchandise merchandise : moBol.getChildMerchandises()) {
                    merchandise.setWeightKg(0); // to allow automatic recalculation of weigth
                    
                    maRegistries.add(merchandise);
                    maRegistries.addAll(merchandise.getChildMoves());
                }
            }
            
            if (!maRegistries.isEmpty()) {
                moCurrentRegistry = maRegistries.get(0);
                prepareCurrentUnit();
            }
        }
        
        renderCurrentRegistryAndEnableNavButtons(moCurrentRegistry == null ? -1 : 0);
    }
    
    private void computeWeightKg() {
        if (moCurrentUnit == null || moCurrentUnit.getRatioKg() == 0) {
            jlRatioKgHint.setText("");
            jlRatioKgHint.setToolTipText(null);
        }
        else {
            String ratio = DLibUtils.getDecimalFormatQuantity().format(moCurrentUnit.getRatioKg()) + " x " + moCurrentUnit.getCode();
            jlRatioKgHint.setText(ratio);
            jlRatioKgHint.setToolTipText("Equivalencia kg: " + ratio);
            
            if (moDecWeightKg.getValue() == 0) {
                moDecWeightKg.setValue(moDecQuantity.getValue() * moCurrentUnit.getRatioKg());
            }
        }
    }
    
    private void actionPerformedSetWeightKg() {
        moDecWeightKg.setValue(0d);
        computeWeightKg();
        moDecWeightKg.requestFocusInWindow();
    }
    
    private void move(final boolean foward) {
        int index = -1;
        boolean move = false;
        Date oldArrivalDepartureDatetime = null;
        
        if (moCurrentRegistry != null && maRegistries != null && maRegistries.contains(moCurrentRegistry)) {
            if (preserveCurrentRegistry()) {
                // go to previous element:

                index = maRegistries.indexOf(moCurrentRegistry);
                
                if (index != -1) {
                    if (foward) {
                        // next element:
                        if (index + 1 < maRegistries.size()) {
                            index++;
                            move = true;
                        }
                    }
                    else {
                        // previous element:
                        if (index > 0) {
                            index--;
                            move = true;
                        }
                    }
                    
                    // preserve current arrival departure datetime:
                    
                    if (foward && move && moCurrentRegistry instanceof DDbBolLocation && maRegistries.get(index) instanceof DDbBolLocation) {
                        oldArrivalDepartureDatetime = ((DDbBolLocation) moCurrentRegistry).getArrivalDepartureDatetime();
                    }
                }
            }
        }
        
        if (index != -1) {
            moCurrentRegistry = maRegistries.get(index);
            prepareCurrentUnit();
            
            // propagate current arrival departure datetime if needed:
            
            if (oldArrivalDepartureDatetime != null && moCurrentRegistry instanceof DDbBolLocation) {
                Date newArrivalDepartureDatetime = ((DDbBolLocation) moCurrentRegistry).getArrivalDepartureDatetime();
                
                if (newArrivalDepartureDatetime != null && newArrivalDepartureDatetime.before(oldArrivalDepartureDatetime)) {
                    ((DDbBolLocation) moCurrentRegistry).setArrivalDepartureDatetime(oldArrivalDepartureDatetime);
                }
            }
            
            // render current registry:
            
            renderCurrentRegistryAndEnableNavButtons(index);
        }
    }
    
    private void actionPerformedNavPrev() {
        move(false);
    }
    
    private void actionPerformedNavNext() {
        move(true);
    }
    
    private void focusLostQuantity() {
        computeWeightKg();
    }
    
    public boolean isDialogNeeded() {
        return maRegistries != null && !maRegistries.isEmpty();
    }

    @Override
    public void addAllListeners() {
        jbSetWeightKg.addActionListener(this);
        jbNavPrev.addActionListener(this);
        jbNavNext.addActionListener(this);
        
        moDecQuantity.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSetWeightKg.removeActionListener(this);
        jbNavPrev.removeActionListener(this);
        jbNavNext.removeActionListener(this);
        
        moDecQuantity.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moBol = (DDbBol) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        prepareRegistries();

        addAllListeners();
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        return moBol;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = new DGuiValidation();
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbSetWeightKg) {
                actionPerformedSetWeightKg();
            }
            else if (button == jbNavPrev) {
                actionPerformedNavPrev();
            }
            else if (button == jbNavNext) {
                actionPerformedNavNext();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();
            
            if (field == moDecQuantity) {
                focusLostQuantity();
            }
        }
    }
}
