/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.lad.form;

import cfd.ver40.DCfdi40Catalogs;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JTable;
import sba.gui.cat.DXmlCatalog;
import sba.gui.cat.DXmlCatalogEntry;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.lad.db.DLadCatalogAddressCountry;
import sba.mod.lad.db.DLadCatalogAddressState;
import sba.mod.lad.db.DLadCatalogConsts;

/**
 *
 * @author Sergio Flores
 */
public class DPickerCatalogAddressState extends DBeanFormDialog implements ActionListener, KeyListener {
    
    protected DLadCatalogAddressCountry moCountry;
    protected DLadCatalogAddressCountry moOldCountry;
    protected DGridPaneForm moGridOptions;
    protected ArrayList<DGridRow> maGridRows;

    /**
     * Creates new form DPickAddressState
     */
    public DPickerCatalogAddressState(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, 0, 0, "Buscar estado");
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpParams = new javax.swing.JPanel();
        jpParams1 = new javax.swing.JPanel();
        jlCountry = new javax.swing.JLabel();
        jtfCountryCode = new javax.swing.JTextField();
        jtfCountryName = new javax.swing.JTextField();
        jpParams2 = new javax.swing.JPanel();
        jlState = new javax.swing.JLabel();
        moTextStateName = new sba.lib.gui.bean.DBeanFieldText();
        moTextStateCode = new sba.lib.gui.bean.DBeanFieldText();
        jbClear = new javax.swing.JButton();
        jpOptions = new javax.swing.JPanel();

        jpParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros de búsqueda:"));
        jpParams.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpParams1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCountry.setText("País:");
        jlCountry.setPreferredSize(new java.awt.Dimension(75, 23));
        jpParams1.add(jlCountry);

        jtfCountryCode.setEditable(false);
        jtfCountryCode.setText("TEXT");
        jtfCountryCode.setFocusable(false);
        jtfCountryCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jpParams1.add(jtfCountryCode);

        jtfCountryName.setEditable(false);
        jtfCountryName.setText("TEXT");
        jtfCountryName.setFocusable(false);
        jtfCountryName.setPreferredSize(new java.awt.Dimension(400, 23));
        jpParams1.add(jtfCountryName);

        jpParams.add(jpParams1);

        jpParams2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlState.setText("Estado:");
        jlState.setPreferredSize(new java.awt.Dimension(75, 23));
        jpParams2.add(jlState);

        moTextStateName.setText("TEXT");
        moTextStateName.setPreferredSize(new java.awt.Dimension(400, 23));
        jpParams2.add(moTextStateName);

        moTextStateCode.setText("TEXT");
        moTextStateCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jpParams2.add(moTextStateCode);

        jbClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_delete.gif"))); // NOI18N
        jbClear.setToolTipText("Limpiar");
        jbClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jpParams2.add(jbClear);

        jpParams.add(jpParams2);

        getContentPane().add(jpParams, java.awt.BorderLayout.NORTH);

        jpOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones:"));
        jpOptions.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpOptions, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbClear;
    private javax.swing.JLabel jlCountry;
    private javax.swing.JLabel jlState;
    private javax.swing.JPanel jpOptions;
    private javax.swing.JPanel jpParams;
    private javax.swing.JPanel jpParams1;
    private javax.swing.JPanel jpParams2;
    private javax.swing.JTextField jtfCountryCode;
    private javax.swing.JTextField jtfCountryName;
    private sba.lib.gui.bean.DBeanFieldText moTextStateCode;
    private sba.lib.gui.bean.DBeanFieldText moTextStateName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);
        
        moTextStateName.setTextSettings(DGuiUtils.getLabelName(jlState), 30);
        moTextStateName.setTextCaseType(0);
        moTextStateCode.setTextSettings(DGuiUtils.getLabelName(jlState), DBolUtils.DEF_CODE_ADDRESS_STATE.length());
        moTextStateCode.setTextCaseType(0);
        
        moFields.addField(moTextStateName);
        moFields.addField(moTextStateCode);
        moFields.setFormButton(jbSave);
        
        moGridOptions = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[2];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Descripción", 400);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Clave", 100);

                for (DGridColumnForm column : columns) {
                    moModel.getGridColumns().add(column);
                }
            }
        };
        
        jpOptions.add(moGridOptions, BorderLayout.CENTER);
    }
    
    private void populateGridOptions(final Vector<DGridRow> rows) {
        moGridOptions.populateGrid(rows);
        moGridOptions.getTable().addKeyListener(this);
        moGridOptions.getTable().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    actionSave();
                }
            }
        });
    }
    
    private void actionPerformedClear() {
        moTextStateName.resetField();
        moTextStateCode.resetField();
        
        moTextStateName.requestFocus();
    }

    private void keyPressedStateCode(final KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_ENTER) {
            event.consume();
            moGridOptions.getTable().requestFocusInWindow();
        }
    }
    
    private void keyPressedTable(final KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_ENTER && moGridOptions.getSelectedGridRow() != null) {
            event.consume();
            actionSave();
        }
    }

    private void keyReleasedStateNameCode(final KeyEvent e) {
        String name = moTextStateName.getValue().toUpperCase();
        String code = moTextStateCode.getValue().toUpperCase();
        Vector<DGridRow> rows = new Vector<>();
        
        if (name.isEmpty() && code.isEmpty()) {
            rows.addAll(maGridRows);
        }
        else {
            for (DGridRow row : maGridRows) {
                if ((!name.isEmpty() && row.getRowName().toUpperCase().contains(name)) || (!code.isEmpty() && row.getRowCode().toUpperCase().contains(code))) {
                    rows.add(row);
                }
            }
        }
        
        populateGridOptions(rows);
    }
    
    @Override
    public void resetForm() {
        mnFormResult = 0;
        mbFirstActivation = true;
        
        removeAllListeners();
        
        moFields.resetFields();
        
        try {
            if (moOldCountry == null || !moOldCountry.Code.equals(moCountry.Code)) {
                moOldCountry = moCountry.clone();
                
                maGridRows = new ArrayList<>();
                DXmlCatalog xmlCatalog = DBolUtils.getXmlCatalog(DCfdi40Catalogs.XML_CCP_EDO_33, DBolUtils.ATT_COUNTRY, "", null);
                for (DXmlCatalogEntry entry : xmlCatalog.getEntries()) {
                    if (entry.getBelongingCode().equals(moCountry.Code)) {
                        maGridRows.add(new DLadCatalogAddressState(entry.getCode(), entry.getName()));
                    }
                }
                
                if (maGridRows.isEmpty()) {
                    miClient.showMsgBoxWarning("No se encontraron estados para el país '" + moCountry.Code + "'.");
                }
            }
            
            populateGridOptions(new Vector<>(maGridRows));
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
        
        addAllListeners();
    }
    
    @Override
    public void addAllListeners() {
        jbClear.addActionListener(this);
        moTextStateName.addKeyListener(this);
        moTextStateCode.addKeyListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbClear.removeActionListener(this);
        moTextStateName.removeKeyListener(this);
        moTextStateCode.removeKeyListener(this);
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = new DGuiValidation();
        
        if (moGridOptions.getSelectedGridRow() == null) {
            validation.setMessage(DGridConsts.MSG_SELECT_ROW);
            validation.setComponent(moGridOptions.getTable());
        }
        
        return validation;
    }
    
    private void setCountry(final DLadCatalogAddressCountry country) {
        moCountry = country;
        
        if (moCountry == null) {
            jtfCountryCode.setText("");
            jtfCountryName.setText("");
        }
        else {
            jtfCountryCode.setText(moCountry.Code);
            jtfCountryCode.setCaretPosition(0);
            jtfCountryName.setText(moCountry.Name);
            jtfCountryName.setCaretPosition(0);
        }
    }
    
    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DLadCatalogConsts.ADDRESS_COUNTRY:
                setCountry((DLadCatalogAddressCountry) value);
                break;
            default:
                // nothing
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case DLadCatalogConsts.ADDRESS_STATE:
                value = moGridOptions.getSelectedGridRow();
                break;
            default:
                // nothing
        }
        
        return value;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbClear) {
                actionPerformedClear();
            }
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextStateCode) {
                keyPressedStateCode(e);
            }
        }
        else if (e.getSource() instanceof JTable) {
            JTable table = (JTable) e.getSource();
            
            if (table == moGridOptions.getTable()) {
                keyPressedTable(e);
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextStateName || field == moTextStateCode) {
                keyReleasedStateNameCode(e);
            }
        }
    }
}
