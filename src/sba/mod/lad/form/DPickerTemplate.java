/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.lad.form;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JTable;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.grid.DGridRowOptionPicker;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;

/**
 *
 * @author Sergio Flores
 */
public class DPickerTemplate extends DBeanFormDialog implements KeyListener {
    
    public static final int TEMPLATE = 1;
    
    protected DGridPaneForm moGridOptions;
    protected ArrayList<DGridRow> maGridRows;

    /**
     * Creates new form DPickerTemplate.
     * @param client GUI client.
     */
    public DPickerTemplate(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, 0, 0, DUtilConsts.TXT_SELECT + " plantilla de carta porte");
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpOptions = new javax.swing.JPanel();

        jpOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones:"));
        jpOptions.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpOptions, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jpOptions;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);
        
        moFields.setFormButton(jbSave);
        
        jbSave.setText(DGuiConsts.TXT_BTN_OK);
        
        moGridOptions = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[3];
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_L, "Nombre");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "CÃ³digo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DUtilConsts.TXT_BRANCH + " empresa");

                for (DGridColumnForm column : columns) {
                    moModel.getGridColumns().add(column);
                }
            }
        };
        
        jpOptions.add(moGridOptions, BorderLayout.CENTER);
    }
    
    private void populateGridOptions(final Vector<DGridRow> rows) {
        Vector<DGridRow> fittingRows = new Vector<>();
        
        fittingRows.addAll(rows);
        
        moGridOptions.populateGrid(fittingRows);
        moGridOptions.getTable().addKeyListener(this);
        moGridOptions.getTable().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    actionSave();
                }
            }
        });
    }
    
    private void keyPressedTable(final KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_ENTER && moGridOptions.getSelectedGridRow() != null) {
            event.consume();
            actionSave();
        }
    }

    private void retreiveGridOptions() throws Exception {
        String sql = "SELECT bol.id_bol AS _id, bol.temp_code, bol.temp_name, bra.code "
                + "FROM " + DModConsts.TablesMap.get(DModConsts.L_BOL) + " AS bol "
                + "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BRA) + " AS bra ON bra.id_bpr = bol.fk_own_bpr AND bra.id_bra = bol.fk_own_bra "
                + "WHERE NOT bol.b_del AND b_temp "
                + "ORDER BY bol.temp_name, bol.temp_code, bol.id_bol;";

        maGridRows = new ArrayList<>();

        try (Statement statement = miClient.getSession().getStatement().getConnection().createStatement()) {
            ResultSet resultSet = statement.executeQuery(sql);
            
            while (resultSet.next()) {
                DGridRowOptionPicker row = new DGridRowOptionPicker(new int[] { resultSet.getInt("_id") });

                row.setRowName(resultSet.getString("bol.temp_name"));
                row.setRowCode(resultSet.getString("bol.temp_code"));

                row.getValues().add(resultSet.getString("bol.temp_name")); // 0
                row.getValues().add(resultSet.getString("bol.temp_code")); // 1
                row.getValues().add(resultSet.getString("bra.code")); // 2

                maGridRows.add(row);
            }
        }
    }
    
    @Override
    public void resetForm() {
        mnFormResult = 0;
        mbFirstActivation = true;
        
        removeAllListeners();
        
        moFields.resetFields();
        
        try {
            reloadCatalogues();
            
            retreiveGridOptions();
            populateGridOptions(new Vector<>(maGridRows));
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
        
        addAllListeners();
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = new DGuiValidation();
        
        if (moGridOptions.getSelectedGridRow() == null) {
            validation.setMessage(DGridConsts.MSG_SELECT_ROW);
            validation.setComponent(moGridOptions.getTable());
        }
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case TEMPLATE:
                value = moGridOptions.getSelectedGridRow().getRowPrimaryKey();
                break;
            default:
                // nothing
        }
        
        return value;
    }

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getSource() instanceof JTable) {
            JTable table = (JTable) e.getSource();
            
            if (table == moGridOptions.getTable()) {
                keyPressedTable(e);
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {

    }
}
