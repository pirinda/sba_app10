/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.lad.form;

import cfd.ver40.DCfdi40Catalogs;
import sba.lib.DLibConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.lad.db.DLadBolIntlTransport;

/**
 *
 * @author Sergio Flores
 */
public class DDialogBolIntlTransport extends DBeanFormDialog {

    protected DLadBolIntlTransport moBolIntlTransport;
    
    /**
     * Creates new form DDialogBolIntlTransport
     * @param client GUI Client.
     * @param title Title.
     */
    public DDialogBolIntlTransport(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.LX_BOL_INTL_TPT, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgBolIntlTransportDirections = new javax.swing.ButtonGroup();
        jPanel = new javax.swing.JPanel();
        jpBolIntlTransport = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlBolIntlTransportDirection = new javax.swing.JLabel();
        moRadBolIntlTransportDirectionIn = new sba.lib.gui.bean.DBeanFieldRadio();
        moRadBolIntlTransportDirectionOut = new sba.lib.gui.bean.DBeanFieldRadio();
        jPanel12 = new javax.swing.JPanel();
        jlBolIntlTransportCountry = new javax.swing.JLabel();
        moKeyBolIntlTransportCountry = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel13 = new javax.swing.JPanel();
        jlBolIntlWayTransportType = new javax.swing.JLabel();
        moKeyBolIntlWayTransportType = new sba.lib.gui.bean.DBeanFieldKey();

        jPanel.setLayout(new java.awt.BorderLayout());

        jpBolIntlTransport.setBorder(javax.swing.BorderFactory.createTitledBorder("Transporte internacional:"));
        jpBolIntlTransport.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 3));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBolIntlTransportDirection.setText("Entrada o salida:*");
        jlBolIntlTransportDirection.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jlBolIntlTransportDirection);

        bgBolIntlTransportDirections.add(moRadBolIntlTransportDirectionIn);
        moRadBolIntlTransportDirectionIn.setSelected(true);
        moRadBolIntlTransportDirectionIn.setText("Entrada");
        jPanel11.add(moRadBolIntlTransportDirectionIn);

        bgBolIntlTransportDirections.add(moRadBolIntlTransportDirectionOut);
        moRadBolIntlTransportDirectionOut.setText("Salida");
        jPanel11.add(moRadBolIntlTransportDirectionOut);

        jPanel1.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBolIntlTransportCountry.setText("País origen o destino:*");
        jlBolIntlTransportCountry.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlBolIntlTransportCountry);

        moKeyBolIntlTransportCountry.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(moKeyBolIntlTransportCountry);

        jPanel1.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBolIntlWayTransportType.setText("Vía entrada o salida:*");
        jlBolIntlWayTransportType.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jlBolIntlWayTransportType);

        moKeyBolIntlWayTransportType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moKeyBolIntlWayTransportType);

        jPanel1.add(jPanel13);

        jpBolIntlTransport.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel.add(jpBolIntlTransport, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgBolIntlTransportDirections;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JLabel jlBolIntlTransportCountry;
    private javax.swing.JLabel jlBolIntlTransportDirection;
    private javax.swing.JLabel jlBolIntlWayTransportType;
    private javax.swing.JPanel jpBolIntlTransport;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBolIntlTransportCountry;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBolIntlWayTransportType;
    private sba.lib.gui.bean.DBeanFieldRadio moRadBolIntlTransportDirectionIn;
    private sba.lib.gui.bean.DBeanFieldRadio moRadBolIntlTransportDirectionOut;
    // End of variables declaration//GEN-END:variables

    /*
     * General private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 480, 300);
        
        moRadBolIntlTransportDirectionIn.setBooleanSettings(moRadBolIntlTransportDirectionIn.getText(), false);
        moRadBolIntlTransportDirectionOut.setBooleanSettings(moRadBolIntlTransportDirectionOut.getText(), false);
        moKeyBolIntlTransportCountry.setKeySettings(miClient, DGuiUtils.getLabelName(jlBolIntlTransportCountry), true);
        moKeyBolIntlWayTransportType.setKeySettings(miClient, DGuiUtils.getLabelName(jlBolIntlWayTransportType), true);
        
        moFields.addField(moRadBolIntlTransportDirectionIn);
        moFields.addField(moRadBolIntlTransportDirectionOut);
        moFields.addField(moKeyBolIntlTransportCountry);
        moFields.addField(moKeyBolIntlWayTransportType);
        
        moFields.setFormButton(jbSave);
        
        jbSave.setText(DGuiConsts.TXT_BTN_OK);
    }
    
    @Override
    public void addAllListeners() {
        
    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyBolIntlTransportCountry, DModConsts.CS_CTY, 0, null);
        miClient.getSession().populateCatalogue(moKeyBolIntlWayTransportType, DModConsts.LS_TPT_TP, DModConsts.L_BOL, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();
        
        return validation;
    }
    
    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModConsts.LX_BOL_INTL_TPT:
                moBolIntlTransport = (DLadBolIntlTransport) value;

                mnFormResult = DLibConsts.UNDEFINED;
                mbFirstActivation = true;

                removeAllListeners();
                reloadCatalogues();

                if (moBolIntlTransport == null) {
                    moRadBolIntlTransportDirectionIn.setSelected(true);
                    moKeyBolIntlTransportCountry.resetField();
                    moKeyBolIntlWayTransportType.resetField();
                }
                else {
                    switch (moBolIntlTransport.IntlTransportDirection) {
                        case DCfdi40Catalogs.CcpMercancíasEntrada:
                            moRadBolIntlTransportDirectionIn.setSelected(true);
                            break;
                        case DCfdi40Catalogs.CcpMercancíasSalida:
                            moRadBolIntlTransportDirectionOut.setSelected(true);
                            break;
                        default:
                            bgBolIntlTransportDirections.clearSelection();
                    }

                    moKeyBolIntlTransportCountry.setValue(new int[] { moBolIntlTransport.IntlTransportCountryId });
                    moKeyBolIntlWayTransportType.setValue(new int[] { moBolIntlTransport.IntlWayTransportTypeId});
                }

                addAllListeners();
                break;
                
            default:
                // nothing
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case DModConsts.LX_BOL_INTL_TPT:
                moBolIntlTransport = new DLadBolIntlTransport();
                
                if (moRadBolIntlTransportDirectionIn.isSelected()) {
                    moBolIntlTransport.IntlTransportDirection = DCfdi40Catalogs.CcpMercancíasEntrada;
                }
                else if (moRadBolIntlTransportDirectionOut.isSelected()) {
                    moBolIntlTransport.IntlTransportDirection = DCfdi40Catalogs.CcpMercancíasSalida;
                }
                else {
                    moBolIntlTransport.IntlTransportDirection = "";
                }
                
                moBolIntlTransport.IntlTransportCountryId = moKeyBolIntlTransportCountry.getValue()[0];
                moBolIntlTransport.IntlWayTransportTypeId = moKeyBolIntlWayTransportType.getValue()[0];

                value = moBolIntlTransport;
                break;
                
            default:
                // nothing
        }
        
        return value;
    }
}
