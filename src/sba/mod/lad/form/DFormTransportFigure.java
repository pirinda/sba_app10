/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.lad.form;

import cfd.ver40.DCfdi40Catalogs;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiItem;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.lad.db.DDbTransportFigure;
import sba.mod.lad.db.DLadCatalogAddressCountry;
import sba.mod.lad.db.DLadCatalogAddressCounty;
import sba.mod.lad.db.DLadCatalogAddressDistrict;
import sba.mod.lad.db.DLadCatalogAddressLocality;
import sba.mod.lad.db.DLadCatalogAddressState;
import sba.mod.lad.db.DLadCatalogConsts;

/**
 *
 * @author Sergio Flores
 */
public class DFormTransportFigure extends DBeanForm implements ActionListener, ItemListener, FocusListener, KeyListener {
    
    protected DDbTransportFigure moTptFigure;
    
    protected DPickerCatalogAddressState moPickerCatalogAddressState;
    protected DPickerCatalogAddressCounty moPickerCatalogAddressCounty;
    protected DPickerCatalogAddressLocality moPickerCatalogAddressLocality;
    protected DPickerCatalogAddressDistrict moPickerCatalogAddressDistrict;

    /**
     * Creates new form DFormTransportFigure
     * @param client GUI Client.
     * @param title Title.
     */
    public DFormTransportFigure(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.LU_TPT_FIGURE, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgBolIntlTransportDirections = new javax.swing.ButtonGroup();
        bgMerchDimensionUnits = new javax.swing.ButtonGroup();
        bgMerchHazardousMaterial = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jpHeader = new javax.swing.JPanel();
        jpTptFigInput1 = new javax.swing.JPanel();
        jpTptFigInput11 = new javax.swing.JPanel();
        jlTptFigTransportFigureType = new javax.swing.JLabel();
        moKeyTptFigTransportFigureType = new sba.lib.gui.bean.DBeanFieldKey();
        jbTptFigEditType = new javax.swing.JButton();
        jpTptFigInput12 = new javax.swing.JPanel();
        jlTptFigName = new javax.swing.JLabel();
        moTextTptFigName = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput13 = new javax.swing.JPanel();
        jlTptFigCode = new javax.swing.JLabel();
        moTextTptFigCode = new sba.lib.gui.bean.DBeanFieldText();
        jbTptFigGetNextCode = new javax.swing.JButton();
        jlTptFigMail = new javax.swing.JLabel();
        moTextTptFigMail = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput14 = new javax.swing.JPanel();
        jlTptFigFiscalId = new javax.swing.JLabel();
        moTextTptFigFiscalId = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput15 = new javax.swing.JPanel();
        jlTptFigDriverLicense = new javax.swing.JLabel();
        moTextTptFigDriverLicense = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput16 = new javax.swing.JPanel();
        jlTptFigFigureCountry = new javax.swing.JLabel();
        moKeyTptFigFigureCountry = new sba.lib.gui.bean.DBeanFieldKey();
        jpTptFigInput17 = new javax.swing.JPanel();
        jlTptFigForeignId = new javax.swing.JLabel();
        moTextTptFigForeignId = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput2 = new javax.swing.JPanel();
        jpTptFigInput21 = new javax.swing.JPanel();
        jlTptFigAddressCountry = new javax.swing.JLabel();
        moKeyTptFigAddressCountry = new sba.lib.gui.bean.DBeanFieldKey();
        jpTptFigInput22 = new javax.swing.JPanel();
        jlTptFigAddressState = new javax.swing.JLabel();
        moTextTptFigAddressStateCode = new sba.lib.gui.bean.DBeanFieldText();
        moTextTptFigAddressStateName = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput23 = new javax.swing.JPanel();
        jlTptFigAddressCounty = new javax.swing.JLabel();
        moTextTptFigAddressCountyCode = new sba.lib.gui.bean.DBeanFieldText();
        moTextTptFigAddressCountyName = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput24 = new javax.swing.JPanel();
        jlTptFigAddressLocality = new javax.swing.JLabel();
        moTextTptFigAddressLocalityCode = new sba.lib.gui.bean.DBeanFieldText();
        moTextTptFigAddressLocalityName = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput25 = new javax.swing.JPanel();
        jlTptFigAddressZipCode = new javax.swing.JLabel();
        moTextTptFigAddressZipCode = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput26 = new javax.swing.JPanel();
        jlTptFigAddressDistrict = new javax.swing.JLabel();
        moTextTptFigAddressDistrictCode = new sba.lib.gui.bean.DBeanFieldText();
        moTextTptFigAddressDistrictName = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput27 = new javax.swing.JPanel();
        jlTptFigAddressStreet = new javax.swing.JLabel();
        moTextTptFigAddressStreet = new sba.lib.gui.bean.DBeanFieldText();
        moTextTptFigAddressNumberExt = new sba.lib.gui.bean.DBeanFieldText();
        moTextTptFigAddressNumberInt = new sba.lib.gui.bean.DBeanFieldText();
        jpTptFigInput28 = new javax.swing.JPanel();
        jlTptFigAddressReference = new javax.swing.JLabel();
        moTextTptFigAddressReference = new sba.lib.gui.bean.DBeanFieldText();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpHeader.setLayout(new java.awt.GridLayout(1, 2));

        jpTptFigInput1.setBorder(javax.swing.BorderFactory.createTitledBorder("Figura del transporte:"));
        jpTptFigInput1.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jpTptFigInput11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigTransportFigureType.setText("Tipo:*");
        jlTptFigTransportFigureType.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput11.add(jlTptFigTransportFigureType);

        moKeyTptFigTransportFigureType.setPreferredSize(new java.awt.Dimension(265, 23));
        jpTptFigInput11.add(moKeyTptFigTransportFigureType);

        jbTptFigEditType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_edit.gif"))); // NOI18N
        jbTptFigEditType.setToolTipText("Modificar");
        jbTptFigEditType.setPreferredSize(new java.awt.Dimension(23, 23));
        jpTptFigInput11.add(jbTptFigEditType);

        jpTptFigInput1.add(jpTptFigInput11);

        jpTptFigInput12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigName.setText("Nombre:*");
        jlTptFigName.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput12.add(jlTptFigName);

        moTextTptFigName.setText("TEXT");
        moTextTptFigName.setPreferredSize(new java.awt.Dimension(290, 23));
        jpTptFigInput12.add(moTextTptFigName);

        jpTptFigInput1.add(jpTptFigInput12);

        jpTptFigInput13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigCode.setText("Código:*");
        jlTptFigCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput13.add(jlTptFigCode);

        moTextTptFigCode.setText("TEXT");
        moTextTptFigCode.setPreferredSize(new java.awt.Dimension(60, 23));
        jpTptFigInput13.add(moTextTptFigCode);

        jbTptFigGetNextCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_mov_lft.gif"))); // NOI18N
        jbTptFigGetNextCode.setToolTipText("Obtener siguiente código");
        jbTptFigGetNextCode.setPreferredSize(new java.awt.Dimension(23, 23));
        jpTptFigInput13.add(jbTptFigGetNextCode);

        jlTptFigMail.setForeground(new java.awt.Color(0, 102, 102));
        jlTptFigMail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlTptFigMail.setText("Mail:");
        jlTptFigMail.setPreferredSize(new java.awt.Dimension(40, 23));
        jpTptFigInput13.add(jlTptFigMail);

        moTextTptFigMail.setText("TEXT");
        moTextTptFigMail.setPreferredSize(new java.awt.Dimension(152, 23));
        jpTptFigInput13.add(moTextTptFigMail);

        jpTptFigInput1.add(jpTptFigInput13);

        jpTptFigInput14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigFiscalId.setText("RFC:*");
        jlTptFigFiscalId.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput14.add(jlTptFigFiscalId);

        moTextTptFigFiscalId.setText("TEXT");
        moTextTptFigFiscalId.setPreferredSize(new java.awt.Dimension(150, 23));
        jpTptFigInput14.add(moTextTptFigFiscalId);

        jpTptFigInput1.add(jpTptFigInput14);

        jpTptFigInput15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigDriverLicense.setText("Licencia:*");
        jlTptFigDriverLicense.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput15.add(jlTptFigDriverLicense);

        moTextTptFigDriverLicense.setText("TEXT");
        moTextTptFigDriverLicense.setPreferredSize(new java.awt.Dimension(150, 23));
        jpTptFigInput15.add(moTextTptFigDriverLicense);

        jpTptFigInput1.add(jpTptFigInput15);

        jpTptFigInput16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigFigureCountry.setText("Residencia:");
        jlTptFigFigureCountry.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput16.add(jlTptFigFigureCountry);

        moKeyTptFigFigureCountry.setPreferredSize(new java.awt.Dimension(290, 23));
        jpTptFigInput16.add(moKeyTptFigFigureCountry);

        jpTptFigInput1.add(jpTptFigInput16);

        jpTptFigInput17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigForeignId.setText("ID fiscal:*");
        jlTptFigForeignId.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput17.add(jlTptFigForeignId);

        moTextTptFigForeignId.setText("TEXT");
        moTextTptFigForeignId.setPreferredSize(new java.awt.Dimension(150, 23));
        jpTptFigInput17.add(moTextTptFigForeignId);

        jpTptFigInput1.add(jpTptFigInput17);

        jpHeader.add(jpTptFigInput1);

        jpTptFigInput2.setBorder(javax.swing.BorderFactory.createTitledBorder("Domicilio:"));
        jpTptFigInput2.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jpTptFigInput21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigAddressCountry.setText("País:*");
        jlTptFigAddressCountry.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput21.add(jlTptFigAddressCountry);

        moKeyTptFigAddressCountry.setPreferredSize(new java.awt.Dimension(290, 23));
        jpTptFigInput21.add(moKeyTptFigAddressCountry);

        jpTptFigInput2.add(jpTptFigInput21);

        jpTptFigInput22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigAddressState.setText("Estado:*");
        jlTptFigAddressState.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput22.add(jlTptFigAddressState);

        moTextTptFigAddressStateCode.setForeground(java.awt.Color.blue);
        moTextTptFigAddressStateCode.setText("XXX");
        moTextTptFigAddressStateCode.setToolTipText("Clave (F5 para buscar)");
        moTextTptFigAddressStateCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTptFigInput22.add(moTextTptFigAddressStateCode);

        moTextTptFigAddressStateName.setText("TEXT");
        moTextTptFigAddressStateName.setToolTipText("Descripción");
        moTextTptFigAddressStateName.setPreferredSize(new java.awt.Dimension(250, 23));
        jpTptFigInput22.add(moTextTptFigAddressStateName);

        jpTptFigInput2.add(jpTptFigInput22);

        jpTptFigInput23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigAddressCounty.setText("Municipio:");
        jlTptFigAddressCounty.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput23.add(jlTptFigAddressCounty);

        moTextTptFigAddressCountyCode.setForeground(java.awt.Color.blue);
        moTextTptFigAddressCountyCode.setText("000");
        moTextTptFigAddressCountyCode.setToolTipText("Clave (F5 para buscar)");
        moTextTptFigAddressCountyCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTptFigInput23.add(moTextTptFigAddressCountyCode);

        moTextTptFigAddressCountyName.setText("TEXT");
        moTextTptFigAddressCountyName.setToolTipText("Descripción");
        moTextTptFigAddressCountyName.setPreferredSize(new java.awt.Dimension(250, 23));
        jpTptFigInput23.add(moTextTptFigAddressCountyName);

        jpTptFigInput2.add(jpTptFigInput23);

        jpTptFigInput24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigAddressLocality.setText("Localidad:");
        jlTptFigAddressLocality.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput24.add(jlTptFigAddressLocality);

        moTextTptFigAddressLocalityCode.setForeground(java.awt.Color.blue);
        moTextTptFigAddressLocalityCode.setText("00");
        moTextTptFigAddressLocalityCode.setToolTipText("Clave (F5 para buscar)");
        moTextTptFigAddressLocalityCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTptFigInput24.add(moTextTptFigAddressLocalityCode);

        moTextTptFigAddressLocalityName.setText("TEXT");
        moTextTptFigAddressLocalityName.setToolTipText("Descripción");
        moTextTptFigAddressLocalityName.setPreferredSize(new java.awt.Dimension(250, 23));
        jpTptFigInput24.add(moTextTptFigAddressLocalityName);

        jpTptFigInput2.add(jpTptFigInput24);

        jpTptFigInput25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigAddressZipCode.setText("CP:");
        jlTptFigAddressZipCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput25.add(jlTptFigAddressZipCode);

        moTextTptFigAddressZipCode.setText("000000000000");
        jpTptFigInput25.add(moTextTptFigAddressZipCode);

        jpTptFigInput2.add(jpTptFigInput25);

        jpTptFigInput26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigAddressDistrict.setText("Colonia:");
        jlTptFigAddressDistrict.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput26.add(jlTptFigAddressDistrict);

        moTextTptFigAddressDistrictCode.setForeground(java.awt.Color.blue);
        moTextTptFigAddressDistrictCode.setText("0000");
        moTextTptFigAddressDistrictCode.setToolTipText("Clave (F5 para buscar)");
        moTextTptFigAddressDistrictCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTptFigInput26.add(moTextTptFigAddressDistrictCode);

        moTextTptFigAddressDistrictName.setText("TEXT");
        moTextTptFigAddressDistrictName.setToolTipText("Descripción");
        moTextTptFigAddressDistrictName.setPreferredSize(new java.awt.Dimension(250, 23));
        jpTptFigInput26.add(moTextTptFigAddressDistrictName);

        jpTptFigInput2.add(jpTptFigInput26);

        jpTptFigInput27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigAddressStreet.setText("Calle:");
        jlTptFigAddressStreet.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput27.add(jlTptFigAddressStreet);

        moTextTptFigAddressStreet.setText("TEXT");
        moTextTptFigAddressStreet.setToolTipText("Calle");
        moTextTptFigAddressStreet.setPreferredSize(new java.awt.Dimension(180, 23));
        jpTptFigInput27.add(moTextTptFigAddressStreet);

        moTextTptFigAddressNumberExt.setText("TEXT");
        moTextTptFigAddressNumberExt.setToolTipText("No. exterior");
        moTextTptFigAddressNumberExt.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTptFigInput27.add(moTextTptFigAddressNumberExt);

        moTextTptFigAddressNumberInt.setText("TEXT");
        moTextTptFigAddressNumberInt.setToolTipText("No. interior");
        moTextTptFigAddressNumberInt.setPreferredSize(new java.awt.Dimension(50, 23));
        jpTptFigInput27.add(moTextTptFigAddressNumberInt);

        jpTptFigInput2.add(jpTptFigInput27);

        jpTptFigInput28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTptFigAddressReference.setText("Referencia:");
        jlTptFigAddressReference.setPreferredSize(new java.awt.Dimension(75, 23));
        jpTptFigInput28.add(jlTptFigAddressReference);

        moTextTptFigAddressReference.setText("TEXT");
        moTextTptFigAddressReference.setPreferredSize(new java.awt.Dimension(290, 23));
        jpTptFigInput28.add(moTextTptFigAddressReference);

        jpTptFigInput2.add(jpTptFigInput28);

        jpHeader.add(jpTptFigInput2);

        jPanel1.add(jpHeader, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgBolIntlTransportDirections;
    private javax.swing.ButtonGroup bgMerchDimensionUnits;
    private javax.swing.ButtonGroup bgMerchHazardousMaterial;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbTptFigEditType;
    private javax.swing.JButton jbTptFigGetNextCode;
    private javax.swing.JLabel jlTptFigAddressCountry;
    private javax.swing.JLabel jlTptFigAddressCounty;
    private javax.swing.JLabel jlTptFigAddressDistrict;
    private javax.swing.JLabel jlTptFigAddressLocality;
    private javax.swing.JLabel jlTptFigAddressReference;
    private javax.swing.JLabel jlTptFigAddressState;
    private javax.swing.JLabel jlTptFigAddressStreet;
    private javax.swing.JLabel jlTptFigAddressZipCode;
    private javax.swing.JLabel jlTptFigCode;
    private javax.swing.JLabel jlTptFigDriverLicense;
    private javax.swing.JLabel jlTptFigFigureCountry;
    private javax.swing.JLabel jlTptFigFiscalId;
    private javax.swing.JLabel jlTptFigForeignId;
    private javax.swing.JLabel jlTptFigMail;
    private javax.swing.JLabel jlTptFigName;
    private javax.swing.JLabel jlTptFigTransportFigureType;
    private javax.swing.JPanel jpHeader;
    private javax.swing.JPanel jpTptFigInput1;
    private javax.swing.JPanel jpTptFigInput11;
    private javax.swing.JPanel jpTptFigInput12;
    private javax.swing.JPanel jpTptFigInput13;
    private javax.swing.JPanel jpTptFigInput14;
    private javax.swing.JPanel jpTptFigInput15;
    private javax.swing.JPanel jpTptFigInput16;
    private javax.swing.JPanel jpTptFigInput17;
    private javax.swing.JPanel jpTptFigInput2;
    private javax.swing.JPanel jpTptFigInput21;
    private javax.swing.JPanel jpTptFigInput22;
    private javax.swing.JPanel jpTptFigInput23;
    private javax.swing.JPanel jpTptFigInput24;
    private javax.swing.JPanel jpTptFigInput25;
    private javax.swing.JPanel jpTptFigInput26;
    private javax.swing.JPanel jpTptFigInput27;
    private javax.swing.JPanel jpTptFigInput28;
    private sba.lib.gui.bean.DBeanFieldKey moKeyTptFigAddressCountry;
    private sba.lib.gui.bean.DBeanFieldKey moKeyTptFigFigureCountry;
    private sba.lib.gui.bean.DBeanFieldKey moKeyTptFigTransportFigureType;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressCountyCode;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressCountyName;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressDistrictCode;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressDistrictName;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressLocalityCode;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressLocalityName;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressNumberExt;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressNumberInt;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressReference;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressStateCode;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressStateName;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressStreet;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigAddressZipCode;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigCode;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigDriverLicense;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigFiscalId;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigForeignId;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigMail;
    private sba.lib.gui.bean.DBeanFieldText moTextTptFigName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 800, 500);
        
        moKeyTptFigTransportFigureType.setKeySettings(miClient, DGuiUtils.getLabelName(jlTptFigTransportFigureType), true);
        moTextTptFigName.setTextSettings(DGuiUtils.getLabelName(jlTptFigName), 200);
        moTextTptFigCode.setTextSettings(DGuiUtils.getLabelName(jlTptFigCode), 10);
        moTextTptFigMail.setTextSettings(DGuiUtils.getLabelName(jlTptFigMail), 100, 0);
        moTextTptFigMail.setTextCaseType(0);
        moTextTptFigFiscalId.setTextSettings(DGuiUtils.getLabelName(jlTptFigFiscalId), 14, 13);
        moTextTptFigDriverLicense.setTextSettings(DGuiUtils.getLabelName(jlTptFigDriverLicense), 16);
        moKeyTptFigFigureCountry.setKeySettings(miClient, DGuiUtils.getLabelName(jlTptFigFigureCountry), false);
        moTextTptFigForeignId.setTextSettings(DGuiUtils.getLabelName(jlTptFigForeignId), 16);

        moKeyTptFigAddressCountry.setKeySettings(miClient, DGuiUtils.getLabelName(jlTptFigAddressCountry), true);
        moTextTptFigAddressStateCode.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressState) + ": clave", 3);
        moTextTptFigAddressStateName.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressState) + ": " + moTextTptFigAddressStateName.getToolTipText(), 30);
        moTextTptFigAddressCountyCode.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressCounty) + ": clave", 3, 0); 
        moTextTptFigAddressCountyName.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressCounty) + ": " + moTextTptFigAddressCountyName.getToolTipText(), 120, 0);
        moTextTptFigAddressLocalityCode.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressLocality) + ": clave", 3, 0);
        moTextTptFigAddressLocalityName.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressLocality) + ": " + moTextTptFigAddressLocalityName.getToolTipText(), 120, 0);
        moTextTptFigAddressZipCode.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressZipCode), 12, 5);
        moTextTptFigAddressDistrictCode.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressDistrict) + ": clave", 4, 0);
        moTextTptFigAddressDistrictName.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressDistrict) + ": " + moTextTptFigAddressDistrictName.getToolTipText(), 30, 0);
        moTextTptFigAddressStreet.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressStreet), 100, 0); // street is not mandatory for transport figure
        moTextTptFigAddressNumberExt.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressStreet) + ": " + moTextTptFigAddressNumberExt.getToolTipText(), 25, 0);
        moTextTptFigAddressNumberInt.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressStreet) + ": " + moTextTptFigAddressNumberInt.getToolTipText(), 25, 0);
        moTextTptFigAddressReference.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressReference), 120, 0);
        moTextTptFigAddressReference.setTextSettings(DGuiUtils.getLabelName(jlTptFigAddressReference), 100, 0);

        moFields.addField(moKeyTptFigTransportFigureType);
        moFields.addField(moTextTptFigName);
        moFields.addField(moTextTptFigCode);
        moFields.addField(moTextTptFigMail);
        moFields.addField(moTextTptFigFiscalId);
        moFields.addField(moTextTptFigDriverLicense);
        moFields.addField(moKeyTptFigFigureCountry);
        moFields.addField(moTextTptFigForeignId);
        
        moFields.addField(moKeyTptFigAddressCountry);
        moFields.addField(moTextTptFigAddressStateCode);
        moFields.addField(moTextTptFigAddressStateName);
        moFields.addField(moTextTptFigAddressCountyCode);
        moFields.addField(moTextTptFigAddressCountyName);
        moFields.addField(moTextTptFigAddressLocalityCode);
        moFields.addField(moTextTptFigAddressLocalityName);
        moFields.addField(moTextTptFigAddressZipCode);
        moFields.addField(moTextTptFigAddressDistrictCode);
        moFields.addField(moTextTptFigAddressDistrictName);
        moFields.addField(moTextTptFigAddressStreet);
        moFields.addField(moTextTptFigAddressNumberExt);
        moFields.addField(moTextTptFigAddressNumberInt);
        moFields.addField(moTextTptFigAddressReference);
        
        moFields.setFormButton(jbSave);
    }

    private void renderTptFigure(final DDbTransportFigure tptFigure) {
        moTptFigure = tptFigure;
        
        if (moTptFigure == null) {
            moFields.resetFields();
        }
        else {
            moKeyTptFigTransportFigureType.setValue(new int[] { moTptFigure.getFkTransportFigureTypeId() });
            itemStateChangedTptFigTransportFigureType();
            moTextTptFigName.setValue(moTptFigure.getName());
            moTextTptFigCode.setValue(moTptFigure.getCode());
            moTextTptFigMail.setValue(moTptFigure.getMail());
            moTextTptFigFiscalId.setValue(moTptFigure.getFiscalId());
            moTextTptFigDriverLicense.setValue(moTptFigure.getDriverLicense());
            moKeyTptFigFigureCountry.setValue(new int[] { moTptFigure.getFkFigureCountryId() });
            itemStateChangedTptFigFigureCountry();
            moTextTptFigForeignId.setValue(moTptFigure.getForeignId());

            moKeyTptFigAddressCountry.setValue(new int[] { moTptFigure.getFkAddressCountryId() });
            itemStateChangedTptFigAddressCountry();
            moTextTptFigAddressStateCode.setValue(moTptFigure.getAddressStateCode());
            moTextTptFigAddressStateName.setValue(moTptFigure.getAddressStateName());
            moTextTptFigAddressCountyCode.setValue(moTptFigure.getAddressCountyCode());
            moTextTptFigAddressCountyName.setValue(moTptFigure.getAddressCountyName());
            moTextTptFigAddressLocalityCode.setValue(moTptFigure.getAddressLocalityCode());
            moTextTptFigAddressLocalityName.setValue(moTptFigure.getAddressLocalityName());
            moTextTptFigAddressZipCode.setValue(moTptFigure.getAddressZipCode());
            moTextTptFigAddressDistrictCode.setValue(moTptFigure.getAddressDistrictCode());
            moTextTptFigAddressDistrictName.setValue(moTptFigure.getAddressDistrictName());
            moTextTptFigAddressStreet.setValue(moTptFigure.getAddressStreet());
            moTextTptFigAddressNumberExt.setValue(moTptFigure.getAddressNumberExt());
            moTextTptFigAddressNumberInt.setValue(moTptFigure.getAddressNumberInt());
            moTextTptFigAddressReference.setValue(moTptFigure.getAddressReference());
        }
    }
    
    private void computeTptFigAddressStateCode() {
        DFormBolUtils.computeCatalogCode(moTextTptFigAddressStateCode, moTextTptFigAddressStateName, DFormBolUtils.DEF_CODE_ADDRESS_STATE, 
                null, DCfdi40Catalogs.XML_CCP_EDO_40, false, moKeyTptFigAddressCountry, DFormBolUtils.ATT_COUNTRY);
    }
    
    private void computeTptFigAddressCountyCode() {
        DFormBolUtils.computeCatalogCode(moTextTptFigAddressCountyCode, moTextTptFigAddressCountyName, DFormBolUtils.DEF_CODE_ADDRESS_COUNTY, 
                DFormBolUtils.FormatCodeAddressCounty, DCfdi40Catalogs.XML_CCP_MUN, false, moTextTptFigAddressStateCode, DFormBolUtils.ATT_STATE);
    }

    private void computeTptFigAddressLocalityCode() {
        DFormBolUtils.computeCatalogCode(moTextTptFigAddressLocalityCode, moTextTptFigAddressLocalityName, DFormBolUtils.DEF_CODE_ADDRESS_LOCALITY, 
                DFormBolUtils.FormatCodeAddressLocality, DCfdi40Catalogs.XML_CCP_LOC, false, moTextTptFigAddressStateCode, DFormBolUtils.ATT_STATE);
    }

    private void computeTptFigAddressDistrictCode() {
        DFormBolUtils.computeCatalogCode(moTextTptFigAddressDistrictCode, moTextTptFigAddressDistrictName, DFormBolUtils.DEF_CODE_ADDRESS_DISTRICT, 
                DFormBolUtils.FormatCodeAddressDistrict, DCfdi40Catalogs.XML_CCP_COL, true, moTextTptFigAddressZipCode, DFormBolUtils.ATT_ZIP);
    }
    
    private void actionPerformedTptFigEditType() {
        if (miClient.showMsgBoxConfirm("¿Está seguro que desea cambiar el tipo de la figura de transporte?") == JOptionPane.YES_OPTION) {
            jbTptFigEditType.setEnabled(false);
            moKeyTptFigTransportFigureType.setEnabled(true);
            moKeyTptFigTransportFigureType.requestFocusInWindow();
        }
    }

    private void actionPerformedTptFigGetNextCode() {
        try {
            if (moTextTptFigCode.getValue().isEmpty() || 
                    miClient.showMsgBoxConfirm("¿Está seguro que desea obtener el siguiente código para el campo '" + DGuiUtils.getLabelName(jlTptFigCode) + "'?") == JOptionPane.YES_OPTION) {
                int nextCode = DFormBolUtils.getNextCode(miClient.getSession(), DModConsts.LU_TPT_FIGURE, 0);
                moTextTptFigCode.setValue("" + nextCode);
                moTextTptFigCode.requestFocusInWindow();
            }
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }
    
    private void itemStateChangedTptFigTransportFigureType() {
        moTextTptFigDriverLicense.resetField();
        
        if (moKeyTptFigTransportFigureType.getSelectedIndex() <= 0) {
            moTextTptFigDriverLicense.setEnabled(false);
        }
        else {
            boolean enableDriverLicense = moKeyTptFigTransportFigureType.getValue()[0] == DModSysConsts.LS_TPT_FIGURE_TP_DRIVER;
            
            moTextTptFigDriverLicense.setEnabled(enableDriverLicense);
        }
    }
    
    private void itemStateChangedTptFigFigureCountry() {
        moTextTptFigForeignId.resetField();
        
        if (moKeyTptFigFigureCountry.getSelectedIndex() <= 0) {
            moTextTptFigForeignId.setEnabled(false);
        }
        else {
            boolean enable = moKeyTptFigFigureCountry.getValue()[0] != DModSysConsts.CS_CTY_MEX;
            
            moTextTptFigForeignId.setEnabled(enable);
        }
    }
    
    private void itemStateChangedTptFigAddressCountry() {
        moTextTptFigAddressStateCode.resetField();
        moTextTptFigAddressStateName.resetField();
        moTextTptFigAddressCountyCode.resetField();
        moTextTptFigAddressCountyName.resetField();
        moTextTptFigAddressLocalityCode.resetField();
        moTextTptFigAddressLocalityName.resetField();
        moTextTptFigAddressZipCode.resetField();
        moTextTptFigAddressDistrictCode.resetField();
        moTextTptFigAddressDistrictName.resetField();
        moTextTptFigAddressStreet.resetField();
        moTextTptFigAddressNumberExt.resetField();
        moTextTptFigAddressNumberInt.resetField();
        moTextTptFigAddressReference.resetField();
        
        if (moKeyTptFigAddressCountry.getSelectedIndex() <= 0) {
            moTextTptFigAddressStateCode.setEnabled(false);
            moTextTptFigAddressStateName.setEnabled(false);
            moTextTptFigAddressCountyCode.setEnabled(false);
            moTextTptFigAddressCountyName.setEnabled(false);
            moTextTptFigAddressLocalityCode.setEnabled(false);
            moTextTptFigAddressLocalityName.setEnabled(false);
            moTextTptFigAddressZipCode.setEnabled(false);
            moTextTptFigAddressDistrictCode.setEnabled(false);
            moTextTptFigAddressDistrictName.setEnabled(false);
            moTextTptFigAddressStreet.setEnabled(false);
            moTextTptFigAddressNumberExt.setEnabled(false);
            moTextTptFigAddressNumberInt.setEnabled(false);
            moTextTptFigAddressReference.setEnabled(false);
        }
        else {
            String countryCode = moKeyTptFigAddressCountry.getSelectedItem().getCode(); // convenience variable
            boolean applyStateCatalog = DFormBolUtils.applyStateCatalog(countryCode);
            boolean applyAddressCatalogs = DFormBolUtils.applyAddressCatalogs(countryCode);
            
            moTextTptFigAddressStateCode.setEnabled(applyStateCatalog);
            moTextTptFigAddressStateName.setEnabled(!applyStateCatalog);
            moTextTptFigAddressCountyCode.setEnabled(applyAddressCatalogs);
            moTextTptFigAddressCountyName.setEnabled(!applyAddressCatalogs);
            moTextTptFigAddressLocalityCode.setEnabled(applyAddressCatalogs);
            moTextTptFigAddressLocalityName.setEnabled(!applyAddressCatalogs);
            moTextTptFigAddressZipCode.setEnabled(true);
            moTextTptFigAddressDistrictCode.setEnabled(applyAddressCatalogs);
            moTextTptFigAddressDistrictName.setEnabled(!applyAddressCatalogs);
            moTextTptFigAddressStreet.setEnabled(true);
            moTextTptFigAddressNumberExt.setEnabled(true);
            moTextTptFigAddressNumberInt.setEnabled(true);
            moTextTptFigAddressReference.setEnabled(true);
        }
        
        if (moTextTptFigAddressStateCode.isEnabled()) {
            moTextTptFigAddressStateCode.setValue(DFormBolUtils.DEF_CODE_ADDRESS_STATE);
        }
        
        if (moTextTptFigAddressCountyCode.isEnabled()) {
            moTextTptFigAddressCountyCode.setValue(DFormBolUtils.DEF_CODE_ADDRESS_COUNTY);
        }
        
        if (moTextTptFigAddressLocalityCode.isEnabled()) {
            moTextTptFigAddressLocalityCode.setValue(DFormBolUtils.DEF_CODE_ADDRESS_LOCALITY);
        }
        
        if (moTextTptFigAddressDistrictCode.isEnabled()) {
            moTextTptFigAddressDistrictCode.setValue(DFormBolUtils.DEF_CODE_ADDRESS_DISTRICT);
        }
    }
    
    private void focusGainedTptFigAddressStateCode() {
        if (moTextTptFigAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
            moTextTptFigAddressStateCode.resetField();
        }
    }
    
    private void focusGainedTptFigAddressCountyCode() {
        if (moTextTptFigAddressCountyCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_COUNTY)) {
            moTextTptFigAddressCountyCode.resetField();
        }
    }
    
    private void focusGainedTptFigAddressLocalityCode() {
        if (moTextTptFigAddressLocalityCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_LOCALITY)) {
            moTextTptFigAddressLocalityCode.resetField();
        }
    }
    
    private void focusGainedTptFigAddressDistrictCode() {
        if (moTextTptFigAddressDistrictCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_DISTRICT)) {
            moTextTptFigAddressDistrictCode.resetField();
        }
    }

    private void focusLostTptFigAddressStateCode() {
        computeTptFigAddressStateCode();
    }

    private void focusLostTptFigAddressCountyCode() {
        computeTptFigAddressCountyCode();
    }

    private void focusLostTptFigAddressLocalityCode() {
        computeTptFigAddressLocalityCode();
    }

    private void focusLostTptFigAddressDistrictCode() {
        computeTptFigAddressDistrictCode();
    }
    
    private void keyReleasedTptFigAddressStateCode(final KeyEvent keyEvent) {
        if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
            DGuiValidation validation = moKeyTptFigAddressCountry.validateField();
            
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moPickerCatalogAddressState == null) {
                    moPickerCatalogAddressState = new DPickerCatalogAddressState(miClient);
                }

                DGuiItem guiItem = moKeyTptFigAddressCountry.getSelectedItem();
                DLadCatalogAddressCountry country = new DLadCatalogAddressCountry(guiItem.getCode(), guiItem.getItem());
                
                moPickerCatalogAddressState.setValue(DLadCatalogConsts.ADDRESS_COUNTRY, country);
                moPickerCatalogAddressState.resetForm();
                moPickerCatalogAddressState.setVisible(true);
                
                if (moPickerCatalogAddressState.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                    DLadCatalogAddressState state = (DLadCatalogAddressState) moPickerCatalogAddressState.getValue(DLadCatalogConsts.ADDRESS_STATE);
                    if (state != null) {
                        moTextTptFigAddressStateCode.setValue(state.Code);
                        moTextTptFigAddressStateName.setValue(state.Name);
                    }
                }
            }
        }
    }

    private void keyReleasedTptFigAddressCountyCode(final KeyEvent keyEvent) {
        if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
            DGuiValidation validation = moKeyTptFigAddressCountry.validateField();
            
            if (validation.isValid()) {
                if (moTextTptFigAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlTptFigAddressState) + "'.");
                    validation.setComponent(moTextTptFigAddressStateCode);
                }
            }
            
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moPickerCatalogAddressCounty == null) {
                    moPickerCatalogAddressCounty = new DPickerCatalogAddressCounty(miClient);
                }

                DGuiItem guiItem = moKeyTptFigAddressCountry.getSelectedItem();
                DLadCatalogAddressCountry country = new DLadCatalogAddressCountry(guiItem.getCode(), guiItem.getItem());
                DLadCatalogAddressState state = new DLadCatalogAddressState(moTextTptFigAddressStateCode.getValue(), moTextTptFigAddressStateName.getValue());
                
                moPickerCatalogAddressCounty.setValue(DLadCatalogConsts.ADDRESS_COUNTRY, country);
                moPickerCatalogAddressCounty.setValue(DLadCatalogConsts.ADDRESS_STATE, state);
                moPickerCatalogAddressCounty.resetForm();
                moPickerCatalogAddressCounty.setVisible(true);
                
                if (moPickerCatalogAddressCounty.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                    DLadCatalogAddressCounty county = (DLadCatalogAddressCounty) moPickerCatalogAddressCounty.getValue(DLadCatalogConsts.ADDRESS_COUNTY);
                    if (county != null) {
                        moTextTptFigAddressCountyCode.setValue(county.Code);
                        moTextTptFigAddressCountyName.setValue(county.Name);
                    }
                }
            }
        }
    }

    private void keyReleasedTptFigAddressLocalityCode(final KeyEvent keyEvent) {
        if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
            DGuiValidation validation = moKeyTptFigAddressCountry.validateField();
            
            if (validation.isValid()) {
                validation = moTextTptFigAddressStateCode.validateField();
                
                if (validation.isValid()) {
                    if (moTextTptFigAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlTptFigAddressState) + "'.");
                        validation.setComponent(moTextTptFigAddressStateCode);
                    }
                    else if (moTextTptFigAddressCountyCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_COUNTY)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlTptFigAddressCounty) + "'.");
                        validation.setComponent(moTextTptFigAddressCountyCode);
                    }
                }
            }
            
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moPickerCatalogAddressLocality == null) {
                    moPickerCatalogAddressLocality = new DPickerCatalogAddressLocality(miClient);
                }

                DGuiItem guiItem = moKeyTptFigAddressCountry.getSelectedItem();
                DLadCatalogAddressCountry country = new DLadCatalogAddressCountry(guiItem.getCode(), guiItem.getItem());
                DLadCatalogAddressState state = new DLadCatalogAddressState(moTextTptFigAddressStateCode.getValue(), moTextTptFigAddressStateName.getValue());
                DLadCatalogAddressCounty county = new DLadCatalogAddressCounty(moTextTptFigAddressCountyCode.getValue(), moTextTptFigAddressCountyName.getValue());
                
                moPickerCatalogAddressLocality.setValue(DLadCatalogConsts.ADDRESS_COUNTRY, country);
                moPickerCatalogAddressLocality.setValue(DLadCatalogConsts.ADDRESS_STATE, state);
                moPickerCatalogAddressLocality.setValue(DLadCatalogConsts.ADDRESS_COUNTY, county);
                moPickerCatalogAddressLocality.resetForm();
                moPickerCatalogAddressLocality.setVisible(true);
                
                if (moPickerCatalogAddressLocality.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                    DLadCatalogAddressLocality locality = (DLadCatalogAddressLocality) moPickerCatalogAddressLocality.getValue(DLadCatalogConsts.ADDRESS_LOCALITY);
                    if (locality != null) {
                        moTextTptFigAddressLocalityCode.setValue(locality.Code);
                        moTextTptFigAddressLocalityName.setValue(locality.Name);
                    }
                }
            }
        }
    }

    private void keyReleasedTptFigAddressDistrictCode(final KeyEvent keyEvent) {
        if (keyEvent.getKeyCode() == KeyEvent.VK_F5) {
            DGuiValidation validation = moKeyTptFigAddressCountry.validateField();
            
            if (validation.isValid()) {
                validation = moTextTptFigAddressStateCode.validateField();
                
                if (validation.isValid()) {
                    if (moTextTptFigAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlTptFigAddressState) + "'.");
                        validation.setComponent(moTextTptFigAddressStateCode);
                    }
                    else if (moTextTptFigAddressCountyCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_COUNTY)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlTptFigAddressCounty) + "'.");
                        validation.setComponent(moTextTptFigAddressCountyCode);
                    }
                    else if (moTextTptFigAddressLocalityCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_LOCALITY)) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlTptFigAddressLocality) + "'.");
                        validation.setComponent(moTextTptFigAddressLocalityCode);
                    }
                    else {
                        validation = moTextTptFigAddressZipCode.validateField();
                    }
                }
            }
            
            if (DGuiUtils.computeValidation(miClient, validation)) {
                if (moPickerCatalogAddressDistrict == null) {
                    moPickerCatalogAddressDistrict = new DPickerCatalogAddressDistrict(miClient);
                }

                DGuiItem guiItem = moKeyTptFigAddressCountry.getSelectedItem();
                DLadCatalogAddressCountry country = new DLadCatalogAddressCountry(guiItem.getCode(), guiItem.getItem());
                DLadCatalogAddressState state = new DLadCatalogAddressState(moTextTptFigAddressStateCode.getValue(), moTextTptFigAddressStateName.getValue());
                DLadCatalogAddressCounty county = new DLadCatalogAddressCounty(moTextTptFigAddressCountyCode.getValue(), moTextTptFigAddressCountyName.getValue());
                DLadCatalogAddressLocality locality = new DLadCatalogAddressLocality(moTextTptFigAddressLocalityCode.getValue(), moTextTptFigAddressLocalityName.getValue());
                
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_COUNTRY, country);
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_STATE, state);
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_COUNTY, county);
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_LOCALITY, locality);
                moPickerCatalogAddressDistrict.setValue(DLadCatalogConsts.ADDRESS_ZIP_CODE, moTextTptFigAddressZipCode.getValue());
                moPickerCatalogAddressDistrict.resetForm();
                moPickerCatalogAddressDistrict.setVisible(true);
                
                if (moPickerCatalogAddressDistrict.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                    DLadCatalogAddressDistrict district = (DLadCatalogAddressDistrict) moPickerCatalogAddressDistrict.getValue(DLadCatalogConsts.ADDRESS_DISTRICT);
                    if (district != null) {
                        moTextTptFigAddressDistrictCode.setValue(district.Code);
                        moTextTptFigAddressDistrictName.setValue(district.Name);
                    }
                }
            }
        }
    }
    
    /*
     * DBeanForm methods
     */

    @Override
    public void addAllListeners() {
        jbTptFigEditType.addActionListener(this);
        jbTptFigGetNextCode.addActionListener(this);
        
        moKeyTptFigTransportFigureType.addItemListener(this);
        moKeyTptFigFigureCountry.addItemListener(this);
        moKeyTptFigAddressCountry.addItemListener(this);
        
        moTextTptFigAddressStateCode.addFocusListener(this);
        moTextTptFigAddressCountyCode.addFocusListener(this);
        moTextTptFigAddressLocalityCode.addFocusListener(this);
        moTextTptFigAddressDistrictCode.addFocusListener(this);
        
        moTextTptFigAddressStateCode.addKeyListener(this);
        moTextTptFigAddressCountyCode.addKeyListener(this);
        moTextTptFigAddressLocalityCode.addKeyListener(this);
        moTextTptFigAddressDistrictCode.addKeyListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbTptFigEditType.removeActionListener(this);
        jbTptFigGetNextCode.removeActionListener(this);
        
        moKeyTptFigTransportFigureType.removeItemListener(this);
        moKeyTptFigFigureCountry.removeItemListener(this);
        moKeyTptFigAddressCountry.removeItemListener(this);
        
        moTextTptFigAddressStateCode.removeFocusListener(this);
        moTextTptFigAddressCountyCode.removeFocusListener(this);
        moTextTptFigAddressLocalityCode.removeFocusListener(this);
        moTextTptFigAddressDistrictCode.removeFocusListener(this);
        
        moTextTptFigAddressStateCode.removeKeyListener(this);
        moTextTptFigAddressCountyCode.removeKeyListener(this);
        moTextTptFigAddressLocalityCode.removeKeyListener(this);
        moTextTptFigAddressDistrictCode.removeKeyListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyTptFigTransportFigureType, DModConsts.LS_TPT_FIGURE_TP, 0, null);
        miClient.getSession().populateCatalogue(moKeyTptFigFigureCountry, DModConsts.CS_CTY, 0, null);
        miClient.getSession().populateCatalogue(moKeyTptFigAddressCountry, DModConsts.CS_CTY, 0, null);
    }
    
    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moTptFigure = (DDbTransportFigure) registry;

        mnFormResult = 0;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moTptFigure.isRegistryNew()) {
            moTptFigure.initPrimaryKey();
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moTptFigure.getPrimaryKey()));
        }

        setFormEditable(true);
        
        renderTptFigure(moTptFigure);
        
        if (moTptFigure.isRegistryNew()) {
            moKeyTptFigTransportFigureType.setEnabled(true);
            jbTptFigEditType.setEnabled(false);
        }
        else {
            moKeyTptFigTransportFigureType.setEnabled(false);
            jbTptFigEditType.setEnabled(true);
        }
        
        addAllListeners();
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        DDbTransportFigure tptFigure = moTptFigure.clone();

        if (tptFigure.isRegistryNew()) {
            //tptFigure.setPkTransportFigureId(...);
        }
        
        tptFigure.setCode(moTextTptFigCode.getValue());
        tptFigure.setName(moTextTptFigName.getValue());
        tptFigure.setMail(moTextTptFigMail.getValue());
        tptFigure.setFiscalId(moTextTptFigFiscalId.getValue());
        tptFigure.setForeignId(moTextTptFigForeignId.getValue());
        tptFigure.setDriverLicense(moTextTptFigDriverLicense.getValue());
        tptFigure.setAddressStreet(moTextTptFigAddressStreet.getValue());
        tptFigure.setAddressNumberExt(moTextTptFigAddressNumberExt.getValue());
        tptFigure.setAddressNumberInt(moTextTptFigAddressNumberInt.getValue());
        tptFigure.setAddressDistrictCode(moTextTptFigAddressDistrictCode.getValue());
        tptFigure.setAddressDistrictName(moTextTptFigAddressDistrictName.getValue());
        tptFigure.setAddressLocalityCode(moTextTptFigAddressLocalityCode.getValue());
        tptFigure.setAddressLocalityName(moTextTptFigAddressLocalityName.getValue());
        tptFigure.setAddressReference(moTextTptFigAddressReference.getValue());
        tptFigure.setAddressCountyCode(moTextTptFigAddressCountyCode.getValue());
        tptFigure.setAddressCountyName(moTextTptFigAddressCountyName.getValue());
        tptFigure.setAddressStateCode(moTextTptFigAddressStateCode.getValue());
        tptFigure.setAddressStateName(moTextTptFigAddressStateName.getValue());
        tptFigure.setAddressZipCode(moTextTptFigAddressZipCode.getValue());
        //tptFigure.setUpdatable(...);
        //tptFigure.setDisableable(...);
        //tptFigure.setDeletable(...);
        //tptFigure.setDisabled(...);
        //tptFigure.setDeleted(...);
        //tptFigure.setSystem(...);
        tptFigure.setFkTransportFigureTypeId(moKeyTptFigTransportFigureType.getValue()[0]);
        tptFigure.setFkFigureCountryId(moKeyTptFigFigureCountry.getSelectedIndex() <= 0 ? DModSysConsts.CS_CTY_NA : moKeyTptFigFigureCountry.getValue()[0]);
        tptFigure.setFkAddressCountryId(moKeyTptFigAddressCountry.getValue()[0]);
        //tptFigure.setFkUserInsertId(...);
        //tptFigure.setFkUserUpdateId(...);
        //tptFigure.setTsUserInsert(...);
        //tptFigure.setTsUserUpdate(...);

        tptFigure.setRegistryEdited(true);
        
        return tptFigure;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moKeyTptFigFigureCountry.getSelectedIndex() > 0 && moKeyTptFigFigureCountry.getValue()[0] == DModSysConsts.CS_CTY_MEX) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + moKeyTptFigFigureCountry.getFieldName() + "'.");
                validation.setComponent(moKeyTptFigFigureCountry);
            }
            else if (moTextTptFigAddressStateCode.isEnabled() && moTextTptFigAddressStateCode.getValue().equals(DFormBolUtils.DEF_CODE_ADDRESS_STATE)) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + moTextTptFigAddressStateCode.getFieldName() + "'.");
                validation.setComponent(moTextTptFigAddressStateCode);
            }
        }
        
        return validation;
    }

    /*
     * Listeners methods
     */

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbTptFigEditType) {
                actionPerformedTptFigEditType();
            }
            else if (button == jbTptFigGetNextCode) {
                actionPerformedTptFigGetNextCode();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyTptFigTransportFigureType) {
                    itemStateChangedTptFigTransportFigureType();
                }
                else if (field == moKeyTptFigFigureCountry) {
                    itemStateChangedTptFigFigureCountry();
                }
                else if (field == moKeyTptFigAddressCountry) {
                    itemStateChangedTptFigAddressCountry();
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextTptFigAddressStateCode) {
                focusGainedTptFigAddressStateCode();
            }
            else if (field == moTextTptFigAddressCountyCode) {
                focusGainedTptFigAddressCountyCode();
            }
            else if (field == moTextTptFigAddressLocalityCode) {
                focusGainedTptFigAddressLocalityCode();
            }
            else if (field == moTextTptFigAddressDistrictCode) {
                focusGainedTptFigAddressDistrictCode();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextTptFigAddressStateCode) {
                focusLostTptFigAddressStateCode();
            }
            else if (field == moTextTptFigAddressCountyCode) {
                focusLostTptFigAddressCountyCode();
            }
            else if (field == moTextTptFigAddressLocalityCode) {
                focusLostTptFigAddressLocalityCode();
            }
            else if (field == moTextTptFigAddressDistrictCode) {
                focusLostTptFigAddressDistrictCode();
            }
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {

    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();
            
            if (field == moTextTptFigAddressStateCode) {
                keyReleasedTptFigAddressStateCode(e);
            }
            else if (field == moTextTptFigAddressCountyCode) {
                keyReleasedTptFigAddressCountyCode(e);
            }
            else if (field == moTextTptFigAddressLocalityCode) {
                keyReleasedTptFigAddressLocalityCode(e);
            }
            else if (field == moTextTptFigAddressDistrictCode) {
                keyReleasedTptFigAddressDistrictCode(e);
            }
        }
    }
}
