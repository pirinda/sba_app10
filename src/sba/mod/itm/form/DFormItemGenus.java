/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormItemGenus.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.itm.form;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbConfigCompany;
import sba.mod.itm.db.DDbItemGenus;

/**
 *
 * @author Sergio Flores
 */
public class DFormItemGenus extends DBeanForm implements ItemListener {

    private DDbItemGenus moRegistry;
    private DGuiFieldKeyGroup moFieldKeyGroup;

    /** Creates new form DFormItemGenus */
    public DFormItemGenus(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.IU_FAM, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlItemCategory = new javax.swing.JLabel();
        moKeyItemCategory = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel12 = new javax.swing.JPanel();
        jlItemClass = new javax.swing.JLabel();
        moKeyItemClass = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel13 = new javax.swing.JPanel();
        jlItemType = new javax.swing.JLabel();
        moKeyItemType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel14 = new javax.swing.JPanel();
        jlItemFamily = new javax.swing.JLabel();
        moKeyItemFamily = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel19 = new javax.swing.JPanel();
        moBoolItemLineApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel5 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlTaxGroup = new javax.swing.JLabel();
        moKeyTaxGroup = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jlAbpItem = new javax.swing.JLabel();
        moKeyAbpItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel18 = new javax.swing.JPanel();
        jPanel47 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sba.lib.gui.bean.DBeanFieldText();
        jlCfdItemKey = new javax.swing.JLabel();
        moTextCfdItemKey = new sba.lib.gui.bean.DBeanFieldText();
        jlCfdItemKeyHint = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sba.lib.gui.bean.DBeanFieldText();
        jPanel22 = new javax.swing.JPanel();
        moBoolCodeEditable = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolNameEditable = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolIngredientApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel23 = new javax.swing.JPanel();
        moBoolBulk = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel24 = new javax.swing.JPanel();
        moBoolInventoriable = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolLotApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolSerialNumberApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel16 = new javax.swing.JPanel();
        jlSerialNumberType = new javax.swing.JLabel();
        moKeySerialNumberType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel21 = new javax.swing.JPanel();
        jlSerialNumberName = new javax.swing.JLabel();
        moTextSerialNumberName = new sba.lib.gui.bean.DBeanFieldText();
        jlSerialNumberLength = new javax.swing.JLabel();
        moIntSerialNumberLength = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel25 = new javax.swing.JPanel();
        moBoolUnitsVirtualApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolUnitsContainedApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolUnitsPackageApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel26 = new javax.swing.JPanel();
        moBoolFreeOfPrice = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolFreeOfDiscount = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolFreeOfCommission = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jlCodeOrderItemGenus = new javax.swing.JLabel();
        moIntCodeOrderItemGenus = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel34 = new javax.swing.JPanel();
        jlCodeOrderItemLine = new javax.swing.JLabel();
        moIntCodeOrderItemLine = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel35 = new javax.swing.JPanel();
        jlCodeOrderBrand = new javax.swing.JLabel();
        moIntCodeOrderBrand = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel36 = new javax.swing.JPanel();
        jlCodeOrderManufacturer = new javax.swing.JLabel();
        moIntCodeOrderManufacturer = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel50 = new javax.swing.JPanel();
        jlCodeOrderItem = new javax.swing.JLabel();
        moIntCodeOrderItem = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel27 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jlNameOrderItemGenus = new javax.swing.JLabel();
        moIntNameOrderItemGenus = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel29 = new javax.swing.JPanel();
        jlNameOrderItemLine = new javax.swing.JLabel();
        moIntNameOrderItemLine = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel30 = new javax.swing.JPanel();
        jlNameOrderBrand = new javax.swing.JLabel();
        moIntNameOrderBrand = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel31 = new javax.swing.JPanel();
        jlNameOrderManufacturer = new javax.swing.JLabel();
        moIntNameOrderManufacturer = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel49 = new javax.swing.JPanel();
        jlNameOrderItem = new javax.swing.JLabel();
        moIntNameOrderItem = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel37 = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jPanel40 = new javax.swing.JPanel();
        moBoolMeasurementLengthApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolMeasurementSurfaceApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolMeasurementVolumeApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel44 = new javax.swing.JPanel();
        moBoolMeasurementMassApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolMeasurementTimeApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel45 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jPanel42 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        moBoolWeightGrossApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel48 = new javax.swing.JPanel();
        moBoolWeightDeliveryApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel46 = new javax.swing.JPanel();

        jpContainer.setLayout(new java.awt.BorderLayout(5, 0));

        jPanel2.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Clasificación:"));
        jPanel1.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemCategory.setText("Categoría ítem:*");
        jlItemCategory.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlItemCategory);

        moKeyItemCategory.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(moKeyItemCategory);

        jPanel1.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemClass.setText("Clase ítem:*");
        jlItemClass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlItemClass);

        moKeyItemClass.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(moKeyItemClass);

        jPanel1.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemType.setText("Tipo ítem:*");
        jlItemType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlItemType);

        moKeyItemType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel13.add(moKeyItemType);

        jPanel1.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemFamily.setText("Familia ítems:*");
        jlItemFamily.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlItemFamily);

        moKeyItemFamily.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel14.add(moKeyItemFamily);

        jPanel1.add(jPanel14);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolItemLineApplying.setText("Aplica línea de ítems");
        moBoolItemLineApplying.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel19.add(moBoolItemLineApplying);

        jPanel1.add(jPanel19);

        jPanel2.add(jPanel1);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración:"));
        jPanel5.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxGroup.setText("Grupo impuestos:*");
        jlTaxGroup.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlTaxGroup);

        moKeyTaxGroup.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel15.add(moKeyTaxGroup);

        jPanel5.add(jPanel15);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel5.add(jPanel17);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbpItem.setText("Paquete contable:*");
        jlAbpItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlAbpItem);

        moKeyAbpItem.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel20.add(moKeyAbpItem);

        jPanel5.add(jPanel20);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel5.add(jPanel18);

        jPanel47.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel5.add(jPanel47);

        jPanel2.add(jPanel5);

        jpContainer.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.GridLayout(9, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCode);

        moTextCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(moTextCode);

        jlCfdItemKey.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCfdItemKey.setText("Clave ProdServ:*");
        jlCfdItemKey.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCfdItemKey);

        moTextCfdItemKey.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(moTextCfdItemKey);

        jlCfdItemKeyHint.setForeground(java.awt.Color.gray);
        jlCfdItemKeyHint.setText("(SAT)");
        jlCfdItemKeyHint.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(jlCfdItemKeyHint);

        jPanel9.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel4.add(moTextName);

        jPanel9.add(jPanel4);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolCodeEditable.setText("Código editable");
        moBoolCodeEditable.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel22.add(moBoolCodeEditable);

        moBoolNameEditable.setText("Nombre editable");
        moBoolNameEditable.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel22.add(moBoolNameEditable);

        moBoolIngredientApplying.setText("Ingrediente");
        moBoolIngredientApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel22.add(moBoolIngredientApplying);

        jPanel9.add(jPanel22);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolBulk.setText("A granel");
        moBoolBulk.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel23.add(moBoolBulk);

        jPanel9.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolInventoriable.setText("Inventariable");
        moBoolInventoriable.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel24.add(moBoolInventoriable);

        moBoolLotApplying.setText("Lotes");
        moBoolLotApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel24.add(moBoolLotApplying);

        moBoolSerialNumberApplying.setText("Números serie");
        moBoolSerialNumberApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel24.add(moBoolSerialNumberApplying);

        jPanel9.add(jPanel24);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSerialNumberType.setText("Tipo número serie:*");
        jlSerialNumberType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlSerialNumberType);

        moKeySerialNumberType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(moKeySerialNumberType);

        jPanel9.add(jPanel16);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSerialNumberName.setText("Número serie:*");
        jlSerialNumberName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlSerialNumberName);

        moTextSerialNumberName.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel21.add(moTextSerialNumberName);

        jlSerialNumberLength.setText("Longitud:");
        jlSerialNumberLength.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(jlSerialNumberLength);

        moIntSerialNumberLength.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(moIntSerialNumberLength);

        jPanel9.add(jPanel21);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolUnitsVirtualApplying.setText("Un. virtuales");
        moBoolUnitsVirtualApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel25.add(moBoolUnitsVirtualApplying);

        moBoolUnitsContainedApplying.setText("Un. contenidas");
        moBoolUnitsContainedApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel25.add(moBoolUnitsContainedApplying);

        moBoolUnitsPackageApplying.setText("Un. conversión");
        moBoolUnitsPackageApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel25.add(moBoolUnitsPackageApplying);

        jPanel9.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolFreeOfPrice.setText("Sin precios");
        moBoolFreeOfPrice.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfPrice);

        moBoolFreeOfDiscount.setText("Sin descuentos");
        moBoolFreeOfDiscount.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfDiscount);

        moBoolFreeOfCommission.setText("Sin comisiones");
        moBoolFreeOfCommission.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfCommission);

        jPanel9.add(jPanel26);

        jPanel7.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        jPanel6.add(jPanel7);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración código ítems:"));
        jPanel32.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCodeOrderItemGenus.setText("Pos. género ítems:");
        jlCodeOrderItemGenus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel33.add(jlCodeOrderItemGenus);

        moIntCodeOrderItemGenus.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel33.add(moIntCodeOrderItemGenus);

        jPanel32.add(jPanel33);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCodeOrderItemLine.setText("Pos. línea ítems:");
        jlCodeOrderItemLine.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel34.add(jlCodeOrderItemLine);

        moIntCodeOrderItemLine.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel34.add(moIntCodeOrderItemLine);

        jPanel32.add(jPanel34);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCodeOrderBrand.setText("Pos. marca:");
        jlCodeOrderBrand.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlCodeOrderBrand);

        moIntCodeOrderBrand.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel35.add(moIntCodeOrderBrand);

        jPanel32.add(jPanel35);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCodeOrderManufacturer.setText("Pos. fabricante:");
        jlCodeOrderManufacturer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jlCodeOrderManufacturer);

        moIntCodeOrderManufacturer.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel36.add(moIntCodeOrderManufacturer);

        jPanel32.add(jPanel36);

        jPanel50.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCodeOrderItem.setText("Pos. ítem:*");
        jlCodeOrderItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel50.add(jlCodeOrderItem);

        moIntCodeOrderItem.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel50.add(moIntCodeOrderItem);

        jPanel32.add(jPanel50);

        jPanel10.add(jPanel32);

        jPanel27.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración nombre ítems:"));
        jPanel27.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameOrderItemGenus.setText("Pos. género ítems:");
        jlNameOrderItemGenus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlNameOrderItemGenus);

        moIntNameOrderItemGenus.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel28.add(moIntNameOrderItemGenus);

        jPanel27.add(jPanel28);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameOrderItemLine.setText("Pos. línea ítems:");
        jlNameOrderItemLine.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlNameOrderItemLine);

        moIntNameOrderItemLine.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel29.add(moIntNameOrderItemLine);

        jPanel27.add(jPanel29);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameOrderBrand.setText("Pos. marca:");
        jlNameOrderBrand.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jlNameOrderBrand);

        moIntNameOrderBrand.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel30.add(moIntNameOrderBrand);

        jPanel27.add(jPanel30);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameOrderManufacturer.setText("Pos. fabricante:");
        jlNameOrderManufacturer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel31.add(jlNameOrderManufacturer);

        moIntNameOrderManufacturer.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel31.add(moIntNameOrderManufacturer);

        jPanel27.add(jPanel31);

        jPanel49.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameOrderItem.setText("Pos. ítem:*");
        jlNameOrderItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel49.add(jlNameOrderItem);

        moIntNameOrderItem.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel49.add(moIntNameOrderItem);

        jPanel27.add(jPanel49);

        jPanel10.add(jPanel27);

        jPanel8.add(jPanel10, java.awt.BorderLayout.PAGE_START);

        jPanel37.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel38.setBorder(javax.swing.BorderFactory.createTitledBorder("Dimensiones físicas:"));
        jPanel38.setLayout(new java.awt.BorderLayout());

        jPanel39.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolMeasurementLengthApplying.setText("Lon.");
        moBoolMeasurementLengthApplying.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel40.add(moBoolMeasurementLengthApplying);

        moBoolMeasurementSurfaceApplying.setText("Sup.");
        moBoolMeasurementSurfaceApplying.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel40.add(moBoolMeasurementSurfaceApplying);

        moBoolMeasurementVolumeApplying.setText("Vol.");
        moBoolMeasurementVolumeApplying.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel40.add(moBoolMeasurementVolumeApplying);

        jPanel39.add(jPanel40);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolMeasurementMassApplying.setText("Masa");
        moBoolMeasurementMassApplying.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel44.add(moBoolMeasurementMassApplying);

        moBoolMeasurementTimeApplying.setText("Tiempo");
        moBoolMeasurementTimeApplying.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel44.add(moBoolMeasurementTimeApplying);

        jPanel39.add(jPanel44);

        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel39.add(jPanel45);

        jPanel38.add(jPanel39, java.awt.BorderLayout.NORTH);

        jPanel37.add(jPanel38);

        jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder("Peso:"));
        jPanel41.setLayout(new java.awt.BorderLayout());

        jPanel42.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolWeightGrossApplying.setText("Peso bruto");
        jPanel43.add(moBoolWeightGrossApplying);

        jPanel42.add(jPanel43);

        jPanel48.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolWeightDeliveryApplying.setText("Peso flete");
        jPanel48.add(moBoolWeightDeliveryApplying);

        jPanel42.add(jPanel48);

        jPanel46.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel42.add(jPanel46);

        jPanel41.add(jPanel42, java.awt.BorderLayout.NORTH);

        jPanel37.add(jPanel41);

        jPanel8.add(jPanel37, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel8);

        jpContainer.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        int lenCode = ((DDbConfigCompany) miClient.getSession().getConfigCompany()).getLengthCodeItemGenus();

        DGuiUtils.setWindowBounds(this, 880, 550);
        
        moFieldKeyGroup = new DGuiFieldKeyGroup(miClient);

        moKeyItemCategory.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemCategory), true);
        moKeyItemClass.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemClass), true);
        moKeyItemType.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemType), true);
        moKeyItemFamily.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemFamily), true);
        moBoolItemLineApplying.setBooleanSettings(moBoolItemLineApplying.getText(), false);
        moKeyTaxGroup.setKeySettings(miClient, DGuiUtils.getLabelName(jlTaxGroup), true);
        moKeyAbpItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlAbpItem), true);
        moTextCode.setTextSettings(DGuiUtils.getLabelName(jlCode), lenCode == 0 || lenCode > 5 ? 5 : lenCode);
        moTextCfdItemKey.setTextSettings(DGuiUtils.getLabelName(jlCfdItemKey), 8);
        moTextName.setTextSettings(DGuiUtils.getLabelName(jlName), 25);
        moBoolCodeEditable.setBooleanSettings(moBoolCodeEditable.getText(), false);
        moBoolNameEditable.setBooleanSettings(moBoolNameEditable.getText(), false);
        moBoolIngredientApplying.setBooleanSettings(moBoolIngredientApplying.getText(), false);
        moBoolBulk.setBooleanSettings(moBoolBulk.getText(), false);
        moBoolInventoriable.setBooleanSettings(moBoolInventoriable.getText(), false);
        moBoolLotApplying.setBooleanSettings(moBoolLotApplying.getText(), false);
        moBoolSerialNumberApplying.setBooleanSettings(moBoolSerialNumberApplying.getText(), false);
        moKeySerialNumberType.setKeySettings(miClient, DGuiUtils.getLabelName(jlSerialNumberType), true);
        moTextSerialNumberName.setTextSettings(DGuiUtils.getLabelName(jlSerialNumberName), 25);
        moIntSerialNumberLength.setIntegerSettings(DGuiUtils.getLabelName(jlSerialNumberLength), DGuiConsts.GUI_TYPE_INT, false);
        moBoolUnitsVirtualApplying.setBooleanSettings(moBoolUnitsVirtualApplying.getText(), false);
        moBoolUnitsContainedApplying.setBooleanSettings(moBoolUnitsContainedApplying.getText(), false);
        moBoolUnitsPackageApplying.setBooleanSettings(moBoolUnitsPackageApplying.getText(), false);
        moBoolFreeOfPrice.setBooleanSettings(moBoolFreeOfPrice.getText(), false);
        moBoolFreeOfDiscount.setBooleanSettings(moBoolFreeOfDiscount.getText(), false);
        moBoolFreeOfCommission.setBooleanSettings(moBoolFreeOfCommission.getText(), false);
        moIntCodeOrderItemGenus.setIntegerSettings(DGuiUtils.getLabelName(jlCodeOrderItemGenus), DGuiConsts.GUI_TYPE_INT, false);
        moIntCodeOrderItemLine.setIntegerSettings(DGuiUtils.getLabelName(jlCodeOrderItemLine), DGuiConsts.GUI_TYPE_INT, false);
        moIntCodeOrderBrand.setIntegerSettings(DGuiUtils.getLabelName(jlCodeOrderBrand), DGuiConsts.GUI_TYPE_INT, false);
        moIntCodeOrderManufacturer.setIntegerSettings(DGuiUtils.getLabelName(jlCodeOrderManufacturer), DGuiConsts.GUI_TYPE_INT, false);
        moIntCodeOrderItem.setIntegerSettings(DGuiUtils.getLabelName(jlCodeOrderItem), DGuiConsts.GUI_TYPE_INT, true);
        moIntNameOrderItemGenus.setIntegerSettings(DGuiUtils.getLabelName(jlNameOrderItemGenus), DGuiConsts.GUI_TYPE_INT, false);
        moIntNameOrderItemLine.setIntegerSettings(DGuiUtils.getLabelName(jlNameOrderItemLine), DGuiConsts.GUI_TYPE_INT, false);
        moIntNameOrderBrand.setIntegerSettings(DGuiUtils.getLabelName(jlNameOrderBrand), DGuiConsts.GUI_TYPE_INT, false);
        moIntNameOrderManufacturer.setIntegerSettings(DGuiUtils.getLabelName(jlNameOrderManufacturer), DGuiConsts.GUI_TYPE_INT, false);
        moIntNameOrderItem.setIntegerSettings(DGuiUtils.getLabelName(jlNameOrderItem), DGuiConsts.GUI_TYPE_INT, true);
        moBoolMeasurementLengthApplying.setBooleanSettings(moBoolMeasurementLengthApplying.getText(), false);
        moBoolMeasurementSurfaceApplying.setBooleanSettings(moBoolMeasurementSurfaceApplying.getText(), false);
        moBoolMeasurementVolumeApplying.setBooleanSettings(moBoolMeasurementVolumeApplying.getText(), false);
        moBoolMeasurementMassApplying.setBooleanSettings(moBoolMeasurementMassApplying.getText(), false);
        moBoolMeasurementTimeApplying.setBooleanSettings(moBoolMeasurementTimeApplying.getText(), false);
        moBoolWeightGrossApplying.setBooleanSettings(moBoolWeightGrossApplying.getText(), false);
        moBoolWeightDeliveryApplying.setBooleanSettings(moBoolWeightDeliveryApplying.getText(), false);

        moFields.addField(moKeyItemCategory);
        moFields.addField(moKeyItemClass);
        moFields.addField(moKeyItemType);
        moFields.addField(moKeyItemFamily);
        moFields.addField(moBoolItemLineApplying);
        moFields.addField(moKeyTaxGroup);
        moFields.addField(moKeyAbpItem);
        moFields.addField(moTextCode);
        moFields.addField(moTextCfdItemKey);
        moFields.addField(moTextName);
        moFields.addField(moBoolCodeEditable);
        moFields.addField(moBoolNameEditable);
        moFields.addField(moBoolIngredientApplying);
        moFields.addField(moBoolBulk);
        moFields.addField(moBoolInventoriable);
        moFields.addField(moBoolLotApplying);
        moFields.addField(moBoolSerialNumberApplying);
        moFields.addField(moKeySerialNumberType);
        moFields.addField(moTextSerialNumberName);
        moFields.addField(moIntSerialNumberLength);
        moFields.addField(moBoolUnitsVirtualApplying);
        moFields.addField(moBoolUnitsContainedApplying);
        moFields.addField(moBoolUnitsPackageApplying);
        moFields.addField(moBoolFreeOfPrice);
        moFields.addField(moBoolFreeOfDiscount);
        moFields.addField(moBoolFreeOfCommission);
        moFields.addField(moIntCodeOrderItemGenus);
        moFields.addField(moIntCodeOrderItemLine);
        moFields.addField(moIntCodeOrderBrand);
        moFields.addField(moIntCodeOrderManufacturer);
        moFields.addField(moIntCodeOrderItem);
        moFields.addField(moIntNameOrderItemGenus);
        moFields.addField(moIntNameOrderItemLine);
        moFields.addField(moIntNameOrderBrand);
        moFields.addField(moIntNameOrderManufacturer);
        moFields.addField(moIntNameOrderItem);
        moFields.addField(moBoolMeasurementLengthApplying);
        moFields.addField(moBoolMeasurementSurfaceApplying);
        moFields.addField(moBoolMeasurementVolumeApplying);
        moFields.addField(moBoolMeasurementMassApplying);
        moFields.addField(moBoolMeasurementTimeApplying);
        moFields.addField(moBoolWeightGrossApplying);
        moFields.addField(moBoolWeightDeliveryApplying);

        moFields.setFormButton(jbSave);
    }

    private void itemStateBoolItemLineApplying() {
        if (moBoolItemLineApplying.getValue()) {
            DDbConfigCompany configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();

            moIntCodeOrderItemLine.setEnabled(configCompany.isItemCodeApplying() && configCompany.isCodeItemLineApplying());
            moIntNameOrderItemLine.setEnabled(true);
        }
        else {
            moIntCodeOrderItemLine.setEnabled(false);
            moIntNameOrderItemLine.setEnabled(false);

            moIntCodeOrderItemLine.resetField();
            moIntNameOrderItemLine.resetField();
        }
    }

    private void itemStateBoolInventoriable() {
        if (moBoolInventoriable.getValue()) {
            moBoolLotApplying.setEnabled(true);
            moBoolSerialNumberApplying.setEnabled(true);
        }
        else {
            moBoolLotApplying.setEnabled(false);
            moBoolSerialNumberApplying.setEnabled(false);

            moBoolLotApplying.setValue(false);
            moBoolSerialNumberApplying.setValue(false);
            itemStateBoolSerialNumberApplying();
        }
    }

    private void itemStateBoolSerialNumberApplying() {
        if (moBoolSerialNumberApplying.getValue()) {
            moKeySerialNumberType.setEnabled(true);
            moTextSerialNumberName.setEnabled(true);
            moIntSerialNumberLength.setEnabled(true);
        }
        else {
            moKeySerialNumberType.setEnabled(false);
            moTextSerialNumberName.setEnabled(false);
            moIntSerialNumberLength.setEnabled(false);

            moKeySerialNumberType.setValue(new int[] { DModSysConsts.IS_SNR_TP_NA });
            moTextSerialNumberName.setValue("");
            moIntSerialNumberLength.setValue(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlAbpItem;
    private javax.swing.JLabel jlCfdItemKey;
    private javax.swing.JLabel jlCfdItemKeyHint;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlCodeOrderBrand;
    private javax.swing.JLabel jlCodeOrderItem;
    private javax.swing.JLabel jlCodeOrderItemGenus;
    private javax.swing.JLabel jlCodeOrderItemLine;
    private javax.swing.JLabel jlCodeOrderManufacturer;
    private javax.swing.JLabel jlItemCategory;
    private javax.swing.JLabel jlItemClass;
    private javax.swing.JLabel jlItemFamily;
    private javax.swing.JLabel jlItemType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNameOrderBrand;
    private javax.swing.JLabel jlNameOrderItem;
    private javax.swing.JLabel jlNameOrderItemGenus;
    private javax.swing.JLabel jlNameOrderItemLine;
    private javax.swing.JLabel jlNameOrderManufacturer;
    private javax.swing.JLabel jlSerialNumberLength;
    private javax.swing.JLabel jlSerialNumberName;
    private javax.swing.JLabel jlSerialNumberType;
    private javax.swing.JLabel jlTaxGroup;
    private javax.swing.JPanel jpContainer;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolBulk;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolCodeEditable;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfCommission;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfDiscount;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfPrice;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolIngredientApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolInventoriable;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolItemLineApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolLotApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolMeasurementLengthApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolMeasurementMassApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolMeasurementSurfaceApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolMeasurementTimeApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolMeasurementVolumeApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolNameEditable;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolSerialNumberApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolUnitsContainedApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolUnitsPackageApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolUnitsVirtualApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolWeightDeliveryApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolWeightGrossApplying;
    private sba.lib.gui.bean.DBeanFieldInteger moIntCodeOrderBrand;
    private sba.lib.gui.bean.DBeanFieldInteger moIntCodeOrderItem;
    private sba.lib.gui.bean.DBeanFieldInteger moIntCodeOrderItemGenus;
    private sba.lib.gui.bean.DBeanFieldInteger moIntCodeOrderItemLine;
    private sba.lib.gui.bean.DBeanFieldInteger moIntCodeOrderManufacturer;
    private sba.lib.gui.bean.DBeanFieldInteger moIntNameOrderBrand;
    private sba.lib.gui.bean.DBeanFieldInteger moIntNameOrderItem;
    private sba.lib.gui.bean.DBeanFieldInteger moIntNameOrderItemGenus;
    private sba.lib.gui.bean.DBeanFieldInteger moIntNameOrderItemLine;
    private sba.lib.gui.bean.DBeanFieldInteger moIntNameOrderManufacturer;
    private sba.lib.gui.bean.DBeanFieldInteger moIntSerialNumberLength;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAbpItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemCategory;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemClass;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemFamily;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemType;
    private sba.lib.gui.bean.DBeanFieldKey moKeySerialNumberType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyTaxGroup;
    private sba.lib.gui.bean.DBeanFieldText moTextCfdItemKey;
    private sba.lib.gui.bean.DBeanFieldText moTextCode;
    private sba.lib.gui.bean.DBeanFieldText moTextName;
    private sba.lib.gui.bean.DBeanFieldText moTextSerialNumberName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        moBoolItemLineApplying.addItemListener(this);
        moBoolInventoriable.addItemListener(this);
        moBoolSerialNumberApplying.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moBoolItemLineApplying.removeItemListener(this);
        moBoolInventoriable.removeItemListener(this);
        moBoolSerialNumberApplying.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moFieldKeyGroup.initGroup();
        moFieldKeyGroup.addFieldKey(moKeyItemCategory, DModConsts.IS_ITM_CT, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyItemClass, DModConsts.IS_ITM_CL, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyItemType, DModConsts.IS_ITM_TP, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();

        miClient.getSession().populateCatalogue(moKeyItemFamily, DModConsts.IU_FAM, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTaxGroup, DModConsts.FU_TAX_GRP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAbpItem, DModConsts.F_ABP_ITM, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeySerialNumberType, DModConsts.IS_SNR_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        DDbConfigCompany configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();

        moRegistry = (DDbItemGenus) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");

            if (moRegistry.getFkTaxGroupId() == DLibConsts.UNDEFINED) {
                moRegistry.setFkTaxGroupId(configCompany.getFkTaxGroupId_n());
            }
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        moIntCodeOrderItemGenus.setValue(moRegistry.getCodeOrderItemGenus());
        moIntCodeOrderItemLine.setValue(moRegistry.getCodeOrderItemLine());
        moIntCodeOrderBrand.setValue(moRegistry.getCodeOrderBrand());
        moIntCodeOrderManufacturer.setValue(moRegistry.getCodeOrderManufacturer());
        moIntCodeOrderItem.setValue(moRegistry.getCodeOrderItem());
        moIntNameOrderItemGenus.setValue(moRegistry.getNameOrderItemGenus());
        moIntNameOrderItemLine.setValue(moRegistry.getNameOrderItemLine());
        moIntNameOrderBrand.setValue(moRegistry.getNameOrderBrand());
        moIntNameOrderManufacturer.setValue(moRegistry.getNameOrderManufacturer());
        moIntNameOrderItem.setValue(moRegistry.getNameOrderItem());
        moTextSerialNumberName.setValue(moRegistry.getSerialNumberName());
        moIntSerialNumberLength.setValue(moRegistry.getSerialNumberLength());
        moTextCfdItemKey.setValue(moRegistry.getCfdItemKey());
        moBoolCodeEditable.setValue(moRegistry.isCodeEditable());
        moBoolNameEditable.setValue(moRegistry.isNameEditable());
        moBoolIngredientApplying.setValue(moRegistry.isIngredientApplying());
        moBoolItemLineApplying.setValue(moRegistry.isItemLineApplying());
        moBoolMeasurementLengthApplying.setValue(moRegistry.isMeasurementLengthApplying());
        moBoolMeasurementSurfaceApplying.setValue(moRegistry.isMeasurementSurfaceApplying());
        moBoolMeasurementVolumeApplying.setValue(moRegistry.isMeasurementVolumeApplying());
        moBoolMeasurementMassApplying.setValue(moRegistry.isMeasurementMassApplying());
        moBoolMeasurementTimeApplying.setValue(moRegistry.isMeasurementTimeApplying());
        moBoolWeightGrossApplying.setValue(moRegistry.isWeightGrossApplying());
        moBoolWeightDeliveryApplying.setValue(moRegistry.isWeightDeliveryApplying());
        moBoolUnitsVirtualApplying.setValue(moRegistry.isUnitsVirtualApplying());
        moBoolUnitsContainedApplying.setValue(moRegistry.isUnitsContainedApplying());
        moBoolUnitsPackageApplying.setValue(moRegistry.isUnitsPackageApplying());
        moBoolBulk.setValue(moRegistry.isBulk());
        moBoolInventoriable.setValue(moRegistry.isInventoriable());
        moBoolLotApplying.setValue(moRegistry.isLotApplying());
        moBoolSerialNumberApplying.setValue(moRegistry.isSerialNumberApplying());
        moBoolFreeOfPrice.setValue(moRegistry.isFreeOfPrice());
        moBoolFreeOfDiscount.setValue(moRegistry.isFreeOfDiscount());
        moBoolFreeOfCommission.setValue(moRegistry.isFreeOfCommission());
        moKeyItemFamily.setValue(new int[] { moRegistry.getFkItemFamilyId() });
        moKeyItemCategory.setValue(new int[] { moRegistry.getFkItemCategoryId() });
        moKeyItemClass.setValue(new int[] { moRegistry.getFkItemCategoryId(), moRegistry.getFkItemClassId() });
        moKeyItemType.setValue(new int[] { moRegistry.getFkItemCategoryId(), moRegistry.getFkItemClassId(), moRegistry.getFkItemTypeId() });
        moKeySerialNumberType.setValue(new int[] { moRegistry.getFkSerialNumberTypeId() });
        moKeyTaxGroup.setValue(new int[] { moRegistry.getFkTaxGroupId() });
        moKeyAbpItem.setValue(new int[] { moRegistry.getFkAbpItemId() });

        if (!configCompany.isItemCodeApplying() || !configCompany.isCodeItemGenusApplying()) {
            moTextCode.resetField();
        }

        if (!configCompany.isItemCodeApplying() || !configCompany.isCodeItemGenusApplying()) {
            moBoolCodeEditable.setValue(false);
        }

        if (!configCompany.isItemLineApplying()) {
            moBoolItemLineApplying.setValue(false);
        }

        if (!configCompany.isItemCodeApplying() || !configCompany.isCodeItemGenusApplying()) {
            moIntCodeOrderItemGenus.resetField();
        }

        if (!configCompany.isItemCodeApplying() || !configCompany.isCodeItemLineApplying()) {
            moIntCodeOrderItemLine.resetField();
        }

        if (!configCompany.isItemCodeApplying() || !configCompany.isBrandApplying() || !configCompany.isCodeBrandApplying()) {
            moIntCodeOrderBrand.resetField();
        }

        if (!configCompany.isItemCodeApplying() || !configCompany.isManufacturerApplying() || !configCompany.isCodeManufacturerApplying()) {
            moIntCodeOrderManufacturer.resetField();
        }

        if (!configCompany.isItemCodeApplying() || !configCompany.isCodeItemApplying()) {
            moIntCodeOrderItem.resetField();
        }

        if (!configCompany.isBrandApplying()) {
            moIntNameOrderBrand.resetField();
        }

        if (!configCompany.isManufacturerApplying()) {
            moIntNameOrderManufacturer.resetField();
        }

        if (!configCompany.isUnitsVirtualApplying()) {
            moBoolUnitsVirtualApplying.setValue(false);
        }

        if (!configCompany.isUnitsContainedApplying()) {
            moBoolUnitsContainedApplying.setValue(false);
        }

        if (!configCompany.isUnitsPackageApplying()) {
            moBoolUnitsPackageApplying.setValue(false);
        }

        if (!configCompany.isMeasurementLengthApplying()) {
            moBoolMeasurementLengthApplying.setValue(false);
        }

        if (!configCompany.isMeasurementSurfaceApplying()) {
            moBoolMeasurementSurfaceApplying.setValue(false);
        }

        if (!configCompany.isMeasurementVolumeApplying()) {
            moBoolMeasurementVolumeApplying.setValue(false);
        }

        if (!configCompany.isMeasurementMassApplying()) {
            moBoolMeasurementMassApplying.setValue(false);
        }

        if (!configCompany.isMeasurementTimeApplying()) {
            moBoolMeasurementTimeApplying.setValue(false);
        }

        if (!configCompany.isWeightGrossApplying()) {
            moBoolWeightGrossApplying.setValue(false);
        }

        if (!configCompany.isWeightDeliveryApplying()) {
            moBoolWeightDeliveryApplying.setValue(false);
        }

        setFormEditable(true);
        itemStateBoolItemLineApplying();
        itemStateBoolInventoriable();
        itemStateBoolSerialNumberApplying();

        moTextCode.setEnabled(configCompany.isItemCodeApplying() && configCompany.isCodeItemGenusApplying());
        moBoolCodeEditable.setEnabled(configCompany.isItemCodeApplying() && configCompany.isCodeItemGenusApplying());
        moBoolItemLineApplying.setEnabled(configCompany.isItemLineApplying());
        moIntCodeOrderItemGenus.setEnabled(configCompany.isItemCodeApplying() && configCompany.isCodeItemGenusApplying());
        moIntCodeOrderItemLine.setEnabled(configCompany.isItemCodeApplying() && configCompany.isCodeItemLineApplying() && moBoolItemLineApplying.getValue());
        moIntCodeOrderBrand.setEnabled(configCompany.isItemCodeApplying() && configCompany.isBrandApplying() && configCompany.isCodeBrandApplying());
        moIntCodeOrderManufacturer.setEnabled(configCompany.isItemCodeApplying() && configCompany.isManufacturerApplying() && configCompany.isCodeManufacturerApplying());
        moIntCodeOrderItem.setEnabled(configCompany.isItemCodeApplying() && configCompany.isCodeItemApplying());

        moIntNameOrderItemLine.setEnabled(moBoolItemLineApplying.getValue());
        moIntNameOrderBrand.setEnabled(configCompany.isBrandApplying());
        moIntNameOrderManufacturer.setEnabled(configCompany.isManufacturerApplying());

        moBoolUnitsVirtualApplying.setEnabled(configCompany.isUnitsVirtualApplying());
        moBoolUnitsContainedApplying.setEnabled(configCompany.isUnitsContainedApplying());
        moBoolUnitsPackageApplying.setEnabled(configCompany.isUnitsPackageApplying());

        moBoolMeasurementLengthApplying.setEnabled(configCompany.isMeasurementLengthApplying());
        moBoolMeasurementSurfaceApplying.setEnabled(configCompany.isMeasurementSurfaceApplying());
        moBoolMeasurementVolumeApplying.setEnabled(configCompany.isMeasurementVolumeApplying());
        moBoolMeasurementMassApplying.setEnabled(configCompany.isMeasurementMassApplying());
        moBoolMeasurementTimeApplying.setEnabled(configCompany.isMeasurementTimeApplying());
        moBoolWeightGrossApplying.setEnabled(configCompany.isWeightGrossApplying());
        moBoolWeightDeliveryApplying.setEnabled(configCompany.isWeightDeliveryApplying());

        if (moRegistry.getFkItemCategoryId() == DLibConsts.UNDEFINED) {
            moFieldKeyGroup.resetGroup();
        }

        addAllListeners();
    }

    @Override
    public DDbItemGenus getRegistry() throws Exception {
        DDbItemGenus registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setCodeOrderItemGenus(moIntCodeOrderItemGenus.getValue());
        registry.setCodeOrderItemLine(moIntCodeOrderItemLine.getValue());
        registry.setCodeOrderBrand(moIntCodeOrderBrand.getValue());
        registry.setCodeOrderManufacturer(moIntCodeOrderManufacturer.getValue());
        registry.setCodeOrderItem(moIntCodeOrderItem.getValue());
        registry.setNameOrderItemGenus(moIntNameOrderItemGenus.getValue());
        registry.setNameOrderItemLine(moIntNameOrderItemLine.getValue());
        registry.setNameOrderBrand(moIntNameOrderBrand.getValue());
        registry.setNameOrderManufacturer(moIntNameOrderManufacturer.getValue());
        registry.setNameOrderItem(moIntNameOrderItem.getValue());
        registry.setSerialNumberName(moTextSerialNumberName.getValue());
        registry.setSerialNumberLength(moIntSerialNumberLength.getValue());
        registry.setCfdItemKey(moTextCfdItemKey.getValue());
        registry.setCodeEditable(moBoolCodeEditable.getValue());
        registry.setNameEditable(moBoolNameEditable.getValue());
        registry.setIngredientApplying(moBoolIngredientApplying.getValue());
        registry.setItemLineApplying(moBoolItemLineApplying.getValue());
        registry.setMeasurementLengthApplying(moBoolMeasurementLengthApplying.getValue());
        registry.setMeasurementSurfaceApplying(moBoolMeasurementSurfaceApplying.getValue());
        registry.setMeasurementVolumeApplying(moBoolMeasurementVolumeApplying.getValue());
        registry.setMeasurementMassApplying(moBoolMeasurementMassApplying.getValue());
        registry.setMeasurementTimeApplying(moBoolMeasurementTimeApplying.getValue());
        registry.setWeightGrossApplying(moBoolWeightGrossApplying.getValue());
        registry.setWeightDeliveryApplying(moBoolWeightDeliveryApplying.getValue());
        registry.setUnitsVirtualApplying(moBoolUnitsVirtualApplying.getValue());
        registry.setUnitsContainedApplying(moBoolUnitsContainedApplying.getValue());
        registry.setUnitsPackageApplying(moBoolUnitsPackageApplying.getValue());
        registry.setBulk(moBoolBulk.getValue());
        registry.setInventoriable(moBoolInventoriable.getValue());
        registry.setLotApplying(moBoolLotApplying.getValue());
        registry.setSerialNumberApplying(moBoolSerialNumberApplying.getValue());
        registry.setFreeOfPrice(moBoolFreeOfPrice.getValue());
        registry.setFreeOfDiscount(moBoolFreeOfDiscount.getValue());
        registry.setFreeOfCommission(moBoolFreeOfCommission.getValue());
        registry.setFkItemFamilyId(moKeyItemFamily.getValue()[0]);
        registry.setFkItemCategoryId(moKeyItemCategory.getValue()[0]);
        registry.setFkItemClassId(moKeyItemClass.getValue()[0]);
        registry.setFkItemTypeId(moKeyItemType.getValue()[0]);
        registry.setFkSerialNumberTypeId(moKeySerialNumberType.getValue()[0]);
        registry.setFkTaxGroupId(moKeyTaxGroup.getValue()[0]);
        registry.setFkAbpItemId(moKeyAbpItem.getValue()[0]);

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moBoolInventoriable.getValue() && !DLibUtils.belongsTo(moKeyItemClass.getValue(), new int[][] { DModSysConsts.IS_ITM_CL_SAL_PRO, DModSysConsts.IS_ITM_CL_PUR_CON })) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + moBoolInventoriable.getText());
                validation.setComponent(moBoolInventoriable);
            }
            else if (moBoolLotApplying.getValue() && moBoolSerialNumberApplying.getValue()) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + moBoolLotApplying.getText());
                validation.setComponent(moBoolLotApplying);
            }
            else if (moBoolSerialNumberApplying.getValue() && moKeySerialNumberType.getValue()[0] == DModSysConsts.IS_SNR_TP_NA) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + DGuiUtils.getLabelName(jlSerialNumberType.getText()));
                validation.setComponent(moKeySerialNumberType);
            }
        }

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldBoolean) {
            DBeanFieldBoolean field = (DBeanFieldBoolean) e.getSource();

            if (field == moBoolItemLineApplying) {
                itemStateBoolItemLineApplying();
            }
            else if (field == moBoolInventoriable) {
                itemStateBoolInventoriable();
            }
            else if (field == moBoolSerialNumberApplying) {
                itemStateBoolSerialNumberApplying();
            }
        }
    }
}
