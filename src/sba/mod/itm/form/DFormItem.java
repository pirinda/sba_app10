/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormItem.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.itm.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.JButton;
import sba.gui.DGuiClientSessionCustom;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbConfigBranch;
import sba.mod.cfg.db.DDbConfigCompany;
import sba.mod.fin.db.DDbTaxGroupConfigRow;
import sba.mod.itm.db.DDbBrand;
import sba.mod.itm.db.DDbItem;
import sba.mod.itm.db.DDbItemBarcode;
import sba.mod.itm.db.DDbItemGenus;
import sba.mod.itm.db.DDbItemLine;
import sba.mod.itm.db.DDbManufacturer;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DFormItem extends DBeanForm implements ActionListener, FocusListener, ItemListener {

    private DDbItem moRegistry;
    private DDbItemGenus moItemGenus;
    private DDbItemLine moItemLine;
    private DDbBrand moBrand;
    private DDbManufacturer moManufacturer;
    private DDbTaxGroupConfigRow moTaxGroupConfigRow;
    private double mdTaxRate;

    /** Creates new form DFormItem */
    public DFormItem(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.IU_ITM, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlItemGenus = new javax.swing.JLabel();
        moKeyItemGenus = new sba.lib.gui.bean.DBeanFieldKey();
        jbNewItemGenus = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlItemLine = new javax.swing.JLabel();
        moKeyItemLine = new sba.lib.gui.bean.DBeanFieldKey();
        jbNewItemLine = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jlItemCode = new javax.swing.JLabel();
        moTextItemCode = new sba.lib.gui.bean.DBeanFieldText();
        jlCfdItemKey = new javax.swing.JLabel();
        moTextCfdItemKey = new sba.lib.gui.bean.DBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlItemName = new javax.swing.JLabel();
        moTextItemName = new sba.lib.gui.bean.DBeanFieldText();
        jPanel10 = new javax.swing.JPanel();
        jlItemPresentation = new javax.swing.JLabel();
        moTextItemPresentation = new sba.lib.gui.bean.DBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jlTaxRegime = new javax.swing.JLabel();
        moKeyTaxRegime = new sba.lib.gui.bean.DBeanFieldKey();
        jbEditTaxRegime = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        moBoolTaxGroupByUser = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel12 = new javax.swing.JPanel();
        jlTaxGroup = new javax.swing.JLabel();
        moKeyTaxGroup = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel13 = new javax.swing.JPanel();
        moBoolAbpItemByUser = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel14 = new javax.swing.JPanel();
        jlAbpItem = new javax.swing.JLabel();
        moKeyAbpItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        jtfCodeRo = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        jtfNameRo = new javax.swing.JTextField();
        jPanel50 = new javax.swing.JPanel();
        jlIngredient = new javax.swing.JLabel();
        moTextIngredient = new sba.lib.gui.bean.DBeanFieldText();
        jPanel18 = new javax.swing.JPanel();
        moBoolBulk = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel19 = new javax.swing.JPanel();
        moBoolInventoriable = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolLotApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolSerialNumberApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel26 = new javax.swing.JPanel();
        moBoolFreeOfPrice = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolFreeOfDiscount = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolFreeOfCommission = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolPredial = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel38 = new javax.swing.JPanel();
        jPanel46 = new javax.swing.JPanel();
        jPanel54 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        jlPriceSrp = new javax.swing.JLabel();
        moDecPriceSrp = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel56 = new javax.swing.JPanel();
        jlPrice1 = new javax.swing.JLabel();
        moDecPrice1 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel57 = new javax.swing.JPanel();
        jlPrice2 = new javax.swing.JLabel();
        moDecPrice2 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel58 = new javax.swing.JPanel();
        jlPrice3 = new javax.swing.JLabel();
        moDecPrice3 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel59 = new javax.swing.JPanel();
        jlPrice4 = new javax.swing.JLabel();
        moDecPrice4 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel60 = new javax.swing.JPanel();
        jlPrice5 = new javax.swing.JLabel();
        moDecPrice5 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel68 = new javax.swing.JPanel();
        jlPriceLastPur = new javax.swing.JLabel();
        moDecPriceLastPur = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel47 = new javax.swing.JPanel();
        jPanel61 = new javax.swing.JPanel();
        jPanel62 = new javax.swing.JPanel();
        jlPriceNetSrp = new javax.swing.JLabel();
        moDecPriceNetSrp = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel63 = new javax.swing.JPanel();
        jlPriceNet1 = new javax.swing.JLabel();
        moDecPriceNet1 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel64 = new javax.swing.JPanel();
        jlPriceNet2 = new javax.swing.JLabel();
        moDecPriceNet2 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel65 = new javax.swing.JPanel();
        jlPriceNet3 = new javax.swing.JLabel();
        moDecPriceNet3 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel66 = new javax.swing.JPanel();
        jlPriceNet4 = new javax.swing.JLabel();
        moDecPriceNet4 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel67 = new javax.swing.JPanel();
        jlPriceNet5 = new javax.swing.JLabel();
        moDecPriceNet5 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel70 = new javax.swing.JPanel();
        jlPriceNetLastPur = new javax.swing.JLabel();
        moDecPriceNetLastPur = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel69 = new javax.swing.JPanel();
        jlTaxRate = new javax.swing.JLabel();
        jtfTaxRateRo = new javax.swing.JTextField();
        jPanel25 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jlBrand = new javax.swing.JLabel();
        moKeyBrand = new sba.lib.gui.bean.DBeanFieldKey();
        jbNewBrand = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jlManufacturer = new javax.swing.JLabel();
        moKeyManufacturer = new sba.lib.gui.bean.DBeanFieldKey();
        jbNewManufacturer = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jlComponent = new javax.swing.JLabel();
        moKeyComponent = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel23 = new javax.swing.JPanel();
        jlDepartment = new javax.swing.JLabel();
        moKeyDepartment = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel48 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel51 = new javax.swing.JPanel();
        jlBarcode = new javax.swing.JLabel();
        moTextBarcode1 = new sba.lib.gui.bean.DBeanFieldText();
        moTextBarcode2 = new sba.lib.gui.bean.DBeanFieldText();
        jPanel27 = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jlMeasurementLength = new javax.swing.JLabel();
        moDecMeasurementLength = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel33 = new javax.swing.JPanel();
        jlMeasurementSurface = new javax.swing.JLabel();
        moDecMeasurementSurface = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel34 = new javax.swing.JPanel();
        jlMeasurementVolume = new javax.swing.JLabel();
        moDecMeasurementVolume = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel35 = new javax.swing.JPanel();
        jlMeasurementMass = new javax.swing.JLabel();
        moDecMeasurementMass = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel36 = new javax.swing.JPanel();
        jlMeasurementTime = new javax.swing.JLabel();
        moDecMeasurementTime = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel31 = new javax.swing.JPanel();
        jPanel45 = new javax.swing.JPanel();
        jlWeigthGross = new javax.swing.JLabel();
        moDecWeigthGross = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel37 = new javax.swing.JPanel();
        jlWeigthDelivery = new javax.swing.JLabel();
        moDecWeigthDelivery = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel40 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jPanel49 = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jlUnitVirtual = new javax.swing.JLabel();
        moKeyUnitVirtual = new sba.lib.gui.bean.DBeanFieldKey();
        jlUnitsVirtual = new javax.swing.JLabel();
        moDecUnitsVirtual = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel42 = new javax.swing.JPanel();
        jlUnitContained = new javax.swing.JLabel();
        moKeyUnitContained = new sba.lib.gui.bean.DBeanFieldKey();
        jlUnitsContained = new javax.swing.JLabel();
        moDecUnitsContained = new sba.lib.gui.bean.DBeanFieldDecimal();
        jPanel44 = new javax.swing.JPanel();
        jlItemPackage = new javax.swing.JLabel();
        moKeyItemPackage = new sba.lib.gui.bean.DBeanFieldKey();
        jlUnitsPackage = new javax.swing.JLabel();
        moDecUnitsPackage = new sba.lib.gui.bean.DBeanFieldDecimal();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Clasificación:"));
        jPanel5.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemGenus.setText("Género ítems:*");
        jlItemGenus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlItemGenus);

        moKeyItemGenus.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(moKeyItemGenus);

        jbNewItemGenus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_new.gif"))); // NOI18N
        jbNewItemGenus.setToolTipText("Crear género ítem");
        jbNewItemGenus.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbNewItemGenus);

        jPanel5.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemLine.setText("Línea ítems:*");
        jlItemLine.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlItemLine);

        moKeyItemLine.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(moKeyItemLine);

        jbNewItemLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_new.gif"))); // NOI18N
        jbNewItemLine.setToolTipText("Crear línea ítem");
        jbNewItemLine.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbNewItemLine);

        jPanel5.add(jPanel8);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemCode.setText("Código:*");
        jlItemCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlItemCode);
        jPanel3.add(moTextItemCode);

        jlCfdItemKey.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCfdItemKey.setText("Clave ProdServ:");
        jlCfdItemKey.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCfdItemKey);

        moTextCfdItemKey.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(moTextCfdItemKey);

        jPanel5.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemName.setText("Nombre:*");
        jlItemName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlItemName);

        moTextItemName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel4.add(moTextItemName);

        jPanel5.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemPresentation.setText("Presentación:");
        jlItemPresentation.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlItemPresentation);

        moTextItemPresentation.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(moTextItemPresentation);

        jPanel5.add(jPanel10);

        jPanel2.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración:"));
        jPanel6.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxRegime.setText("Régimen fiscal:*");
        jlTaxRegime.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlTaxRegime);

        moKeyTaxRegime.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel28.add(moKeyTaxRegime);

        jbEditTaxRegime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_edit.gif"))); // NOI18N
        jbEditTaxRegime.setToolTipText("Modificar régimen fiscal");
        jbEditTaxRegime.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel28.add(jbEditTaxRegime);

        jPanel6.add(jPanel28);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolTaxGroupByUser.setText("Configuración manual de impuestos");
        moBoolTaxGroupByUser.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel11.add(moBoolTaxGroupByUser);

        jPanel6.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxGroup.setText("Grupo impuestos:*");
        jlTaxGroup.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlTaxGroup);

        moKeyTaxGroup.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(moKeyTaxGroup);

        jPanel6.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolAbpItemByUser.setText("Configuración manual de paquete contable");
        moBoolAbpItemByUser.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moBoolAbpItemByUser);

        jPanel6.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbpItem.setText("Paquete contable:*");
        jlAbpItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlAbpItem);

        moKeyAbpItem.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel14.add(moKeyAbpItem);

        jPanel6.add(jPanel14);

        jPanel2.add(jPanel6);

        jpContainer.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel15.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel24.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código ítem:");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlCode);

        jtfCodeRo.setEditable(false);
        jtfCodeRo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfCodeRo.setFocusable(false);
        jtfCodeRo.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jtfCodeRo);

        jPanel1.add(jPanel9);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre ítem:");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlName);

        jtfNameRo.setEditable(false);
        jtfNameRo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfNameRo.setFocusable(false);
        jtfNameRo.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel16.add(jtfNameRo);

        jPanel1.add(jPanel16);

        jPanel50.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIngredient.setText("Ingrediente:");
        jlIngredient.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel50.add(jlIngredient);

        moTextIngredient.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel50.add(moTextIngredient);

        jPanel1.add(jPanel50);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolBulk.setText("A granel");
        moBoolBulk.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel18.add(moBoolBulk);

        jPanel1.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolInventoriable.setText("Inventariable");
        moBoolInventoriable.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel19.add(moBoolInventoriable);

        moBoolLotApplying.setText("Lotes");
        moBoolLotApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel19.add(moBoolLotApplying);

        moBoolSerialNumberApplying.setText("Números serie");
        moBoolSerialNumberApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel19.add(moBoolSerialNumberApplying);

        jPanel1.add(jPanel19);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolFreeOfPrice.setText("Sin precios");
        moBoolFreeOfPrice.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfPrice);

        moBoolFreeOfDiscount.setText("Sin descuentos");
        moBoolFreeOfDiscount.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfDiscount);

        moBoolFreeOfCommission.setText("Sin comisiones");
        moBoolFreeOfCommission.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfCommission);

        moBoolPredial.setText("No. predial");
        moBoolPredial.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel26.add(moBoolPredial);

        jPanel1.add(jPanel26);

        jPanel24.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel38.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel46.setBorder(javax.swing.BorderFactory.createTitledBorder("Precios unitarios:"));
        jPanel46.setLayout(new java.awt.BorderLayout());

        jPanel54.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jPanel55.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceSrp.setText("Price SRP:");
        jlPriceSrp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel55.add(jlPriceSrp);
        jPanel55.add(moDecPriceSrp);

        jPanel54.add(jPanel55);

        jPanel56.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrice1.setText("Price 1:");
        jlPrice1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel56.add(jlPrice1);
        jPanel56.add(moDecPrice1);

        jPanel54.add(jPanel56);

        jPanel57.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrice2.setText("Price 2:");
        jlPrice2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel57.add(jlPrice2);
        jPanel57.add(moDecPrice2);

        jPanel54.add(jPanel57);

        jPanel58.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrice3.setText("Price 3:");
        jlPrice3.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel58.add(jlPrice3);
        jPanel58.add(moDecPrice3);

        jPanel54.add(jPanel58);

        jPanel59.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrice4.setText("Price 4:");
        jlPrice4.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel59.add(jlPrice4);
        jPanel59.add(moDecPrice4);

        jPanel54.add(jPanel59);

        jPanel60.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrice5.setText("Price 5:");
        jlPrice5.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel60.add(jlPrice5);
        jPanel60.add(moDecPrice5);

        jPanel54.add(jPanel60);

        jPanel68.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceLastPur.setText("Última compra:");
        jlPriceLastPur.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel68.add(jlPriceLastPur);
        jPanel68.add(moDecPriceLastPur);

        jPanel54.add(jPanel68);

        jPanel46.add(jPanel54, java.awt.BorderLayout.NORTH);

        jPanel38.add(jPanel46);

        jPanel47.setBorder(javax.swing.BorderFactory.createTitledBorder("Precios unitarios netos:"));
        jPanel47.setLayout(new java.awt.BorderLayout());

        jPanel61.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jPanel62.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceNetSrp.setText("Price SRP:");
        jlPriceNetSrp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel62.add(jlPriceNetSrp);

        moDecPriceNetSrp.setText("0.00");
        jPanel62.add(moDecPriceNetSrp);

        jPanel61.add(jPanel62);

        jPanel63.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceNet1.setText("Price 1:");
        jlPriceNet1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel63.add(jlPriceNet1);

        moDecPriceNet1.setText("0.00");
        jPanel63.add(moDecPriceNet1);

        jPanel61.add(jPanel63);

        jPanel64.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceNet2.setText("Price 2:");
        jlPriceNet2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel64.add(jlPriceNet2);

        moDecPriceNet2.setText("0.00");
        jPanel64.add(moDecPriceNet2);

        jPanel61.add(jPanel64);

        jPanel65.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceNet3.setText("Price 3:");
        jlPriceNet3.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel65.add(jlPriceNet3);

        moDecPriceNet3.setText("0.00");
        jPanel65.add(moDecPriceNet3);

        jPanel61.add(jPanel65);

        jPanel66.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceNet4.setText("Price 4:");
        jlPriceNet4.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel66.add(jlPriceNet4);

        moDecPriceNet4.setText("0.00");
        jPanel66.add(moDecPriceNet4);

        jPanel61.add(jPanel66);

        jPanel67.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceNet5.setText("Price 5:");
        jlPriceNet5.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel67.add(jlPriceNet5);

        moDecPriceNet5.setText("0.00");
        jPanel67.add(moDecPriceNet5);

        jPanel61.add(jPanel67);

        jPanel70.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceNetLastPur.setText("Última compra:");
        jlPriceNetLastPur.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel70.add(jlPriceNetLastPur);

        moDecPriceNetLastPur.setText("0.00");
        jPanel70.add(moDecPriceNetLastPur);

        jPanel61.add(jPanel70);

        jPanel69.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxRate.setText("Razón impuestos:");
        jlTaxRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel69.add(jlTaxRate);

        jtfTaxRateRo.setEditable(false);
        jtfTaxRateRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTaxRateRo.setText("0.00000000");
        jtfTaxRateRo.setFocusable(false);
        jtfTaxRateRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel69.add(jtfTaxRateRo);

        jPanel61.add(jPanel69);

        jPanel47.add(jPanel61, java.awt.BorderLayout.NORTH);

        jPanel38.add(jPanel47);

        jPanel24.add(jPanel38, java.awt.BorderLayout.CENTER);

        jPanel15.add(jPanel24);

        jPanel25.setLayout(new java.awt.BorderLayout());

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Propieades del registro:"));
        jPanel17.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBrand.setText("Marca:*");
        jlBrand.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlBrand);

        moKeyBrand.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel20.add(moKeyBrand);

        jbNewBrand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_new.gif"))); // NOI18N
        jbNewBrand.setToolTipText("Crear marca");
        jbNewBrand.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.add(jbNewBrand);

        jPanel17.add(jPanel20);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlManufacturer.setText("Fabricante:*");
        jlManufacturer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlManufacturer);

        moKeyManufacturer.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel21.add(moKeyManufacturer);

        jbNewManufacturer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_new.gif"))); // NOI18N
        jbNewManufacturer.setToolTipText("Crear fabricante");
        jbNewManufacturer.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel21.add(jbNewManufacturer);

        jPanel17.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlComponent.setText("Componente:*");
        jlComponent.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlComponent);

        moKeyComponent.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel22.add(moKeyComponent);

        jPanel17.add(jPanel22);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDepartment.setText("Departamento:*");
        jlDepartment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlDepartment);

        moKeyDepartment.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel23.add(moKeyDepartment);

        jPanel17.add(jPanel23);

        jPanel48.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad:*");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel48.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel48.add(moKeyUnit);

        jPanel17.add(jPanel48);

        jPanel51.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBarcode.setText("Código barras:");
        jlBarcode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel51.add(jlBarcode);

        moTextBarcode1.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel51.add(moTextBarcode1);

        moTextBarcode2.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel51.add(moTextBarcode2);

        jPanel17.add(jPanel51);

        jPanel25.add(jPanel17, java.awt.BorderLayout.NORTH);

        jPanel27.setBorder(javax.swing.BorderFactory.createTitledBorder("Dimensiones físicas:"));
        jPanel27.setLayout(new java.awt.BorderLayout());

        jPanel29.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel30.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMeasurementLength.setText("Longitud:*");
        jlMeasurementLength.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel32.add(jlMeasurementLength);
        jPanel32.add(moDecMeasurementLength);

        jPanel30.add(jPanel32);

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMeasurementSurface.setText("Superficie:*");
        jlMeasurementSurface.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel33.add(jlMeasurementSurface);
        jPanel33.add(moDecMeasurementSurface);

        jPanel30.add(jPanel33);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMeasurementVolume.setText("Volumen:*");
        jlMeasurementVolume.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel34.add(jlMeasurementVolume);
        jPanel34.add(moDecMeasurementVolume);

        jPanel30.add(jPanel34);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMeasurementMass.setText("Masa:*");
        jlMeasurementMass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlMeasurementMass);
        jPanel35.add(moDecMeasurementMass);

        jPanel30.add(jPanel35);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMeasurementTime.setText("Tiempo:*");
        jlMeasurementTime.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jlMeasurementTime);
        jPanel36.add(moDecMeasurementTime);

        jPanel30.add(jPanel36);

        jPanel29.add(jPanel30);

        jPanel31.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeigthGross.setText("Peso bruto:*");
        jlWeigthGross.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel45.add(jlWeigthGross);
        jPanel45.add(moDecWeigthGross);

        jPanel31.add(jPanel45);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeigthDelivery.setText("Peso flete:*");
        jlWeigthDelivery.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel37.add(jlWeigthDelivery);
        jPanel37.add(moDecWeigthDelivery);

        jPanel31.add(jPanel37);

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel31.add(jPanel40);

        jPanel41.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel31.add(jPanel41);

        jPanel43.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel31.add(jPanel43);

        jPanel29.add(jPanel31);

        jPanel27.add(jPanel29, java.awt.BorderLayout.PAGE_START);

        jPanel49.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitVirtual.setText("Unidad virtual:*");
        jlUnitVirtual.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel39.add(jlUnitVirtual);

        moKeyUnitVirtual.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel39.add(moKeyUnitVirtual);

        jlUnitsVirtual.setText("Unids. virt.:*");
        jlUnitsVirtual.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel39.add(jlUnitsVirtual);
        jPanel39.add(moDecUnitsVirtual);

        jPanel49.add(jPanel39);

        jPanel42.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitContained.setText("Unidad contenida:*");
        jlUnitContained.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel42.add(jlUnitContained);

        moKeyUnitContained.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel42.add(moKeyUnitContained);

        jlUnitsContained.setText("Unids. cont.:*");
        jlUnitsContained.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel42.add(jlUnitsContained);
        jPanel42.add(moDecUnitsContained);

        jPanel49.add(jPanel42);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemPackage.setText("Ítem conversión:");
        jlItemPackage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel44.add(jlItemPackage);

        moKeyItemPackage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel44.add(moKeyItemPackage);

        jlUnitsPackage.setText("Unids. conv.:");
        jlUnitsPackage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel44.add(jlUnitsPackage);
        jPanel44.add(moDecUnitsPackage);

        jPanel49.add(jPanel44);

        jPanel27.add(jPanel49, java.awt.BorderLayout.SOUTH);

        jPanel25.add(jPanel27, java.awt.BorderLayout.CENTER);

        jPanel15.add(jPanel25);

        jpContainer.add(jPanel15, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        int lenCode = 0;
        DDbConfigCompany configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();

        DGuiUtils.setWindowBounds(this, 960, 650);

        lenCode = configCompany.getLengthCodeItem();

        moKeyItemGenus.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemGenus), true);
        moKeyItemLine.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemLine), true);
        moTextItemCode.setTextSettings(DGuiUtils.getLabelName(jlItemCode), lenCode == 0 || lenCode > 20 ? 20 : lenCode);
        moTextCfdItemKey.setTextSettings(DGuiUtils.getLabelName(jlCfdItemKey), 8, 0);
        moTextItemName.setTextSettings(DGuiUtils.getLabelName(jlItemName), 100);
        moTextItemPresentation.setTextSettings(DGuiUtils.getLabelName(jlItemPresentation), 50, 0);
        moKeyTaxRegime.setKeySettings(miClient, DGuiUtils.getLabelName(jlTaxRegime), true);
        moBoolTaxGroupByUser.setBooleanSettings(moBoolTaxGroupByUser.getText(), false);
        moKeyTaxGroup.setKeySettings(miClient, DGuiUtils.getLabelName(jlTaxGroup), true);
        moBoolAbpItemByUser.setBooleanSettings(moBoolAbpItemByUser.getText(), false);
        moKeyAbpItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlAbpItem), true);
        moTextIngredient.setTextSettings(DGuiUtils.getLabelName(jlIngredient), 100, 0);
        moBoolBulk.setBooleanSettings(moBoolBulk.getText(), false);
        moBoolInventoriable.setBooleanSettings(moBoolInventoriable.getText(), false);
        moBoolLotApplying.setBooleanSettings(moBoolLotApplying.getText(), false);
        moBoolSerialNumberApplying.setBooleanSettings(moBoolSerialNumberApplying.getText(), false);
        moBoolFreeOfPrice.setBooleanSettings(moBoolFreeOfPrice.getText(), false);
        moBoolFreeOfDiscount.setBooleanSettings(moBoolFreeOfDiscount.getText(), false);
        moBoolFreeOfCommission.setBooleanSettings(moBoolFreeOfCommission.getText(), false);
        moBoolPredial.setBooleanSettings(moBoolPredial.getText(), false);
        moDecPriceSrp.setDecimalSettings(DGuiUtils.getLabelName(jlPriceSrp), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecPrice1.setDecimalSettings(DGuiUtils.getLabelName(jlPrice1), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecPrice2.setDecimalSettings(DGuiUtils.getLabelName(jlPrice2), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecPrice3.setDecimalSettings(DGuiUtils.getLabelName(jlPrice3), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecPrice4.setDecimalSettings(DGuiUtils.getLabelName(jlPrice4), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecPrice5.setDecimalSettings(DGuiUtils.getLabelName(jlPrice5), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecPriceLastPur.setDecimalSettings(DGuiUtils.getLabelName(jlPriceLastPur), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecPriceNetSrp.setDecimalSettings(DGuiUtils.getLabelName(jlPriceNetSrp), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPriceNet1.setDecimalSettings(DGuiUtils.getLabelName(jlPriceNet1), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPriceNet2.setDecimalSettings(DGuiUtils.getLabelName(jlPriceNet2), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPriceNet3.setDecimalSettings(DGuiUtils.getLabelName(jlPriceNet3), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPriceNet4.setDecimalSettings(DGuiUtils.getLabelName(jlPriceNet4), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPriceNet5.setDecimalSettings(DGuiUtils.getLabelName(jlPriceNet5), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecPriceNetLastPur.setDecimalSettings(DGuiUtils.getLabelName(jlPriceNetLastPur), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moKeyBrand.setKeySettings(miClient, DGuiUtils.getLabelName(jlBrand), true);
        moKeyManufacturer.setKeySettings(miClient, DGuiUtils.getLabelName(jlManufacturer), true);
        moKeyComponent.setKeySettings(miClient, DGuiUtils.getLabelName(jlComponent), true);
        moKeyDepartment.setKeySettings(miClient, DGuiUtils.getLabelName(jlDepartment), true);
        moKeyUnit.setKeySettings(miClient, DGuiUtils.getLabelName(jlUnit), true);
        moTextBarcode1.setTextSettings(DGuiUtils.getLabelName(jlBarcode) + " 1", 50, 0);
        moTextBarcode2.setTextSettings(DGuiUtils.getLabelName(jlBarcode) + " 2", 50, 0);
        moDecMeasurementLength.setDecimalSettings(DGuiUtils.getLabelName(jlMeasurementLength), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecMeasurementSurface.setDecimalSettings(DGuiUtils.getLabelName(jlMeasurementSurface), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecMeasurementVolume.setDecimalSettings(DGuiUtils.getLabelName(jlMeasurementVolume), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecMeasurementMass.setDecimalSettings(DGuiUtils.getLabelName(jlMeasurementMass), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecMeasurementTime.setDecimalSettings(DGuiUtils.getLabelName(jlMeasurementTime), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecWeigthGross.setDecimalSettings(DGuiUtils.getLabelName(jlWeigthGross), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecWeigthDelivery.setDecimalSettings(DGuiUtils.getLabelName(jlWeigthDelivery), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyUnitVirtual.setKeySettings(miClient, DGuiUtils.getLabelName(jlUnitVirtual), true);
        moDecUnitsVirtual.setDecimalSettings(DGuiUtils.getLabelName(jlUnitsVirtual), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyUnitContained.setKeySettings(miClient, DGuiUtils.getLabelName(jlUnitContained), true);
        moDecUnitsContained.setDecimalSettings(DGuiUtils.getLabelName(jlUnitsContained), DGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyItemPackage.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemPackage), false);
        moDecUnitsPackage.setDecimalSettings(DGuiUtils.getLabelName(jlUnitsPackage), DGuiConsts.GUI_TYPE_DEC_QTY, false);

        moFields.addField(moKeyItemGenus);
        moFields.addField(moKeyItemLine);
        moFields.addField(moTextItemCode);
        moFields.addField(moTextCfdItemKey);
        moFields.addField(moTextItemName);
        moFields.addField(moTextItemPresentation);
        moFields.addField(moKeyTaxRegime);
        moFields.addField(moBoolTaxGroupByUser);
        moFields.addField(moKeyTaxGroup);
        moFields.addField(moBoolAbpItemByUser);
        moFields.addField(moKeyAbpItem);
        moFields.addField(moTextIngredient);
        moFields.addField(moBoolBulk);
        moFields.addField(moBoolInventoriable);
        moFields.addField(moBoolLotApplying);
        moFields.addField(moBoolSerialNumberApplying);
        moFields.addField(moBoolFreeOfPrice);
        moFields.addField(moBoolFreeOfDiscount);
        moFields.addField(moBoolFreeOfCommission);
        moFields.addField(moBoolPredial);
        moFields.addField(moDecPriceSrp);
        moFields.addField(moDecPrice1);
        moFields.addField(moDecPrice2);
        moFields.addField(moDecPrice3);
        moFields.addField(moDecPrice4);
        moFields.addField(moDecPrice5);
        moFields.addField(moDecPriceLastPur);
        moFields.addField(moDecPriceNetSrp);
        moFields.addField(moDecPriceNet1);
        moFields.addField(moDecPriceNet2);
        moFields.addField(moDecPriceNet3);
        moFields.addField(moDecPriceNet4);
        moFields.addField(moDecPriceNet5);
        moFields.addField(moDecPriceNetLastPur);
        moFields.addField(moKeyBrand);
        moFields.addField(moKeyManufacturer);
        moFields.addField(moKeyComponent);
        moFields.addField(moKeyDepartment);
        moFields.addField(moKeyUnit);
        moFields.addField(moTextBarcode1);
        moFields.addField(moTextBarcode2);
        moFields.addField(moDecMeasurementLength);
        moFields.addField(moDecMeasurementSurface);
        moFields.addField(moDecMeasurementVolume);
        moFields.addField(moDecMeasurementMass);
        moFields.addField(moDecMeasurementTime);
        moFields.addField(moDecWeigthGross);
        moFields.addField(moDecWeigthDelivery);
        moFields.addField(moKeyUnitVirtual);
        moFields.addField(moDecUnitsVirtual);
        moFields.addField(moKeyUnitContained);
        moFields.addField(moDecUnitsContained);
        moFields.addField(moKeyItemPackage);
        moFields.addField(moDecUnitsPackage);

        moFields.setFormButton(jbSave);

        jlPriceSrp.setText(DLibUtils.textProperCase((String) miClient.getSession().readField(DModConsts.MS_ITM_PRC_TP, new int[] { DModSysConsts.MS_ITM_PRC_TP_SRP }, DDbRegistry.FIELD_NAME)) + ":");
        jlPrice1.setText(DLibUtils.textProperCase((String) miClient.getSession().readField(DModConsts.MS_ITM_PRC_TP, new int[] { DModSysConsts.MS_ITM_PRC_TP_RET }, DDbRegistry.FIELD_NAME)) + ":");
        jlPrice2.setText(DLibUtils.textProperCase((String) miClient.getSession().readField(DModConsts.MS_ITM_PRC_TP, new int[] { DModSysConsts.MS_ITM_PRC_TP_HAL }, DDbRegistry.FIELD_NAME)) + ":");
        jlPrice3.setText(DLibUtils.textProperCase((String) miClient.getSession().readField(DModConsts.MS_ITM_PRC_TP, new int[] { DModSysConsts.MS_ITM_PRC_TP_WHO }, DDbRegistry.FIELD_NAME)) + ":");
        jlPrice4.setText(DLibUtils.textProperCase((String) miClient.getSession().readField(DModConsts.MS_ITM_PRC_TP, new int[] { DModSysConsts.MS_ITM_PRC_TP_ESP }, DDbRegistry.FIELD_NAME)) + ":");
        jlPrice5.setText(DLibUtils.textProperCase((String) miClient.getSession().readField(DModConsts.MS_ITM_PRC_TP, new int[] { DModSysConsts.MS_ITM_PRC_TP_COS }, DDbRegistry.FIELD_NAME)) + ":");

        jlPriceNetSrp.setText(jlPriceSrp.getText());
        jlPriceNet1.setText(jlPrice1.getText());
        jlPriceNet2.setText(jlPrice2.getText());
        jlPriceNet3.setText(jlPrice3.getText());
        jlPriceNet4.setText(jlPrice4.getText());
        jlPriceNet5.setText(jlPrice5.getText());
    }

    private void computeItemNameCode() {
        int pos = 0;
        String code = "";
        String name = "";

        if (moItemGenus != null) {
            // Item code:

            if (moTextItemCode.isEnabled()) {
                for (pos = 1; pos <= 5; pos++) {
                    if (moItemGenus.getCodeOrderItemGenus() == pos) {
                        code += moItemGenus.getCode();
                    }
                    else if (moItemGenus.getCodeOrderItemLine() == pos) {
                        if (moItemLine != null) {
                            code += moItemLine.getCode();
                        }
                    }
                    else if (moItemGenus.getCodeOrderBrand() == pos) {
                        if (moBrand != null) {
                            code += moBrand.getCode();
                        }
                    }
                    else if (moItemGenus.getCodeOrderManufacturer() == pos) {
                        if (moManufacturer != null) {
                            code += moManufacturer.getCode();
                        }
                    }
                    else if (moItemGenus.getCodeOrderItem() == pos) {
                        code += moTextItemCode.getValue();
                    }
                }
            }

            // Item name:

            for (pos = 1; pos <= 5; pos++) {
                if (moItemGenus.getNameOrderItemGenus() == pos) {
                    name += (name.length() == 0 ? "" : " ") + moItemGenus.getName();
                }
                else if (moItemGenus.getNameOrderItemLine() == pos) {
                    if (moItemLine != null) {
                        name += (name.length() == 0 ? "" : " ") + moItemLine.getName();
                    }
                }
                else if (moItemGenus.getNameOrderBrand() == pos) {
                    if (moBrand != null) {
                        name += (name.length() == 0 ? "" : " ") + moBrand.getName();
                    }
                }
                else if (moItemGenus.getNameOrderManufacturer() == pos) {
                    if (moManufacturer != null) {
                        name += (name.length() == 0 ? "" : " ") + moManufacturer.getName();
                    }
                }
                else if (moItemGenus.getNameOrderItem() == pos) {
                    if (moTextItemName.getValue().length() > 0) {
                        name += (name.length() == 0 ? "" : " ") + moTextItemName.getValue();
                    }
                    if (moTextItemPresentation.getValue().length() > 0) {
                        name += (name.length() == 0 ? "" : " ") + moTextItemPresentation.getValue();
                    }
                }
            }
        }

        jtfCodeRo.setText(code);
        jtfCodeRo.setCaretPosition(0);
        jtfNameRo.setText(name);
        jtfNameRo.setCaretPosition(0);
    }

    private void computePriceTax() {
        moDecPriceNetSrp.setValue(moDecPriceSrp.getValue() * mdTaxRate);
        moDecPriceNet1.setValue(moDecPrice1.getValue() * mdTaxRate);
        moDecPriceNet2.setValue(moDecPrice2.getValue() * mdTaxRate);
        moDecPriceNet3.setValue(moDecPrice3.getValue() * mdTaxRate);
        moDecPriceNet4.setValue(moDecPrice4.getValue() * mdTaxRate);
        moDecPriceNet5.setValue(moDecPrice5.getValue() * mdTaxRate);
    }

    private void displayTaxGroup() {
        if (!moBoolTaxGroupByUser.isSelected()) {
            if (moItemLine != null && moItemLine.getFkTaxGroupId_n() != DLibConsts.UNDEFINED) {
                moKeyTaxGroup.setValue(new int[] { moItemLine.getFkTaxGroupId_n() });
            }
            else if (moItemGenus != null) {
                moKeyTaxGroup.setValue(new int[] { moItemGenus.getFkTaxGroupId() });
            }
            else {
                moKeyTaxGroup.setValue(null);
            }

            itemStateKeyTaxGroup();
        }
    }

    private void displayAbpItem() {
        if (!moBoolAbpItemByUser.isSelected()) {
            if (moItemLine != null && moItemLine.getFkAbpItemId_n() != DLibConsts.UNDEFINED) {
                moKeyAbpItem.setValue(new int[] { moItemLine.getFkAbpItemId_n() });
            }
            else if (moItemGenus != null) {
                moKeyAbpItem.setValue(new int[] { moItemGenus.getFkAbpItemId() });
            }
            else {
                moKeyAbpItem.setValue(null);
            }
        }
    }

    private void actionNewItemGenus() {
        DDbItemGenus itemGenus = null;

        miClient.getSession().showForm(DModConsts.IU_GEN, DLibConsts.UNDEFINED, null);
        itemGenus = (DDbItemGenus) miClient.getSession().getModule(DModConsts.MOD_ITM).getLastRegistry();
        if (itemGenus != null) {
            miClient.getSession().populateCatalogue(moKeyItemGenus, DModConsts.IU_GEN, DLibConsts.UNDEFINED, null);
            DGuiUtils.locateItem(moKeyItemGenus, itemGenus.getPrimaryKey());
        }

        moKeyItemGenus.requestFocus();
    }

    private void actionNewItemLine() {
        DDbItemLine itemLine = null;
        DGuiParams params = new DGuiParams();

        params.getParamsMap().put(DModConsts.IU_GEN, moKeyItemGenus.getValue()[0]);
        miClient.getSession().showForm(DModConsts.IU_LIN, DLibConsts.UNDEFINED, params);
        itemLine = (DDbItemLine) miClient.getSession().getModule(DModConsts.MOD_ITM).getLastRegistry();
        if (itemLine != null) {
            miClient.getSession().populateCatalogue(moKeyItemLine, DModConsts.IU_LIN, DLibConsts.UNDEFINED, new DGuiParams(moItemGenus.getPrimaryKey()));
            DGuiUtils.locateItem(moKeyItemLine, itemLine.getPrimaryKey());
        }

        moKeyItemLine.requestFocus();
    }

    private void actionNewBrand() {
        DDbBrand brand = null;

        miClient.getSession().showForm(DModConsts.IU_BRD, DLibConsts.UNDEFINED, null);
        brand = (DDbBrand) miClient.getSession().getModule(DModConsts.MOD_ITM).getLastRegistry();
        if (brand != null) {
            miClient.getSession().populateCatalogue(moKeyBrand, DModConsts.IU_BRD, DLibConsts.UNDEFINED, null);
            DGuiUtils.locateItem(moKeyBrand, brand.getPrimaryKey());
        }

        moKeyBrand.requestFocus();
    }

    private void actionNewManufacturer() {
        DDbManufacturer manufacturer = null;

        miClient.getSession().showForm(DModConsts.IU_MFR, DLibConsts.UNDEFINED, null);
        manufacturer = (DDbManufacturer) miClient.getSession().getModule(DModConsts.MOD_ITM).getLastRegistry();
        if (manufacturer != null) {
            miClient.getSession().populateCatalogue(moKeyManufacturer, DModConsts.IU_MFR, DLibConsts.UNDEFINED, null);
            DGuiUtils.locateItem(moKeyManufacturer, manufacturer.getPrimaryKey());
        }

        moKeyManufacturer.requestFocus();
    }

    private void actionEditTaxRegime() {
        jbEditTaxRegime.setEnabled(false);
        moKeyTaxRegime.setEnabled(true);
        moKeyTaxRegime.requestFocus();
    }

    private void itemStateKeyItemGenus(boolean computeItemNameCode) {
        DDbConfigCompany configCompany = null;

        if (moKeyItemGenus.getSelectedIndex() <= 0) {
            moItemGenus = null;
            moItemLine = null;

            moKeyItemLine.setEnabled(false);
            moKeyItemLine.removeAllItems();
            jbNewItemLine.setEnabled(false);

            moBoolBulk.setEnabled(false);
            moBoolBulk.setValue(false);
            moBoolInventoriable.setEnabled(false);
            moBoolInventoriable.setValue(false);
            moBoolLotApplying.setEnabled(false);
            moBoolLotApplying.setValue(false);
            moBoolSerialNumberApplying.setEnabled(false);
            moBoolSerialNumberApplying.setValue(false);
            /*
            moBoolFreeOfPrice.setEnabled(false);
            moBoolFreeOfPrice.setValue(false);
            moBoolFreeOfDiscount.setEnabled(false);
            moBoolFreeOfDiscount.setValue(false);
            moBoolFreeOfCommission.setEnabled(false);
            moBoolFreeOfCommission.setValue(false);
            */

            moKeyBrand.setEnabled(false);
            moKeyBrand.setValue(null);
            jbNewBrand.setEnabled(false);
            moKeyManufacturer.setEnabled(false);
            moKeyManufacturer.setValue(null);
            jbNewManufacturer.setEnabled(false);
            moKeyComponent.setEnabled(false);
            moKeyComponent.setValue(null);
            moKeyDepartment.setEnabled(false);
            moKeyDepartment.setValue(null);
            moKeyUnit.setEnabled(false);
            moKeyUnit.setValue(null);

            moTextIngredient.setEditable(false);
            moTextIngredient.setValue("");

            moDecMeasurementLength.setEnabled(false);
            moDecMeasurementLength.setValue(0d);
            moDecMeasurementSurface.setEnabled(false);
            moDecMeasurementSurface.setValue(0d);
            moDecMeasurementVolume.setEnabled(false);
            moDecMeasurementVolume.setValue(0d);
            moDecMeasurementMass.setEnabled(false);
            moDecMeasurementMass.setValue(0d);
            moDecMeasurementTime.setEnabled(false);
            moDecMeasurementTime.setValue(0d);
            moDecWeigthGross.setEnabled(false);
            moDecWeigthGross.setValue(0d);
            moDecWeigthDelivery.setEnabled(false);
            moDecWeigthDelivery.setValue(0d);

            moKeyUnitVirtual.setEnabled(false);
            moKeyUnitVirtual.setValue(null);
            moDecUnitsVirtual.setEnabled(false);
            moDecUnitsVirtual.setValue(0d);
            moKeyUnitContained.setEnabled(false);
            moKeyUnitContained.setValue(null);
            moDecUnitsContained.setEnabled(false);
            moDecUnitsContained.setValue(0d);
            moKeyItemPackage.setEnabled(false);
            moKeyItemPackage.setValue(null);
            moDecUnitsPackage.setEnabled(false);
            moDecUnitsPackage.setValue(0d);

            if (!moBoolTaxGroupByUser.getValue()) {
                moKeyTaxGroup.setValue(null);
            }

            if (!moBoolAbpItemByUser.getValue()) {
                moKeyAbpItem.setValue(null);
            }
        }
        else {
            moItemGenus = (DDbItemGenus) miClient.getSession().readRegistry(DModConsts.IU_GEN, moKeyItemGenus.getValue());

            configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();

            if (moItemGenus.isItemLineApplying()) {
                moKeyItemLine.setEnabled(true);
                miClient.getSession().populateCatalogue(moKeyItemLine, DModConsts.IU_LIN, DLibConsts.UNDEFINED, new DGuiParams(moItemGenus.getPrimaryKey()));
                jbNewItemLine.setEnabled(true);

                moBoolBulk.setEnabled(false);
                moBoolBulk.setValue(false);
                moBoolInventoriable.setEnabled(false);
                moBoolInventoriable.setValue(false);
                moBoolLotApplying.setEnabled(false);
                moBoolLotApplying.setValue(false);
                moBoolSerialNumberApplying.setEnabled(false);
                moBoolSerialNumberApplying.setValue(false);
                /*
                moBoolFreeOfPrice.setEnabled(false);
                moBoolFreeOfPrice.setValue(false);
                moBoolFreeOfDiscount.setEnabled(false);
                moBoolFreeOfDiscount.setValue(false);
                moBoolFreeOfCommission.setEnabled(false);
                moBoolFreeOfCommission.setValue(false);
                */

                moKeyBrand.setEnabled(false);
                moKeyBrand.setValue(null);
                jbNewBrand.setEnabled(false);
                moKeyManufacturer.setEnabled(false);
                moKeyManufacturer.setValue(null);
                jbNewManufacturer.setEnabled(false);
                moKeyComponent.setEnabled(false);
                moKeyComponent.setValue(null);
                moKeyDepartment.setEnabled(false);
                moKeyDepartment.setValue(null);
                moKeyUnit.setEnabled(false);
                moKeyUnit.setValue(null);
            }
            else {
                moKeyItemLine.setEnabled(false);
                moKeyItemLine.removeAllItems();
                jbNewItemLine.setEnabled(false);

                moBoolBulk.setEnabled(moItemGenus.isBulk());
                moBoolBulk.setValue(moItemGenus.isBulk());
                moBoolInventoriable.setEnabled(moItemGenus.isInventoriable());
                moBoolInventoriable.setValue(moItemGenus.isInventoriable());
                moBoolLotApplying.setEnabled(moItemGenus.isLotApplying());
                moBoolLotApplying.setValue(moItemGenus.isLotApplying());
                moBoolSerialNumberApplying.setEnabled(moItemGenus.isSerialNumberApplying());
                moBoolSerialNumberApplying.setValue(moItemGenus.isSerialNumberApplying());
                /*
                moBoolFreeOfPrice.setEnabled(moItemGenus.isFreeOfPrice());
                moBoolFreeOfPrice.setValue(moItemGenus.isFreeOfPrice());
                moBoolFreeOfDiscount.setEnabled(moItemGenus.isFreeOfDiscount());
                moBoolFreeOfDiscount.setValue(moItemGenus.isFreeOfDiscount());
                moBoolFreeOfCommission.setEnabled(moItemGenus.isFreeOfCommission());
                moBoolFreeOfCommission.setValue(moItemGenus.isFreeOfCommission());
                */

                moKeyBrand.setEnabled(configCompany.isBrandApplying());
                jbNewBrand.setEnabled(configCompany.isBrandApplying());
                moKeyManufacturer.setEnabled(configCompany.isManufacturerApplying());
                jbNewManufacturer.setEnabled(configCompany.isManufacturerApplying());
                moKeyComponent.setEnabled(configCompany.isComponentApplying());
                moKeyDepartment.setEnabled(configCompany.isDepartmentApplying());
                moKeyUnit.setEnabled(true);

                if (!moKeyBrand.isEnabled()) {
                    moKeyBrand.setValue(new int[] { DModSysConsts.IU_BRD_NA });
                }

                if (!moKeyManufacturer.isEnabled()) {
                    moKeyManufacturer.setValue(new int[] { DModSysConsts.IU_MFR_NA });
                }

                if (!moKeyComponent.isEnabled()) {
                    moKeyComponent.setValue(new int[] { DModSysConsts.IU_CMP_NA });
                }

                if (!moKeyDepartment.isEnabled()) {
                    moKeyDepartment.setValue(new int[] { DModSysConsts.IU_DEP_NA });
                }
            }

            moTextIngredient.setEditable(moItemGenus.isIngredientApplying());

            moDecMeasurementLength.setEnabled(moItemGenus.isMeasurementLengthApplying());
            moDecMeasurementSurface.setEnabled(moItemGenus.isMeasurementSurfaceApplying());
            moDecMeasurementVolume.setEnabled(moItemGenus.isMeasurementVolumeApplying());
            moDecMeasurementMass.setEnabled(moItemGenus.isMeasurementMassApplying());
            moDecMeasurementTime.setEnabled(moItemGenus.isMeasurementTimeApplying());
            moDecWeigthGross.setEnabled(moItemGenus.isWeightGrossApplying());
            moDecWeigthDelivery.setEnabled(moItemGenus.isWeightDeliveryApplying());

            moKeyUnitVirtual.setEnabled(moItemGenus.isUnitsVirtualApplying());
            moDecUnitsVirtual.setEnabled(moItemGenus.isUnitsVirtualApplying());
            moKeyUnitContained.setEnabled(moItemGenus.isUnitsContainedApplying());
            moDecUnitsContained.setEnabled(moItemGenus.isUnitsContainedApplying());
            moKeyItemPackage.setEnabled(moItemGenus.isUnitsPackageApplying());
            moDecUnitsPackage.setEnabled(moItemGenus.isUnitsPackageApplying());

            if (!moItemGenus.isIngredientApplying()) {
                moTextIngredient.setValue("");
            }

            if (!moItemGenus.isMeasurementLengthApplying()) {
                moDecMeasurementLength.setValue(0d);
            }

            if (!moItemGenus.isMeasurementSurfaceApplying()) {
                moDecMeasurementSurface.setValue(0d);
            }

            if (!moItemGenus.isMeasurementVolumeApplying()) {
                moDecMeasurementVolume.setValue(0d);
            }

            if (!moItemGenus.isMeasurementMassApplying()) {
                moDecMeasurementMass.setValue(0d);
            }

            if (!moItemGenus.isMeasurementTimeApplying()) {
                moDecMeasurementTime.setValue(0d);
            }

            if (!moItemGenus.isWeightGrossApplying()) {
                moDecWeigthGross.setValue(0d);
            }

            if (!moItemGenus.isWeightDeliveryApplying()) {
                moDecWeigthDelivery.setValue(0d);
            }

            if (!moKeyUnitVirtual.isEnabled()) {
                moDecUnitsVirtual.setValue(0d);
                moKeyUnitVirtual.setValue(new int[] { DModSysConsts.IU_UNT_NA });
            }

            if (!moKeyUnitContained.isEnabled()) {
                moDecUnitsContained.setValue(0d);
                moKeyUnitContained.setValue(new int[] { DModSysConsts.IU_UNT_NA });
            }

            if (!moKeyItemPackage.isEnabled()) {
                moDecUnitsPackage.setValue(0d);
                moKeyItemPackage.setValue(null);
            }
        }

        itemStateBoolInventoriable();
        itemStateBoolFreeOfPrice();

        displayTaxGroup();
        displayAbpItem();

        if (computeItemNameCode) {
            computeItemNameCode();
        }
    }

    private void itemStateKeyItemLine(boolean computeItemNameCode) {
        if (moKeyItemLine.getSelectedIndex() <= 0) {
            moItemLine = null;

            if (moItemGenus != null && moItemGenus.isItemLineApplying()) {
                moBoolBulk.setEnabled(false);
                moBoolBulk.setValue(false);
                moBoolInventoriable.setEnabled(false);
                moBoolInventoriable.setValue(false);
                moBoolLotApplying.setEnabled(false);
                moBoolLotApplying.setValue(false);
                moBoolSerialNumberApplying.setEnabled(false);
                moBoolSerialNumberApplying.setValue(false);
                /*
                moBoolFreeOfPrice.setEnabled(false);
                moBoolFreeOfPrice.setValue(false);
                moBoolFreeOfDiscount.setEnabled(false);
                moBoolFreeOfDiscount.setValue(false);
                moBoolFreeOfCommission.setEnabled(false);
                moBoolFreeOfCommission.setValue(false);
                */

                moKeyBrand.setEnabled(false);
                moKeyBrand.setValue(null);
                jbNewBrand.setEnabled(false);
                moKeyManufacturer.setEnabled(false);
                moKeyManufacturer.setValue(null);
                jbNewManufacturer.setEnabled(false);
                moKeyComponent.setEnabled(false);
                moKeyComponent.setValue(null);
                moKeyDepartment.setEnabled(false);
                moKeyDepartment.setValue(null);
                moKeyUnit.setEnabled(false);
                moKeyUnit.setValue(null);
            }
        }
        else {
            moItemLine = (DDbItemLine) miClient.getSession().readRegistry(DModConsts.IU_LIN, moKeyItemLine.getValue());

            moBoolBulk.setEnabled(moItemLine.isBulk());
            moBoolBulk.setValue(moItemLine.isBulk());
            moBoolInventoriable.setEnabled(moItemLine.isInventoriable());
            moBoolInventoriable.setValue(moItemLine.isInventoriable());
            moBoolLotApplying.setEnabled(moItemLine.isLotApplying());
            moBoolLotApplying.setValue(moItemLine.isLotApplying());
            moBoolSerialNumberApplying.setEnabled(moItemLine.isSerialNumberApplying());
            moBoolSerialNumberApplying.setValue(moItemLine.isSerialNumberApplying());
            /*
            moBoolFreeOfPrice.setEnabled(moItemLine.isFreeOfPrice());
            moBoolFreeOfPrice.setValue(moItemLine.isFreeOfPrice());
            moBoolFreeOfDiscount.setEnabled(moItemLine.isFreeOfDiscount());
            moBoolFreeOfDiscount.setValue(moItemLine.isFreeOfDiscount());
            moBoolFreeOfCommission.setEnabled(moItemLine.isFreeOfCommission());
            moBoolFreeOfCommission.setValue(moItemLine.isFreeOfCommission());
            */

            moKeyBrand.setEnabled(false);
            moKeyBrand.setValue(new int[] { moItemLine.getFkBrandId() });
            jbNewBrand.setEnabled(false);
            moKeyManufacturer.setEnabled(false);
            moKeyManufacturer.setValue(new int[] { moItemLine.getFkManufacturerId() });
            jbNewManufacturer.setEnabled(false);
            moKeyComponent.setEnabled(false);
            moKeyComponent.setValue(new int[] { moItemLine.getFkComponentId() });
            moKeyDepartment.setEnabled(false);
            moKeyDepartment.setValue(new int[] { moItemLine.getFkDepartmentId() });
            moKeyUnit.setEnabled(false);
            moKeyUnit.setValue(new int[] { moItemLine.getFkUnitId() });
        }

        itemStateBoolInventoriable();
        itemStateBoolFreeOfPrice();

        displayTaxGroup();
        displayAbpItem();

        if (computeItemNameCode) {
            computeItemNameCode();
        }
    }

    private void itemStateKeyBrand(boolean computeItemNameCode) {
        if (moKeyBrand.getSelectedIndex() <= 0) {
            moBrand = null;
        }
        else {
            moBrand = (DDbBrand) miClient.getSession().readRegistry(DModConsts.IU_BRD, moKeyBrand.getValue());
        }

        if (computeItemNameCode) {
            computeItemNameCode();
        }
    }

    private void itemStateKeyManufacturer(boolean computeItemNameCode) {
        if (moKeyManufacturer.getSelectedIndex() <= 0) {
            moManufacturer = null;
        }
        else {
            moManufacturer = (DDbManufacturer) miClient.getSession().readRegistry(DModConsts.IU_MFR, moKeyManufacturer.getValue());
        }

        if (computeItemNameCode) {
            computeItemNameCode();
        }
    }

    private void itemStateKeyTaxGroup() {
        if (moKeyTaxGroup.getSelectedIndex() <= 0) {
            moTaxGroupConfigRow = null;
            mdTaxRate = 1;
        }
        else {
            moTaxGroupConfigRow = DTrnUtils.getTaxGroupConfigRow(miClient.getSession(), moKeyTaxGroup.getValue(),
                    new int[] { ((DDbConfigBranch) miClient.getSession().getConfigBranch()).getFkTaxRegionId() },
                    ((DGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getIdentityTypeDefault(), miClient.getSession().getWorkingDate());
            mdTaxRate = DTrnUtils.computeTaxRate(moTaxGroupConfigRow, DModSysConsts.TS_DPS_CT_SAL);
        }

        jtfTaxRateRo.setText(DLibUtils.DecimalFormatValue4D.format(mdTaxRate));
        computePriceTax();
    }

    private void itemStateBoolInventoriable() {
        if (moBoolInventoriable.getValue()) {
            moBoolLotApplying.setEnabled(moItemGenus == null ? false : (moItemLine != null ? moItemLine.isLotApplying() : moItemGenus.isLotApplying()));
            moBoolSerialNumberApplying.setEnabled(moItemGenus == null ? false : (moItemLine != null ? moItemLine.isSerialNumberApplying() : moItemGenus.isSerialNumberApplying()));
        }
        else {
            moBoolLotApplying.setEnabled(false);
            moBoolSerialNumberApplying.setEnabled(false);

            moBoolLotApplying.setValue(false);
            moBoolSerialNumberApplying.setValue(false);
        }
    }

    private void itemStateBoolFreeOfPrice() {
        DDbConfigCompany configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();

        if (moBoolFreeOfPrice.getValue() || moKeyItemGenus.getSelectedIndex() <= 0 || (moKeyItemLine.isEnabled() && moKeyItemLine.getSelectedIndex() <= 0)) {
            moDecPriceSrp.setEnabled(false);
            moDecPrice1.setEnabled(false);
            moDecPrice2.setEnabled(false);
            moDecPrice3.setEnabled(false);
            moDecPrice4.setEnabled(false);
            moDecPrice5.setEnabled(false);

            moDecPriceNetSrp.setEnabled(false);
            moDecPriceNet1.setEnabled(false);
            moDecPriceNet2.setEnabled(false);
            moDecPriceNet3.setEnabled(false);
            moDecPriceNet4.setEnabled(false);
            moDecPriceNet5.setEnabled(false);

            moDecPriceSrp.setValue(0d);
            moDecPrice1.setValue(0d);
            moDecPrice2.setValue(0d);
            moDecPrice3.setValue(0d);
            moDecPrice4.setValue(0d);
            moDecPrice5.setValue(0d);

            moDecPriceNetSrp.setValue(0d);
            moDecPriceNet1.setValue(0d);
            moDecPriceNet2.setValue(0d);
            moDecPriceNet3.setValue(0d);
            moDecPriceNet4.setValue(0d);
            moDecPriceNet5.setValue(0d);
        }
        else {
            moDecPriceSrp.setEnabled(configCompany.isPriceSrpApplying());
            moDecPrice1.setEnabled(configCompany.isPrice1Applying());
            moDecPrice2.setEnabled(configCompany.isPrice2Applying());
            moDecPrice3.setEnabled(configCompany.isPrice3Applying());
            moDecPrice4.setEnabled(configCompany.isPrice4Applying());
            moDecPrice5.setEnabled(configCompany.isPrice5Applying());

            moDecPriceNetSrp.setEnabled(configCompany.isPriceSrpApplying());
            moDecPriceNet1.setEnabled(configCompany.isPrice1Applying());
            moDecPriceNet2.setEnabled(configCompany.isPrice2Applying());
            moDecPriceNet3.setEnabled(configCompany.isPrice3Applying());
            moDecPriceNet4.setEnabled(configCompany.isPrice4Applying());
            moDecPriceNet5.setEnabled(configCompany.isPrice5Applying());
        }
    }

    private void itemStateBoolTaxGroupByUser() {
        if (moBoolTaxGroupByUser.getValue()) {
            moKeyTaxGroup.setEnabled(true);
        }
        else {
            moKeyTaxGroup.setEnabled(false);
            displayTaxGroup();
        }
    }

    private void itemStateBoolAbpItemByUser() {
        if (moBoolAbpItemByUser.getValue()) {
            moKeyAbpItem.setEnabled(true);
        }
        else {
            moKeyAbpItem.setEnabled(false);
            displayAbpItem();
        }
    }

    private DGuiValidation validateItemPackage() {
        DDbItem itemPackage = null;
        DGuiValidation validation = new DGuiValidation();

        if (moKeyItemPackage.getSelectedIndex() > 0) {
            itemPackage = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, moKeyItemPackage.getValue());

            if (!moBoolInventoriable.getValue()) {
                validation.setComponent(moKeyItemPackage);
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ_NOT + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                        "porque el ítem actual es no inventariable.");
            }
            else if (!moRegistry.isRegistryNew() && moRegistry.getPkItemId() == moKeyItemPackage.getValue()[0]) {
                validation.setComponent(moKeyItemPackage);
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                        "porque el ítem actual es el el ítem seleccionado en ese campo.");
            }
            else {
                if (!itemPackage.isInventoriable()) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                            "porque el ítem seleccionado en ese campo, '" + itemPackage.getName() + "', es no inventariable.");
                    validation.setComponent(moKeyItemPackage);
                }
                else if (itemPackage.isLotApplying() && !moBoolLotApplying.getValue()) {
                    validation.setComponent(moKeyItemPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                            "porque el ítem actual no usa lotes, y el ítem '" + itemPackage.getName() + "' sí los usa.");
                }
                else if (!itemPackage.isLotApplying() && moBoolLotApplying.getValue()) {
                    validation.setComponent(moKeyItemPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                            "porque el ítem actual sí usa lotes, y el ítem '" + itemPackage.getName() + "' no los usa.");
                }
                else if (itemPackage.isSerialNumberApplying() && !moBoolSerialNumberApplying.getValue()) {
                    validation.setComponent(moKeyItemPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                            "porque el ítem actual no usa números de serie, y el ítem '" + itemPackage.getName() + "' sí los usa.");
                }
                else if (!itemPackage.isSerialNumberApplying() && moBoolSerialNumberApplying.getValue()) {
                    validation.setComponent(moKeyItemPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                            "porque el ítem actual sí usa números de serie, y el ítem '" + itemPackage.getName() + "' no los usa.");
                }
                else if (!itemPackage.isSerialNumberApplying() && !moBoolSerialNumberApplying.getValue() && moDecUnitsPackage.getValue() == 0) {
                    validation.setComponent(moDecUnitsPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + jlUnitsPackage.getText() + "'.");
                }
                else if (itemPackage.isSerialNumberApplying() && moBoolSerialNumberApplying.getValue() && moItemGenus.getFkSerialNumberTypeId() == DModSysConsts.IS_SNR_TP_SMP) {
                    validation.setComponent(moKeyItemPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ_NOT + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                            "porque el ítem actual está configurado para usar números de serie simples.");
                }
                else if (itemPackage.isSerialNumberApplying() && moBoolSerialNumberApplying.getValue() && moItemGenus.getFkSerialNumberTypeId() == DModSysConsts.IS_SNR_TP_CMP &&
                        itemPackage.getParentGenus().getFkSerialNumberTypeId() != DModSysConsts.IS_SNR_TP_SMP) {
                    validation.setComponent(moKeyItemPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlItemPackage.getText()) + "',\n" +
                            "porque el ítem seleccionado en ese campo, '" + itemPackage.getName() + "', no está configurado para usar números de serie simples.");
                }
                else if (itemPackage.isSerialNumberApplying() && moBoolSerialNumberApplying.getValue() && moItemGenus.getFkSerialNumberTypeId() == DModSysConsts.IS_SNR_TP_CMP &&
                        itemPackage.getParentGenus().getFkSerialNumberTypeId() == DModSysConsts.IS_SNR_TP_SMP &&
                        itemPackage.getParentGenus().getSerialNumberLength() != moItemGenus.getSerialNumberLength()) {
                    validation.setComponent(moKeyItemPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlUnitsPackage.getText()) + "',\n" +
                            "porque la longitud del número de serie del ítem seleccionado en ese campo, '" + itemPackage.getName() + "' (" + itemPackage.getParentGenus().getSerialNumberLength() + "),\n" +
                            "es distinta a la longitud del número de serie del ítem actual (" + moItemGenus.getSerialNumberLength() + ").");
                }
                else if (itemPackage.isSerialNumberApplying() && moBoolSerialNumberApplying.getValue() && moItemGenus.getFkSerialNumberTypeId() == DModSysConsts.IS_SNR_TP_CMP &&
                        itemPackage.getParentGenus().getFkSerialNumberTypeId() == DModSysConsts.IS_SNR_TP_SMP &&
                        itemPackage.getParentGenus().getSerialNumberLength() == moItemGenus.getSerialNumberLength() && moDecUnitsPackage.getValue() != 0) {
                    validation.setComponent(moDecUnitsPackage);
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ_NOT + "'" + DGuiUtils.getLabelName(jlUnitsPackage.getText()) + "',\n" +
                            "porque el ítem seleccionado en ese campo, '" + itemPackage.getName() + "', está configurado para usar números de serie simples.");
                }
            }
        }
        else if (moDecUnitsPackage.getValue() != 0) {
            validation.setComponent(moDecUnitsPackage);
            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ_NOT + "'" + jlUnitsPackage.getText() + "'.");
        }

        return validation;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel65;
    private javax.swing.JPanel jPanel66;
    private javax.swing.JPanel jPanel67;
    private javax.swing.JPanel jPanel68;
    private javax.swing.JPanel jPanel69;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel70;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbEditTaxRegime;
    private javax.swing.JButton jbNewBrand;
    private javax.swing.JButton jbNewItemGenus;
    private javax.swing.JButton jbNewItemLine;
    private javax.swing.JButton jbNewManufacturer;
    private javax.swing.JLabel jlAbpItem;
    private javax.swing.JLabel jlBarcode;
    private javax.swing.JLabel jlBrand;
    private javax.swing.JLabel jlCfdItemKey;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlComponent;
    private javax.swing.JLabel jlDepartment;
    private javax.swing.JLabel jlIngredient;
    private javax.swing.JLabel jlItemCode;
    private javax.swing.JLabel jlItemGenus;
    private javax.swing.JLabel jlItemLine;
    private javax.swing.JLabel jlItemName;
    private javax.swing.JLabel jlItemPackage;
    private javax.swing.JLabel jlItemPresentation;
    private javax.swing.JLabel jlManufacturer;
    private javax.swing.JLabel jlMeasurementLength;
    private javax.swing.JLabel jlMeasurementMass;
    private javax.swing.JLabel jlMeasurementSurface;
    private javax.swing.JLabel jlMeasurementTime;
    private javax.swing.JLabel jlMeasurementVolume;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlPrice1;
    private javax.swing.JLabel jlPrice2;
    private javax.swing.JLabel jlPrice3;
    private javax.swing.JLabel jlPrice4;
    private javax.swing.JLabel jlPrice5;
    private javax.swing.JLabel jlPriceLastPur;
    private javax.swing.JLabel jlPriceNet1;
    private javax.swing.JLabel jlPriceNet2;
    private javax.swing.JLabel jlPriceNet3;
    private javax.swing.JLabel jlPriceNet4;
    private javax.swing.JLabel jlPriceNet5;
    private javax.swing.JLabel jlPriceNetLastPur;
    private javax.swing.JLabel jlPriceNetSrp;
    private javax.swing.JLabel jlPriceSrp;
    private javax.swing.JLabel jlTaxGroup;
    private javax.swing.JLabel jlTaxRate;
    private javax.swing.JLabel jlTaxRegime;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JLabel jlUnitContained;
    private javax.swing.JLabel jlUnitVirtual;
    private javax.swing.JLabel jlUnitsContained;
    private javax.swing.JLabel jlUnitsPackage;
    private javax.swing.JLabel jlUnitsVirtual;
    private javax.swing.JLabel jlWeigthDelivery;
    private javax.swing.JLabel jlWeigthGross;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JTextField jtfCodeRo;
    private javax.swing.JTextField jtfNameRo;
    private javax.swing.JTextField jtfTaxRateRo;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolAbpItemByUser;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolBulk;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfCommission;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfDiscount;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfPrice;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolInventoriable;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolLotApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPredial;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolSerialNumberApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolTaxGroupByUser;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecMeasurementLength;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecMeasurementMass;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecMeasurementSurface;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecMeasurementTime;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecMeasurementVolume;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPrice1;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPrice2;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPrice3;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPrice4;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPrice5;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceLastPur;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceNet1;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceNet2;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceNet3;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceNet4;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceNet5;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceNetLastPur;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceNetSrp;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceSrp;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecUnitsContained;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecUnitsPackage;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecUnitsVirtual;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecWeigthDelivery;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecWeigthGross;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAbpItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBrand;
    private sba.lib.gui.bean.DBeanFieldKey moKeyComponent;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDepartment;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemGenus;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemLine;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemPackage;
    private sba.lib.gui.bean.DBeanFieldKey moKeyManufacturer;
    private sba.lib.gui.bean.DBeanFieldKey moKeyTaxGroup;
    private sba.lib.gui.bean.DBeanFieldKey moKeyTaxRegime;
    private sba.lib.gui.bean.DBeanFieldKey moKeyUnit;
    private sba.lib.gui.bean.DBeanFieldKey moKeyUnitContained;
    private sba.lib.gui.bean.DBeanFieldKey moKeyUnitVirtual;
    private sba.lib.gui.bean.DBeanFieldText moTextBarcode1;
    private sba.lib.gui.bean.DBeanFieldText moTextBarcode2;
    private sba.lib.gui.bean.DBeanFieldText moTextCfdItemKey;
    private sba.lib.gui.bean.DBeanFieldText moTextIngredient;
    private sba.lib.gui.bean.DBeanFieldText moTextItemCode;
    private sba.lib.gui.bean.DBeanFieldText moTextItemName;
    private sba.lib.gui.bean.DBeanFieldText moTextItemPresentation;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jbNewItemGenus.addActionListener(this);
        jbNewItemLine.addActionListener(this);
        jbNewBrand.addActionListener(this);
        jbNewManufacturer.addActionListener(this);
        jbEditTaxRegime.addActionListener(this);

        moTextItemCode.addFocusListener(this);
        moTextItemName.addFocusListener(this);
        moTextItemPresentation.addFocusListener(this);
        moDecPriceSrp.addFocusListener(this);
        moDecPrice1.addFocusListener(this);
        moDecPrice2.addFocusListener(this);
        moDecPrice3.addFocusListener(this);
        moDecPrice4.addFocusListener(this);
        moDecPrice5.addFocusListener(this);
        moDecPriceNetSrp.addFocusListener(this);
        moDecPriceNet1.addFocusListener(this);
        moDecPriceNet2.addFocusListener(this);
        moDecPriceNet3.addFocusListener(this);
        moDecPriceNet4.addFocusListener(this);
        moDecPriceNet5.addFocusListener(this);

        moKeyItemGenus.addItemListener(this);
        moKeyItemLine.addItemListener(this);
        moKeyBrand.addItemListener(this);
        moKeyManufacturer.addItemListener(this);
        moKeyTaxGroup.addItemListener(this);
        moBoolInventoriable.addItemListener(this);
        moBoolFreeOfPrice.addItemListener(this);
        moBoolTaxGroupByUser.addItemListener(this);
        moBoolAbpItemByUser.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbNewItemGenus.removeActionListener(this);
        jbNewItemLine.removeActionListener(this);
        jbNewBrand.removeActionListener(this);
        jbNewManufacturer.removeActionListener(this);
        jbEditTaxRegime.removeActionListener(this);

        moTextItemCode.removeFocusListener(this);
        moTextItemName.removeFocusListener(this);
        moTextItemPresentation.removeFocusListener(this);
        moDecPriceSrp.removeFocusListener(this);
        moDecPrice1.removeFocusListener(this);
        moDecPrice2.removeFocusListener(this);
        moDecPrice3.removeFocusListener(this);
        moDecPrice4.removeFocusListener(this);
        moDecPrice5.removeFocusListener(this);
        moDecPriceNetSrp.removeFocusListener(this);
        moDecPriceNet1.removeFocusListener(this);
        moDecPriceNet2.removeFocusListener(this);
        moDecPriceNet3.removeFocusListener(this);
        moDecPriceNet4.removeFocusListener(this);
        moDecPriceNet5.removeFocusListener(this);

        moKeyItemGenus.removeItemListener(this);
        moKeyItemLine.removeItemListener(this);
        moKeyBrand.removeItemListener(this);
        moKeyManufacturer.removeItemListener(this);
        moKeyTaxGroup.removeItemListener(this);
        moBoolInventoriable.removeItemListener(this);
        moBoolFreeOfPrice.removeItemListener(this);
        moBoolTaxGroupByUser.removeItemListener(this);
        moBoolAbpItemByUser.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItemGenus, DModConsts.IU_GEN, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTaxRegime, DModConsts.CS_TAX_REG, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyTaxGroup, DModConsts.FU_TAX_GRP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAbpItem, DModConsts.F_ABP_ITM, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyBrand, DModConsts.IU_BRD, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyManufacturer, DModConsts.IU_MFR, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyComponent, DModConsts.IU_CMP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyDepartment, DModConsts.IU_DEP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyUnit, DModConsts.IU_UNT, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyUnitVirtual, DModConsts.IU_UNT, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyUnitContained, DModConsts.IU_UNT, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyItemPackage, DModConsts.IU_ITM, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        boolean isCodeApplying = false;
        DDbConfigCompany configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();

        isCodeApplying = configCompany.isItemCodeApplying() && configCompany.isCodeItemApplying();

        moRegistry = (DDbItem) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setFkTaxRegimeId(DModSysConsts.CS_TAX_REG_NA);
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        setFormEditable(true);

        moKeyItemGenus.setValue(new int[] { moRegistry.getFkItemGenusId() });
        itemStateKeyItemGenus(false);
        moKeyItemLine.setValue(new int[] { moRegistry.getFkItemLineId_n() });
        itemStateKeyItemLine(false);

        jtfCodeRo.setText(moRegistry.getCode());
        jtfCodeRo.setCaretPosition(0);
        jtfNameRo.setText(moRegistry.getName());
        jtfNameRo.setCaretPosition(0);
        moTextItemCode.setValue(moRegistry.getItemCode());
        moTextItemName.setValue(moRegistry.getItemName());
        moTextItemPresentation.setValue(moRegistry.getItemPresentation());
        moTextIngredient.setValue(moRegistry.getIngredient());
        moDecMeasurementLength.setValue(moRegistry.getMeasurementLength());
        moDecMeasurementSurface.setValue(moRegistry.getMeasurementSurface());
        moDecMeasurementVolume.setValue(moRegistry.getMeasurementVolume());
        moDecMeasurementMass.setValue(moRegistry.getMeasurementMass());
        moDecMeasurementTime.setValue(moRegistry.getMeasurementTime());
        moDecWeigthGross.setValue(moRegistry.getWeightGross());
        moDecWeigthDelivery.setValue(moRegistry.getWeightDelivery());
        moDecUnitsVirtual.setValue(moRegistry.getUnitsVirtual());
        moDecUnitsContained.setValue(moRegistry.getUnitsContained());
        moDecUnitsPackage.setValue(moRegistry.getUnitsPackage());
        moDecPriceSrp.setValue(moRegistry.getPriceSrp());
        moDecPrice1.setValue(moRegistry.getPrice1());
        moDecPrice2.setValue(moRegistry.getPrice2());
        moDecPrice3.setValue(moRegistry.getPrice3());
        moDecPrice4.setValue(moRegistry.getPrice4());
        moDecPrice5.setValue(moRegistry.getPrice5());
        moTextCfdItemKey.setValue(moRegistry.getCfdItemKey());
        moBoolBulk.setValue(moRegistry.isBulk());
        moBoolInventoriable.setValue(moRegistry.isInventoriable());
        moBoolLotApplying.setValue(moRegistry.isLotApplying());
        moBoolSerialNumberApplying.setValue(moRegistry.isSerialNumberApplying());
        moBoolFreeOfPrice.setValue(moRegistry.isFreeOfPrice());
        moBoolFreeOfDiscount.setValue(moRegistry.isFreeOfDiscount());
        moBoolFreeOfCommission.setValue(moRegistry.isFreeOfCommission());
        moBoolPredial.setValue(moRegistry.isPredial());
        moKeyBrand.setValue(new int[] { moRegistry.getFkBrandId() });
        moKeyManufacturer.setValue(new int[] { moRegistry.getFkManufacturerId() });
        moKeyComponent.setValue(new int[] { moRegistry.getFkComponentId() });
        moKeyDepartment.setValue(new int[] { moRegistry.getFkDepartmentId() });
        moKeyUnit.setValue(new int[] { moRegistry.getFkUnitId() });
        moKeyUnitVirtual.setValue(new int[] { moRegistry.getFkUnitVirtualId() });
        moKeyUnitContained.setValue(new int[] { moRegistry.getFkUnitContainedId() });
        moKeyItemPackage.setValue(new int[] { moRegistry.getFkItemPackageId_n() });
        moKeyTaxGroup.setValue(new int[] { moRegistry.getFkTaxGroupId_n() });
        moKeyTaxRegime.setValue(new int[] { moRegistry.getFkTaxRegimeId() });
        moKeyAbpItem.setValue(new int[] { moRegistry.getFkAbpItemId_n() });

        moBoolTaxGroupByUser.setValue(moRegistry.getFkTaxGroupId_n() != DLibConsts.UNDEFINED);
        moBoolAbpItemByUser.setValue(moRegistry.getFkAbpItemId_n() != DLibConsts.UNDEFINED);
        moDecPriceLastPur.setValue(DTrnUtils.getItemLastPrices(miClient.getSession(), DModSysConsts.TS_DPS_CT_PUR, miClient.getSession().getSessionCustom().getLocalCurrencyKey(), moRegistry.getPrimaryKey())[0]);

        if (!isCodeApplying) {
            moTextItemCode.resetField();
        }

        moTextItemCode.setEnabled(isCodeApplying);

        moDecPriceLastPur.setEditable(false);
        moDecPriceNetLastPur.setEditable(false);
        
        moTextBarcode1.setValue(moRegistry.getChildBarcodes().size() < 1 ? "" : moRegistry.getChildBarcodes().get(0).getBarcode());
        moTextBarcode2.setValue(moRegistry.getChildBarcodes().size() < 2 ? "" : moRegistry.getChildBarcodes().get(1).getBarcode());
        
        jbEditTaxRegime.setEnabled(true);
        moKeyTaxRegime.setEnabled(false);

        itemStateKeyBrand(false);
        itemStateKeyManufacturer(false);
        itemStateKeyTaxGroup();
        itemStateBoolFreeOfPrice();
        itemStateBoolTaxGroupByUser();
        itemStateBoolAbpItemByUser();

        computeItemNameCode();
        
        addAllListeners();
    }

    @Override
    public DDbItem getRegistry() throws Exception {
        DDbItem registry = moRegistry.clone();
        ArrayList<String> barcodes = new ArrayList<>();

        if (registry.isRegistryNew()) { }

        registry.setCode(jtfCodeRo.getText());
        registry.setName(jtfNameRo.getText());
        registry.setItemCode(moTextItemCode.getValue());
        registry.setItemName(moTextItemName.getValue());
        registry.setItemPresentation(moTextItemPresentation.getValue());
        registry.setIngredient(moTextIngredient.getValue());
        registry.setMeasurementLength(moDecMeasurementLength.getValue());
        registry.setMeasurementSurface(moDecMeasurementSurface.getValue());
        registry.setMeasurementVolume(moDecMeasurementVolume.getValue());
        registry.setMeasurementMass(moDecMeasurementMass.getValue());
        registry.setMeasurementTime(moDecMeasurementTime.getValue());
        registry.setUnitsVirtual(moDecUnitsVirtual.getValue());
        registry.setUnitsContained(moDecUnitsContained.getValue());
        registry.setUnitsPackage(moDecUnitsPackage.getValue());
        registry.setPriceSrp(moDecPriceSrp.getValue());
        registry.setPrice1(moDecPrice1.getValue());
        registry.setPrice2(moDecPrice2.getValue());
        registry.setPrice3(moDecPrice3.getValue());
        registry.setPrice4(moDecPrice4.getValue());
        registry.setPrice5(moDecPrice5.getValue());
        registry.setCfdItemKey(moTextCfdItemKey.getValue());
        registry.setBulk(moBoolBulk.getValue());
        registry.setInventoriable(moBoolInventoriable.getValue());
        registry.setLotApplying(moBoolLotApplying.getValue());
        registry.setSerialNumberApplying(moBoolSerialNumberApplying.getValue());
        registry.setFreeOfPrice(moBoolFreeOfPrice.getValue());
        registry.setFreeOfDiscount(moBoolFreeOfDiscount.getValue());
        registry.setFreeOfCommission(moBoolFreeOfCommission.getValue());
        registry.setPredial(moBoolPredial.getValue());
        registry.setFkItemGenusId(moKeyItemGenus.getValue()[0]);
        registry.setFkItemLineId_n(moKeyItemLine.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyItemLine.getValue()[0]);
        registry.setFkBrandId(moKeyBrand.getValue()[0]);
        registry.setFkManufacturerId(moKeyManufacturer.getValue()[0]);
        registry.setFkComponentId(moKeyComponent.getValue()[0]);
        registry.setFkDepartmentId(moKeyDepartment.getValue()[0]);
        registry.setFkUnitId(moKeyUnit.getValue()[0]);
        registry.setFkUnitVirtualId(moKeyUnitVirtual.getValue()[0]);
        registry.setFkUnitContainedId(moKeyUnitContained.getValue()[0]);
        registry.setFkItemPackageId_n(moKeyItemPackage.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyItemPackage.getValue()[0]);
        registry.setFkTaxGroupId_n(!moBoolTaxGroupByUser.getValue() ? DLibConsts.UNDEFINED : moKeyTaxGroup.getValue()[0]);
        registry.setFkTaxRegimeId(moKeyTaxRegime.getValue()[0]);
        registry.setFkAbpItemId_n(!moBoolAbpItemByUser.getValue() ? DLibConsts.UNDEFINED : moKeyAbpItem.getValue()[0]);
        
        if (!moTextBarcode1.getValue().isEmpty()) {
            barcodes.add(moTextBarcode1.getValue());
        }

        if (!moTextBarcode2.getValue().isEmpty()) {
            barcodes.add(moTextBarcode2.getValue());
        }
        
        registry.getChildBarcodes().clear();
        
        for (String barcode : barcodes) {
            DDbItemBarcode itemBarcode = new DDbItemBarcode();
            //itemBarcode.setPkItemId(...); // set on save
            //itemBarcode.setPkBarcodeId(...); // set on save
            itemBarcode.setBarcode(barcode);
            registry.getChildBarcodes().add(itemBarcode);
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moBoolLotApplying.getValue() && moBoolSerialNumberApplying.getValue()) {
                validation.setMessage("No se pueden especificar simultáneamente '" + moBoolLotApplying.getText() + "' y '" + moBoolSerialNumberApplying.getText() + "'.");
            }
            else {
                validation = validateItemPackage();
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbNewItemGenus) {
                actionNewItemGenus();
            }
            else if (button == jbNewItemLine) {
                actionNewItemLine();
            }
            else if (button == jbNewBrand) {
                actionNewBrand();
            }
            else if (button == jbNewManufacturer) {
                actionNewManufacturer();
            }
            else if (button == jbEditTaxRegime) {
                actionEditTaxRegime();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();

            if (field == moTextItemCode || field == moTextItemName || field == moTextItemPresentation) {
                computeItemNameCode();
            }
        }
        else if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();

            if (field == moDecPriceSrp) {
                moDecPriceNetSrp.setValue(moDecPriceSrp.getValue() * mdTaxRate);
            }
            else if (field == moDecPrice1) {
                moDecPriceNet1.setValue(moDecPrice1.getValue() * mdTaxRate);
            }
            else if (field == moDecPrice2) {
                moDecPriceNet2.setValue(moDecPrice2.getValue() * mdTaxRate);
            }
            else if (field == moDecPrice3) {
                moDecPriceNet3.setValue(moDecPrice3.getValue() * mdTaxRate);
            }
            else if (field == moDecPrice4) {
                moDecPriceNet4.setValue(moDecPrice4.getValue() * mdTaxRate);
            }
            else if (field == moDecPrice5) {
                moDecPriceNet5.setValue(moDecPrice5.getValue() * mdTaxRate);
            }
            else if (field == moDecPriceNetSrp) {
                moDecPriceSrp.setValue(DTrnUtils.computePrice(moDecPriceNetSrp.getValue(), moDecPriceSrp.getValue(), mdTaxRate));
            }
            else if (field == moDecPriceNet1) {
                moDecPrice1.setValue(DTrnUtils.computePrice(moDecPriceNet1.getValue(), moDecPrice1.getValue(), mdTaxRate));
            }
            else if (field == moDecPriceNet2) {
                moDecPrice2.setValue(DTrnUtils.computePrice(moDecPriceNet2.getValue(), moDecPrice2.getValue(), mdTaxRate));
            }
            else if (field == moDecPriceNet3) {
                moDecPrice3.setValue(DTrnUtils.computePrice(moDecPriceNet3.getValue(), moDecPrice3.getValue(), mdTaxRate));
            }
            else if (field == moDecPriceNet4) {
                moDecPrice4.setValue(DTrnUtils.computePrice(moDecPriceNet4.getValue(), moDecPrice4.getValue(), mdTaxRate));
            }
            else if (field == moDecPriceNet5) {
                moDecPrice5.setValue(DTrnUtils.computePrice(moDecPriceNet5.getValue(), moDecPrice5.getValue(), mdTaxRate));
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldBoolean) {
            DBeanFieldBoolean field = (DBeanFieldBoolean) e.getSource();

            if (field == moBoolInventoriable) {
                itemStateBoolInventoriable();
            }
            else if (field == moBoolFreeOfPrice) {
                itemStateBoolFreeOfPrice();
            }
            else if (field == moBoolTaxGroupByUser) {
                itemStateBoolTaxGroupByUser();
            }
            else if (field == moBoolAbpItemByUser) {
                itemStateBoolAbpItemByUser();
            }
        }
        else if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyItemGenus) {
                    itemStateKeyItemGenus(true);
                }
                else if (field == moKeyItemLine) {
                    itemStateKeyItemLine(true);
                }
                else if (field == moKeyBrand) {
                    itemStateKeyBrand(true);
                }
                else if (field == moKeyManufacturer) {
                    itemStateKeyManufacturer(true);
                }
                else if (field == moKeyTaxGroup) {
                    itemStateKeyTaxGroup();
                }
            }
        }
    }
}
