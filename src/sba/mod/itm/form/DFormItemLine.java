/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormItemLine.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.itm.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbConfigCompany;
import sba.mod.itm.db.DDbBrand;
import sba.mod.itm.db.DDbItemGenus;
import sba.mod.itm.db.DDbItemLine;
import sba.mod.itm.db.DDbManufacturer;

/**
 *
 * @author Sergio Flores
 */
public class DFormItemLine extends DBeanForm implements ActionListener, ItemListener {

    private DDbItemLine moRegistry;
    private DDbItemGenus moItemGenus;
    private int mnParamItemGenusId;

    /** Creates new form DFormItemLine */
    public DFormItemLine(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.IU_LIN, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlItemGenus = new javax.swing.JLabel();
        moKeyItemGenus = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        moBoolTaxGroupByUser = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel12 = new javax.swing.JPanel();
        jlTaxGroup = new javax.swing.JLabel();
        moKeyTaxGroup = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel13 = new javax.swing.JPanel();
        moBoolAbpItemByUser = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel14 = new javax.swing.JPanel();
        jlAbpItem = new javax.swing.JLabel();
        moKeyAbpItem = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sba.lib.gui.bean.DBeanFieldText();
        jlCfdItemKey = new javax.swing.JLabel();
        moTextCfdItemKey = new sba.lib.gui.bean.DBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sba.lib.gui.bean.DBeanFieldText();
        jPanel18 = new javax.swing.JPanel();
        moBoolBulk = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel19 = new javax.swing.JPanel();
        moBoolInventoriable = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolLotApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolSerialNumberApplying = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel26 = new javax.swing.JPanel();
        moBoolFreeOfPrice = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolFreeOfDiscount = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolFreeOfCommission = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel25 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jlBrand = new javax.swing.JLabel();
        moKeyBrand = new sba.lib.gui.bean.DBeanFieldKey();
        jbNewBrand = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jlManufacturer = new javax.swing.JLabel();
        moKeyManufacturer = new sba.lib.gui.bean.DBeanFieldKey();
        jbNewManufacturer = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jlComponent = new javax.swing.JLabel();
        moKeyComponent = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel23 = new javax.swing.JPanel();
        jlDepartment = new javax.swing.JLabel();
        moKeyDepartment = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel27 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sba.lib.gui.bean.DBeanFieldKey();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Clasificación:"));
        jPanel5.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemGenus.setText("Género ítems:*");
        jlItemGenus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlItemGenus);

        moKeyItemGenus.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(moKeyItemGenus);

        jPanel5.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel5.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel5.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel5.add(jPanel10);

        jPanel2.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración:"));
        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolTaxGroupByUser.setText("Configuración manual de impuestos");
        moBoolTaxGroupByUser.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel11.add(moBoolTaxGroupByUser);

        jPanel6.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxGroup.setText("Grupo impuestos:*");
        jlTaxGroup.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlTaxGroup);

        moKeyTaxGroup.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(moKeyTaxGroup);

        jPanel6.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolAbpItemByUser.setText("Configuración manual de paquete contable");
        moBoolAbpItemByUser.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moBoolAbpItemByUser);

        jPanel6.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbpItem.setText("Paquete contable:*");
        jlAbpItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlAbpItem);

        moKeyAbpItem.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel14.add(moKeyAbpItem);

        jPanel6.add(jPanel14);

        jPanel2.add(jPanel6);

        jpContainer.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel15.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel24.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCode);

        moTextCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(moTextCode);

        jlCfdItemKey.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCfdItemKey.setText("Clave ProdServ:");
        jlCfdItemKey.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCfdItemKey);

        moTextCfdItemKey.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(moTextCfdItemKey);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel4.add(moTextName);

        jPanel1.add(jPanel4);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolBulk.setText("A granel");
        moBoolBulk.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel18.add(moBoolBulk);

        jPanel1.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolInventoriable.setText("Inventariable");
        moBoolInventoriable.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel19.add(moBoolInventoriable);

        moBoolLotApplying.setText("Lotes");
        moBoolLotApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel19.add(moBoolLotApplying);

        moBoolSerialNumberApplying.setText("Números serie");
        moBoolSerialNumberApplying.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel19.add(moBoolSerialNumberApplying);

        jPanel1.add(jPanel19);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolFreeOfPrice.setText("Sin precios");
        moBoolFreeOfPrice.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfPrice);

        moBoolFreeOfDiscount.setText("Sin descuentos");
        moBoolFreeOfDiscount.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfDiscount);

        moBoolFreeOfCommission.setText("Sin comisiones");
        moBoolFreeOfCommission.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel26.add(moBoolFreeOfCommission);

        jPanel1.add(jPanel26);

        jPanel24.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel15.add(jPanel24);

        jPanel25.setBorder(javax.swing.BorderFactory.createTitledBorder("Propiedades del registro:"));
        jPanel25.setLayout(new java.awt.BorderLayout());

        jPanel17.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBrand.setText("Marca:*");
        jlBrand.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlBrand);

        moKeyBrand.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel20.add(moKeyBrand);

        jbNewBrand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_new.gif"))); // NOI18N
        jbNewBrand.setToolTipText("Crear marca");
        jbNewBrand.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel20.add(jbNewBrand);

        jPanel17.add(jPanel20);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlManufacturer.setText("Fabricante:*");
        jlManufacturer.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlManufacturer);

        moKeyManufacturer.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel21.add(moKeyManufacturer);

        jbNewManufacturer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_new.gif"))); // NOI18N
        jbNewManufacturer.setToolTipText("Crear fabricante");
        jbNewManufacturer.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel21.add(jbNewManufacturer);

        jPanel17.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlComponent.setText("Componente:*");
        jlComponent.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlComponent);

        moKeyComponent.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel22.add(moKeyComponent);

        jPanel17.add(jPanel22);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDepartment.setText("Departamento:*");
        jlDepartment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlDepartment);

        moKeyDepartment.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel23.add(moKeyDepartment);

        jPanel17.add(jPanel23);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad:*");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel27.add(moKeyUnit);

        jPanel17.add(jPanel27);

        jPanel25.add(jPanel17, java.awt.BorderLayout.NORTH);

        jPanel15.add(jPanel25);

        jpContainer.add(jPanel15, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        int lenCode = ((DDbConfigCompany) miClient.getSession().getConfigCompany()).getLengthCodeItemLine();

        DGuiUtils.setWindowBounds(this, 800, 500);

        mnParamItemGenusId = DLibConsts.UNDEFINED;

        moKeyItemGenus.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemGenus.getText()), true);
        moBoolTaxGroupByUser.setBooleanSettings(moBoolTaxGroupByUser.getText(), false);
        moKeyTaxGroup.setKeySettings(miClient, DGuiUtils.getLabelName(jlTaxGroup.getText()), true);
        moBoolAbpItemByUser.setBooleanSettings(moBoolAbpItemByUser.getText(), false);
        moKeyAbpItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlAbpItem.getText()), true);
        moTextCode.setTextSettings(DGuiUtils.getLabelName(jlCode.getText()), lenCode == 0 || lenCode > 10 ? 10 : lenCode);
        moTextCfdItemKey.setTextSettings(DGuiUtils.getLabelName(jlCfdItemKey), 8, 0);
        moTextName.setTextSettings(DGuiUtils.getLabelName(jlName.getText()), 25);
        moBoolBulk.setBooleanSettings(moBoolBulk.getText(), false);
        moBoolInventoriable.setBooleanSettings(moBoolInventoriable.getText(), false);
        moBoolLotApplying.setBooleanSettings(moBoolLotApplying.getText(), false);
        moBoolSerialNumberApplying.setBooleanSettings(moBoolSerialNumberApplying.getText(), false);
        moBoolFreeOfPrice.setBooleanSettings(moBoolFreeOfPrice.getText(), false);
        moBoolFreeOfDiscount.setBooleanSettings(moBoolFreeOfDiscount.getText(), false);
        moBoolFreeOfCommission.setBooleanSettings(moBoolFreeOfCommission.getText(), false);
        moKeyBrand.setKeySettings(miClient, DGuiUtils.getLabelName(jlBrand.getText()), true);
        moKeyManufacturer.setKeySettings(miClient, DGuiUtils.getLabelName(jlManufacturer.getText()), true);
        moKeyComponent.setKeySettings(miClient, DGuiUtils.getLabelName(jlComponent.getText()), true);
        moKeyDepartment.setKeySettings(miClient, DGuiUtils.getLabelName(jlDepartment.getText()), true);
        moKeyUnit.setKeySettings(miClient, DGuiUtils.getLabelName(jlUnit.getText()), true);

        moFields.addField(moKeyItemGenus);
        moFields.addField(moBoolTaxGroupByUser);
        moFields.addField(moKeyTaxGroup);
        moFields.addField(moBoolAbpItemByUser);
        moFields.addField(moKeyAbpItem);
        moFields.addField(moTextCode);
        moFields.addField(moTextCfdItemKey);
        moFields.addField(moTextName);
        moFields.addField(moBoolBulk);
        moFields.addField(moBoolInventoriable);
        moFields.addField(moBoolLotApplying);
        moFields.addField(moBoolSerialNumberApplying);
        moFields.addField(moBoolFreeOfPrice);
        moFields.addField(moBoolFreeOfDiscount);
        moFields.addField(moBoolFreeOfCommission);
        moFields.addField(moKeyBrand);
        moFields.addField(moKeyManufacturer);
        moFields.addField(moKeyComponent);
        moFields.addField(moKeyDepartment);
        moFields.addField(moKeyUnit);

        moFields.setFormButton(jbSave);
    }

    private void displayTaxGroup() {
        if (!moBoolTaxGroupByUser.isSelected()) {
            if (moItemGenus != null) {
                moKeyTaxGroup.setValue(new int[] { moItemGenus.getFkTaxGroupId() });
            }
            else {
                moKeyTaxGroup.setValue(null);
            }
        }
    }

    private void displayAbpItem() {
        if (!moBoolAbpItemByUser.isSelected()) {
            if (moItemGenus != null) {
                moKeyAbpItem.setValue(new int[] { moItemGenus.getFkAbpItemId() });
            }
            else {
                moKeyAbpItem.setValue(null);
            }
        }
    }

    private void actionNewBrand() {
        DDbBrand brand = null;

        miClient.getSession().showForm(DModConsts.IU_BRD, DLibConsts.UNDEFINED, null);
        brand = (DDbBrand) miClient.getSession().getModule(DModConsts.MOD_ITM).getLastRegistry();
        if (brand != null) {
            miClient.getSession().populateCatalogue(moKeyBrand, DModConsts.IU_BRD, DLibConsts.UNDEFINED, null);
            DGuiUtils.locateItem(moKeyBrand, brand.getPrimaryKey());
        }

        moKeyBrand.requestFocus();
    }

    private void actionNewManufacturer() {
        DDbManufacturer manufacturer = null;

        miClient.getSession().showForm(DModConsts.IU_MFR, DLibConsts.UNDEFINED, null);
        manufacturer = (DDbManufacturer) miClient.getSession().getModule(DModConsts.MOD_ITM).getLastRegistry();
        if (manufacturer != null) {
            miClient.getSession().populateCatalogue(moKeyManufacturer, DModConsts.IU_MFR, DLibConsts.UNDEFINED, null);
            DGuiUtils.locateItem(moKeyManufacturer, manufacturer.getPrimaryKey());
        }

        moKeyManufacturer.requestFocus();
    }

    private void itemStateKeyItemGenus() {
        if (moKeyItemGenus.getSelectedIndex() <= 0) {
            moItemGenus = null;

            moBoolBulk.setEnabled(false);
            moBoolBulk.setValue(false);
            moBoolInventoriable.setEnabled(false);
            moBoolInventoriable.setValue(false);
            moBoolLotApplying.setEnabled(false);
            moBoolLotApplying.setValue(false);
            moBoolSerialNumberApplying.setEnabled(false);
            moBoolSerialNumberApplying.setValue(false);
            /*
            moBoolFreeOfPrice.setEnabled(false);
            moBoolFreeOfPrice.setValue(false);
            moBoolFreeOfDiscount.setEnabled(false);
            moBoolFreeOfDiscount.setValue(false);
            moBoolFreeOfCommission.setEnabled(false);
            moBoolFreeOfCommission.setValue(false);
            */
        }
        else {
            moItemGenus = (DDbItemGenus) miClient.getSession().readRegistry(DModConsts.IU_GEN, moKeyItemGenus.getValue());

            moBoolBulk.setEnabled(moItemGenus.isBulk());
            moBoolBulk.setValue(moItemGenus.isBulk());
            moBoolInventoriable.setEnabled(moItemGenus.isInventoriable());
            moBoolInventoriable.setValue(moItemGenus.isInventoriable());
            moBoolLotApplying.setEnabled(moItemGenus.isLotApplying());
            moBoolLotApplying.setValue(moItemGenus.isLotApplying());
            moBoolSerialNumberApplying.setEnabled(moItemGenus.isSerialNumberApplying());
            moBoolSerialNumberApplying.setValue(moItemGenus.isSerialNumberApplying());
            /*
            moBoolFreeOfPrice.setEnabled(moItemGenus.isFreeOfPrice());
            moBoolFreeOfPrice.setValue(moItemGenus.isFreeOfPrice());
            moBoolFreeOfDiscount.setEnabled(moItemGenus.isFreeOfDiscount());
            moBoolFreeOfDiscount.setValue(moItemGenus.isFreeOfDiscount());
            moBoolFreeOfCommission.setEnabled(moItemGenus.isFreeOfCommission());
            moBoolFreeOfCommission.setValue(moItemGenus.isFreeOfCommission());
            */
        }

        displayTaxGroup();
        displayAbpItem();
        itemStateBoolInventoriable();
    }

    private void itemStateBoolInventoriable() {
        if (moBoolInventoriable.getValue()) {
            moBoolLotApplying.setEnabled(moItemGenus == null ? false : moItemGenus.isLotApplying());
            moBoolSerialNumberApplying.setEnabled(moItemGenus == null ? false : moItemGenus.isSerialNumberApplying());
        }
        else {
            moBoolLotApplying.setEnabled(false);
            moBoolSerialNumberApplying.setEnabled(false);

            moBoolLotApplying.setValue(false);
            moBoolSerialNumberApplying.setValue(false);
        }
    }

    private void itemStateBoolTaxGroupByUser() {
        if (moBoolTaxGroupByUser.getValue()) {
            moKeyTaxGroup.setEnabled(true);
        }
        else {
            moKeyTaxGroup.setEnabled(false);
            displayTaxGroup();
        }
    }

    private void itemStateBoolAbpItemByUser() {
        if (moBoolAbpItemByUser.getValue()) {
            moKeyAbpItem.setEnabled(true);
        }
        else {
            moKeyAbpItem.setEnabled(false);
            displayAbpItem();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbNewBrand;
    private javax.swing.JButton jbNewManufacturer;
    private javax.swing.JLabel jlAbpItem;
    private javax.swing.JLabel jlBrand;
    private javax.swing.JLabel jlCfdItemKey;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlComponent;
    private javax.swing.JLabel jlDepartment;
    private javax.swing.JLabel jlItemGenus;
    private javax.swing.JLabel jlManufacturer;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlTaxGroup;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JPanel jpContainer;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolAbpItemByUser;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolBulk;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfCommission;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfDiscount;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFreeOfPrice;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolInventoriable;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolLotApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolSerialNumberApplying;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolTaxGroupByUser;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAbpItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBrand;
    private sba.lib.gui.bean.DBeanFieldKey moKeyComponent;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDepartment;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemGenus;
    private sba.lib.gui.bean.DBeanFieldKey moKeyManufacturer;
    private sba.lib.gui.bean.DBeanFieldKey moKeyTaxGroup;
    private sba.lib.gui.bean.DBeanFieldKey moKeyUnit;
    private sba.lib.gui.bean.DBeanFieldText moTextCfdItemKey;
    private sba.lib.gui.bean.DBeanFieldText moTextCode;
    private sba.lib.gui.bean.DBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jbNewBrand.addActionListener(this);
        jbNewManufacturer.addActionListener(this);
        moKeyItemGenus.addItemListener(this);
        moBoolInventoriable.addItemListener(this);
        moBoolTaxGroupByUser.addItemListener(this);
        moBoolAbpItemByUser.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbNewBrand.removeActionListener(this);
        jbNewManufacturer.removeActionListener(this);
        moKeyItemGenus.removeItemListener(this);
        moBoolInventoriable.removeItemListener(this);
        moBoolTaxGroupByUser.removeItemListener(this);
        moBoolAbpItemByUser.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        DGuiParams paramsItemGenus = new DGuiParams();

        paramsItemGenus.getParamsMap().put(DModConsts.IU_LIN, true);

        miClient.getSession().populateCatalogue(moKeyItemGenus, DModConsts.IU_GEN, DLibConsts.UNDEFINED, paramsItemGenus);
        miClient.getSession().populateCatalogue(moKeyTaxGroup, DModConsts.FU_TAX_GRP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAbpItem, DModConsts.F_ABP_ITM, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyBrand, DModConsts.IU_BRD, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyManufacturer, DModConsts.IU_MFR, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyComponent, DModConsts.IU_CMP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyDepartment, DModConsts.IU_DEP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyUnit, DModConsts.IU_UNT, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        DDbConfigCompany configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();

        moRegistry = (DDbItemLine) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();

            if (mnParamItemGenusId != DLibConsts.UNDEFINED) {
                moRegistry.setFkItemGenusId(mnParamItemGenusId);
                mnParamItemGenusId = DLibConsts.UNDEFINED;
            }

            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        setFormEditable(true);

        moKeyItemGenus.setValue(new int[] { moRegistry.getFkItemGenusId() });
        itemStateKeyItemGenus();

        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        moTextCfdItemKey.setValue(moRegistry.getCfdItemKey());
        moBoolBulk.setValue(moRegistry.isBulk());
        moBoolInventoriable.setValue(moRegistry.isInventoriable());
        moBoolLotApplying.setValue(moRegistry.isLotApplying());
        moBoolSerialNumberApplying.setValue(moRegistry.isSerialNumberApplying());
        moBoolFreeOfPrice.setValue(moRegistry.isFreeOfPrice());
        moBoolFreeOfDiscount.setValue(moRegistry.isFreeOfDiscount());
        moBoolFreeOfCommission.setValue(moRegistry.isFreeOfCommission());
        moKeyBrand.setValue(new int[] { moRegistry.getFkBrandId() });
        moKeyManufacturer.setValue(new int[] { moRegistry.getFkManufacturerId() });
        moKeyComponent.setValue(new int[] { moRegistry.getFkComponentId() });
        moKeyDepartment.setValue(new int[] { moRegistry.getFkDepartmentId() });
        moKeyUnit.setValue(new int[] { moRegistry.getFkUnitId() });
        moKeyTaxGroup.setValue(new int[] { moRegistry.getFkTaxGroupId_n() });
        moKeyAbpItem.setValue(new int[] { moRegistry.getFkAbpItemId_n() });

        moBoolTaxGroupByUser.setValue(moRegistry.getFkTaxGroupId_n() != DLibConsts.UNDEFINED);
        moBoolAbpItemByUser.setValue(moRegistry.getFkAbpItemId_n() != DLibConsts.UNDEFINED);

        if (!configCompany.isCodeItemLineApplying()) {
            moTextCode.resetField();
        }

        if (!configCompany.isBrandApplying()) {
            moKeyBrand.setValue(new int[] { DModSysConsts.IU_BRD_NA });
        }

        if (!configCompany.isManufacturerApplying()) {
            moKeyManufacturer.setValue(new int[] { DModSysConsts.IU_MFR_NA });
        }

        if (!configCompany.isComponentApplying()) {
            moKeyComponent.setValue(new int[] { DModSysConsts.IU_CMP_NA });
        }

        if (!configCompany.isDepartmentApplying()) {
            moKeyDepartment.setValue(new int[] { DModSysConsts.IU_DEP_NA });
        }

        itemStateBoolTaxGroupByUser();
        itemStateBoolAbpItemByUser();

        moTextCode.setEnabled(configCompany.isCodeItemLineApplying());
        moKeyBrand.setEnabled(configCompany.isBrandApplying());
        moKeyManufacturer.setEnabled(configCompany.isManufacturerApplying());
        moKeyComponent.setEnabled(configCompany.isComponentApplying());
        moKeyDepartment.setEnabled(configCompany.isDepartmentApplying());

        addAllListeners();
    }

    @Override
    public DDbItemLine getRegistry() throws Exception {
        DDbItemLine registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setCfdItemKey(moTextCfdItemKey.getValue());
        registry.setBulk(moBoolBulk.getValue());
        registry.setInventoriable(moBoolInventoriable.getValue());
        registry.setLotApplying(moBoolLotApplying.getValue());
        registry.setSerialNumberApplying(moBoolSerialNumberApplying.getValue());
        registry.setFreeOfPrice(moBoolFreeOfPrice.getValue());
        registry.setFreeOfDiscount(moBoolFreeOfDiscount.getValue());
        registry.setFreeOfCommission(moBoolFreeOfCommission.getValue());
        registry.setFkItemGenusId(moKeyItemGenus.getValue()[0]);
        registry.setFkBrandId(moKeyBrand.getValue()[0]);
        registry.setFkManufacturerId(moKeyManufacturer.getValue()[0]);
        registry.setFkComponentId(moKeyComponent.getValue()[0]);
        registry.setFkDepartmentId(moKeyDepartment.getValue()[0]);
        registry.setFkUnitId(moKeyUnit.getValue()[0]);
        registry.setFkTaxGroupId_n(!moBoolTaxGroupByUser.getValue() ? DLibConsts.UNDEFINED : moKeyTaxGroup.getValue()[0]);
        registry.setFkAbpItemId_n(!moBoolAbpItemByUser.getValue() ? DLibConsts.UNDEFINED : moKeyAbpItem.getValue()[0]);

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModConsts.IU_GEN:
                mnParamItemGenusId = value == null ? DLibConsts.UNDEFINED : (Integer) value;
                break;
            default:
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbNewBrand) {
                actionNewBrand();
            }
            else if (button == jbNewManufacturer) {
                actionNewManufacturer();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyItemGenus) {
                    itemStateKeyItemGenus();
                }
            }
        }
        else if (e.getSource() instanceof DBeanFieldBoolean) {
            DBeanFieldBoolean field = (DBeanFieldBoolean) e.getSource();

            if (field == moBoolInventoriable) {
                itemStateBoolInventoriable();
            }
            else if (field == moBoolTaxGroupByUser) {
                itemStateBoolTaxGroupByUser();
            }
            else if (field == moBoolAbpItemByUser) {
                itemStateBoolAbpItemByUser();
            }
        }
    }
}
