/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormDpsTypeChange.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.trn.form;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Vector;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbUser;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DDbDpsSeriesBranch;
import sba.mod.trn.db.DDbDpsSeriesNumber;
import sba.mod.trn.db.DDbDpsTypeChange;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DFormDpsTypeChange extends DBeanForm implements ItemListener {

    private DDbDps moRegistry;
    private boolean mbSeriesAlreadySet;

    /** Creates new form DFormDpsTypeChange
     * @param client GUI client.
     */
    public DFormDpsTypeChange(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.T_DPS_CHG, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        moPanelDps = new sba.mod.trn.form.DPanelDps();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlDocType = new javax.swing.JLabel();
        moKeyDocType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel21 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextSeries = new sba.lib.gui.bean.DBeanFieldText();
        moIntNumber = new sba.lib.gui.bean.DBeanFieldInteger();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento:"));
        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));
        jPanel6.add(moPanelDps, java.awt.BorderLayout.PAGE_START);

        jpContainer.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Nuevo tipo de documento:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocType.setText("Tipo doc.:");
        jlDocType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlDocType);

        moKeyDocType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(moKeyDocType);

        jPanel5.add(jPanel8);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio doc.:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jlNumber.setRequestFocusEnabled(false);
        jPanel21.add(jlNumber);

        moTextSeries.setToolTipText("Serie");
        moTextSeries.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(moTextSeries);

        moIntNumber.setToolTipText("Folio");
        moIntNumber.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel21.add(moIntNumber);

        jPanel5.add(jPanel21);

        jPanel2.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jpContainer.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);

        moKeyDocType.setKeySettings(miClient, DGuiUtils.getLabelName(jlDocType.getText()), true);
        moTextSeries.setTextSettings(DGuiUtils.getLabelName(jlNumber.getText()), 10, 0);
        moIntNumber.setIntegerSettings(DGuiUtils.getLabelName(jlNumber.getText()), DGuiConsts.GUI_TYPE_INT_RAW, true);

        moFields.addField(moKeyDocType);
        moFields.addField(moTextSeries);
        moFields.addField(moIntNumber);

        moFields.setFormButton(jbSave);

        moPanelDps.setPanelSettings(miClient);
        moPanelDps.enableShowCardex();
    }

    private void itemStateKeyDocType() {
        int newDpsNumber = 0;
        int newDpsSeriesId = DLibConsts.UNDEFINED;
        int[] newClassKey = null;
        boolean isDpsNumberAutomatic = true;
        String newDpsSeries = "";
        Vector<DDbDpsSeriesBranch> dpsSeriesBranches = null;
        Vector<DDbDpsSeriesNumber> dpsSeriesNumbers = null;
        DDialogSelectDpsSeries dialogSelectDpsSeries = null;

        mbSeriesAlreadySet = false;
        moTextSeries.setEnabled(false);
        moIntNumber.setEnabled(false);

        moTextSeries.setValue("");
        moIntNumber.setValue(0);

        if (moKeyDocType.getSelectedIndex() > 0) {
            newClassKey = new int[] { moKeyDocType.getValue()[0], moKeyDocType.getValue()[1] };
            isDpsNumberAutomatic = DTrnUtils.isDpsNumberAutomatic(newClassKey);

            if (!isDpsNumberAutomatic) {
                mbSeriesAlreadySet = true;
                moTextSeries.setEnabled(true);
                moIntNumber.setEnabled(true);
            }
            else {
                try {
                    dpsSeriesBranches = ((DDbUser) miClient.getSession().getUser()).getAuxBranchDpsSeries(moRegistry.getCompanyBranchKey(), moKeyDocType.getValue());

                    if (dpsSeriesBranches.isEmpty()) {
                        // No document series found:

                        miClient.showMsgBoxWarning(DUtilConsts.ERR_MSG_DPS_SER_NON_AVA);
                        return;
                    }
                    else if (dpsSeriesBranches.size() == 1) {
                        // One document series found:

                        newDpsSeriesId = dpsSeriesBranches.get(0).getPkSeriesId();
                        newDpsSeries = dpsSeriesBranches.get(0).getDbSeries();
                    }
                    else {
                        // Pick document series:

                        dialogSelectDpsSeries = new DDialogSelectDpsSeries(miClient, DTrnUtils.getDpsXTypeByDpsType(moKeyDocType.getValue()), moRegistry.getFkDpsCategoryId());
                        dialogSelectDpsSeries.setRegistry((DDbUser) miClient.getSession().getUser());
                        dialogSelectDpsSeries.setVisible(true);

                        if (dialogSelectDpsSeries.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                            newDpsSeriesId = (Integer) dialogSelectDpsSeries.getValue(DModSysConsts.PARAM_SER_ID);
                            newDpsSeries = (String) dialogSelectDpsSeries.getValue(DModSysConsts.PARAM_SER_SER);
                        }
                        else {
                            miClient.showMsgBoxWarning(DUtilConsts.ERR_MSG_DPS_SER_NON_DEF);
                            return;
                        }
                    }

                    /*
                     * ALG#001. Define and validate new document automatic number:
                     */

                    dpsSeriesNumbers = ((DDbUser) miClient.getSession().getUser()).getAuxBranchDpsSeriesNumbers(newDpsSeriesId);

                    if (dpsSeriesNumbers.isEmpty()) {
                        miClient.showMsgBoxWarning(DUtilConsts.ERR_MSG_DPS_SER_NUM_NON_AVA);
                        return;
                    }
                    else if (dpsSeriesNumbers.size() > 1) {
                        miClient.showMsgBoxWarning(DUtilConsts.ERR_MSG_DPS_SER_NUM_MUL_AVA);
                        return;
                    }
                    else {
                        newDpsNumber = DTrnUtils.getNextNumberForDps(miClient.getSession(), moKeyDocType.getValue(), newDpsSeries);

                        if (newDpsNumber < dpsSeriesNumbers.get(0).getNumberStart()) {
                            newDpsNumber = dpsSeriesNumbers.get(0).getNumberStart();
                        }
                        else if (dpsSeriesNumbers.get(0).getNumberEnd_n() > 0 && newDpsNumber > dpsSeriesNumbers.get(0).getNumberEnd_n()) {
                            miClient.showMsgBoxWarning(DUtilConsts.ERR_MSG_DPS_SER_NUM_MAX);
                            return;
                        }
                    }

                    /*
                     * End of algorithm.
                     */

                    mbSeriesAlreadySet = true;
                    moTextSeries.setEnabled(false);
                    moIntNumber.setEnabled(true);

                    moTextSeries.setValue(newDpsSeries);
                    moIntNumber.setValue(newDpsNumber);
                }
                catch (Exception e) {
                    DLibUtils.showException(this, e);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jlDocType;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JPanel jpContainer;
    private sba.lib.gui.bean.DBeanFieldInteger moIntNumber;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDocType;
    private sba.mod.trn.form.DPanelDps moPanelDps;
    private sba.lib.gui.bean.DBeanFieldText moTextSeries;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        moKeyDocType.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyDocType.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbDps) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        // Set registry:

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            throw new Exception(DGuiConsts.ERR_MSG_FORM_EXIST_REG);
        }
        else {
            jtfRegistryKey.setText("");
        }

        setFormEditable(true);  // enable all controls before setting form values

        miClient.getSession().populateCatalogue(moKeyDocType, DModConsts.TS_DPS_TP, DLibConsts.UNDEFINED, new DGuiParams(moRegistry.getDpsClassKey()));

        itemStateKeyDocType();

        moPanelDps.setValue(DModSysConsts.PARAM_YEAR, DLibTimeUtils.digestYear(moRegistry.getDate())[0]);
        moPanelDps.setRegistry(moRegistry);

        addAllListeners();
    }

    @Override
    public DDbDpsTypeChange getRegistry() throws Exception {
        DDbDpsTypeChange registry = new DDbDpsTypeChange();
        DDbDpsSeriesNumber dpsSeriesNumber = null;

        if (registry.isRegistryNew()) { }

        registry.setPkDpsId(moRegistry.getPkDpsId());
        registry.setPkChangeId(0);
        registry.setNewSeries(moTextSeries.getValue());
        registry.setNewNumber(moIntNumber.getValue());
        registry.setNewOrder(moRegistry.getOrder());
        registry.setNewDate(moRegistry.getDate());
        registry.setOldSeries(moRegistry.getSeries());
        registry.setOldNumber(moRegistry.getNumber());
        registry.setOldOrder(moRegistry.getOrder());
        registry.setOldDate(moRegistry.getDate());
        //registry.setDeleted(?);
        registry.setFkNewDpsCategoryId(moKeyDocType.getValue()[0]);
        registry.setFkNewDpsClassId(moKeyDocType.getValue()[1]);
        registry.setFkNewDpsTypeId(moKeyDocType.getValue()[2]);
        registry.setFkOldDpsCategoryId(moRegistry.getFkDpsCategoryId());
        registry.setFkOldDpsClassId(moRegistry.getFkDpsClassId());
        registry.setFkOldDpsTypeId(moRegistry.getFkDpsTypeId());

        dpsSeriesNumber = DTrnUtils.getDpsSeriesNumber(miClient.getSession(), moKeyDocType.getValue(), moTextSeries.getValue(), moIntNumber.getValue());
        registry.setAuxXmlTypeId(dpsSeriesNumber.getFkXmlTypeId());

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        String message = "";
        DDbDpsSeriesNumber dpsSeriesNumber = null;
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (!mbSeriesAlreadySet) {
                validation.setMessage("La serie del documento no ha sido especificada.");
                validation.setComponent(moKeyDocType);
            }
            else {
                if (DLibUtils.compareKeys(moRegistry.getDpsTypeKey(), moKeyDocType.getValue()) && moRegistry.getSeries().compareTo(moTextSeries.getValue()) == 0) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlDocType.getText()) + "'");
                    validation.setComponent(moKeyDocType);
                }
                else {
                    dpsSeriesNumber = DTrnUtils.getDpsSeriesNumber(miClient.getSession(), moKeyDocType.getValue(), moTextSeries.getValue(), moIntNumber.getValue());

                    if (dpsSeriesNumber != null && dpsSeriesNumber.getApprobationDate_n() != null && dpsSeriesNumber.getApprobationDate_n().after(moRegistry.getDate())) {
                        validation.setMessage("La fecha del documento " + DLibUtils.DateFormatDate.format(moRegistry.getDate()) +
                                DGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + DLibUtils.DateFormatDate.format(dpsSeriesNumber.getApprobationDate_n()) + ", fecha de aprobación de los folios del documento.");
                        validation.setComponent(moKeyDocType);
                    }
                    else {
                        // Validate document number:

                        if (validation.isValid()) {
                            moRegistry.setSeries(moTextSeries.getValue());
                            moRegistry.setNumber(moIntNumber.getValue());
                            moRegistry.setFkDpsCategoryId(moKeyDocType.getValue()[0]);
                            moRegistry.setFkDpsClassId(moKeyDocType.getValue()[1]);
                            moRegistry.setFkDpsTypeId(moKeyDocType.getValue()[2]);

                            message = DTrnUtils.validateNumberForDps(miClient.getSession(), moRegistry);
                            if (!message.isEmpty()) {
                                validation.setMessage(message);
                                validation.setComponent(moIntNumber);
                            }
                            else if (moRegistry.isRegistryNew() && DTrnUtils.isDpsNumberAutomatic(moRegistry.getDpsClassKey())) {
                                moIntNumber.setValue(moRegistry.getNumber());   // new document number could be updated
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyDocType) {
                    itemStateKeyDocType();
                }
            }
        }
    }
}
