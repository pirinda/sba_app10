/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogDpsAdjustedDoc.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DDialogDpsAdjustedDoc extends DBeanFormDialog implements ActionListener, ItemListener {

    private int mnYear;
    private DDbDps moDps;
    private DDbDps moDpsAdjustment;
    private DGuiFieldKeyGroup moKeyGroup;

    /** Creates new form DDialogDpsAdjustedDoc
     * @param client GUI client.
     * @param type Category of DPS adjustment. Constants defined in DModSysConsts (TS_ADJ_CT_...).
     * @param subtype Category of DPS. Constants defined in DModSysConsts (TS_DPS_CT_...).
     */
    public DDialogDpsAdjustedDoc(DGuiClient client, int type, int subtype) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, type, subtype, "Ajuste de documento");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroup = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jpDps = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrency = new javax.swing.JTextField();
        jtfExchangeRate = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jlAdjustmentCategory = new javax.swing.JLabel();
        jtfAdjustmentCategory = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jlAdjustmentClass = new javax.swing.JLabel();
        moKeyAdjustmentClass = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlAdjustmentType = new javax.swing.JLabel();
        moKeyAdjustmentType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlDps = new javax.swing.JLabel();
        moKeyDps = new sba.lib.gui.bean.DBeanFieldKey();
        jtbDps = new javax.swing.JToggleButton();
        jpDpsRows = new javax.swing.JPanel();
        moPanelDps = new sba.mod.trn.form.DPanelDps();

        jLabel2.setText("jLabel1");

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del ajuste:"));
        jpDps.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlCurrency);

        jtfCurrency.setEditable(false);
        jtfCurrency.setText("TEXT");
        jtfCurrency.setFocusable(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel19.add(jtfCurrency);

        jtfExchangeRate.setEditable(false);
        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("0.0000");
        jtfExchangeRate.setToolTipText("Tipo de cambio");
        jtfExchangeRate.setFocusable(false);
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel19.add(jtfExchangeRate);

        jPanel14.add(jPanel19);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAdjustmentCategory.setText("Cat. ajuste:");
        jlAdjustmentCategory.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlAdjustmentCategory);

        jtfAdjustmentCategory.setEditable(false);
        jtfAdjustmentCategory.setText("TEXT");
        jtfAdjustmentCategory.setFocusable(false);
        jtfAdjustmentCategory.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel18.add(jtfAdjustmentCategory);

        jPanel14.add(jPanel18);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAdjustmentClass.setText("Clase ajuste:*");
        jlAdjustmentClass.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jlAdjustmentClass);

        moKeyAdjustmentClass.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel2.add(moKeyAdjustmentClass);

        jPanel14.add(jPanel2);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAdjustmentType.setText("Tipo ajuste:*");
        jlAdjustmentType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jlAdjustmentType);

        moKeyAdjustmentType.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel17.add(moKeyAdjustmentType);

        jPanel14.add(jPanel17);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDps.setText("Documento:");
        jlDps.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jlDps);

        moKeyDps.setPreferredSize(new java.awt.Dimension(248, 23));
        jPanel15.add(moKeyDps);

        jtbDps.setText("+");
        jtbDps.setToolTipText("Todos los documentos");
        jtbDps.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jtbDps.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jtbDps);

        jPanel14.add(jPanel15);

        jPanel16.add(jPanel14, java.awt.BorderLayout.NORTH);

        jpDps.add(jPanel16, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpDps, java.awt.BorderLayout.NORTH);

        jpDpsRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento a ajustar:"));
        jpDpsRows.setLayout(new java.awt.BorderLayout(0, 5));
        jpDpsRows.add(moPanelDps, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDpsRows, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);

        mnYear = DLibTimeUtils.digestYear(miClient.getSession().getWorkingDate())[0];

        moKeyAdjustmentClass.setKeySettings(miClient, DGuiUtils.getLabelName(jlAdjustmentClass.getText()), true);
        moKeyAdjustmentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlAdjustmentType.getText()), true);
        moKeyDps.setKeySettings(miClient, DGuiUtils.getLabelName(jlDps.getText()), false);

        moFields.addField(moKeyAdjustmentClass);
        moFields.addField(moKeyAdjustmentType);
        moFields.addField(moKeyDps);
        moFields.setFormButton(jbSave);

        jtfAdjustmentCategory.setText((String) miClient.getSession().readField(DModConsts.TS_ADJ_CT, new int[] { mnFormType }, DDbRegistry.FIELD_NAME));

        moKeyGroup = new DGuiFieldKeyGroup(miClient);
        moPanelDps.setPanelSettings(miClient);
        moPanelDps.enableShowCardex();

        jbSave.setText(DGuiConsts.TXT_BTN_OK);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            moKeyAdjustmentClass.requestFocus();
        }
    }

    private void renderDpsAdjustment() {
        removeAllListeners();

        if (moDpsAdjustment == null) {
            jtfCurrency.setText("");
            jtfExchangeRate.setText(DLibUtils.getDecimalFormatExchangeRate().format(0));

            moPanelDps.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, null);

            jtbDps.setSelected(false);
            moKeyDps.removeAllItems();
        }
        else {
            jtfCurrency.setText(miClient.getSession().getSessionCustom().getCurrency(moDpsAdjustment.getCurrencyKey()));
            jtfExchangeRate.setText(DLibUtils.getDecimalFormatExchangeRate().format(moDpsAdjustment.getExchangeRate()));

            moPanelDps.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, moDpsAdjustment.getBookkeepingNumberKey_n());

            actionDps();
        }

        itemStateKeyDps();

        addAllListeners();
    }

    private void actionDps() {
        DGuiParams params = new DGuiParams();

        params.getParamsMap().put(DModSysConsts.PARAM_YEAR, mnYear);
        params.getParamsMap().put(DModSysConsts.PARAM_BPR_CL, DTrnUtils.getBizPartnerClassByDpsCategory(moDpsAdjustment.getFkDpsCategoryId()));
        params.getParamsMap().put(DModSysConsts.PARAM_BPR, moDpsAdjustment.getFkBizPartnerBizPartnerId());
        params.getParamsMap().put(DModSysConsts.PARAM_CUR, moDpsAdjustment.getFkCurrencyId());
        params.getParamsMap().put(DModSysConsts.PARAM_BKK_NUM_KEY, moDpsAdjustment.getBookkeepingNumberKey_n());
        params.getParamsMap().put(DModSysConsts.PARAM_BAL, DUtilConsts.BAL_CY); // document's currency balance

        if (!jtbDps.isSelected()) {
            miClient.getSession().populateCatalogue(moKeyDps, DModConsts.TX_ACC_PAY, DLibConsts.UNDEFINED, params);     // show only pending documents
        }
        else {
            miClient.getSession().populateCatalogue(moKeyDps, DModConsts.TX_ACC_PAY_COL, DLibConsts.UNDEFINED, params); // show all documents: pending and collected
        }
    }

    private void itemStateKeyDps() {
        if (moKeyDps.getSelectedIndex() <= 0) {
            moDps = null;
        }
        else {
            moDps = (DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, moKeyDps.getSelectedItem().getPrimaryKey());
        }

        try {
            moPanelDps.setRegistry(moDps);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup jButtonGroup;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jlAdjustmentCategory;
    private javax.swing.JLabel jlAdjustmentClass;
    private javax.swing.JLabel jlAdjustmentType;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDps;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpDpsRows;
    private javax.swing.JToggleButton jtbDps;
    private javax.swing.JTextField jtfAdjustmentCategory;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfExchangeRate;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAdjustmentClass;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAdjustmentType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDps;
    private sba.mod.trn.form.DPanelDps moPanelDps;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jtbDps.addActionListener(this);
        moKeyDps.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jtbDps.removeActionListener(this);
        moKeyDps.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moKeyGroup.initGroup();
        moKeyGroup.addFieldKey(moKeyAdjustmentClass, DModConsts.TS_ADJ_CL, DLibConsts.UNDEFINED, new DGuiParams(new int[] { mnFormType }));
        moKeyGroup.addFieldKey(moKeyAdjustmentType, DModConsts.TS_ADJ_TP, DLibConsts.UNDEFINED, null);
        moKeyGroup.populateCatalogues();
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moKeyDps.getSelectedIndex() <= 0) {
                if (miClient.showMsgBoxConfirm(DGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + DGuiUtils.getLabelName(jlDps.getText()) + "'" + DGuiConsts.MSG_CNF_FIELD_VAL_UNDEF) != JOptionPane.YES_OPTION) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlDps.getText()) + "'.");
                    validation.setComponent(moKeyDps);
                }
            }
        }

        return validation;
    }

    @Override
    public void resetForm() {
        reloadCatalogues();

        mnFormResult = DGuiConsts.FORM_RESULT_CANCEL;
        mbFirstActivation = true;

        moDpsAdjustment = null;
        renderDpsAdjustment();

        moKeyGroup.resetGroup();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_OBJ_DPS_ADJ:
                moDpsAdjustment = (DDbDps) value;
                renderDpsAdjustment();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;

        switch (type) {
            case DModSysConsts.PARAM_DPS:
                value = moKeyDps.getSelectedIndex() <= 0 ? null : moKeyDps.getValue();
                break;
            case DModSysConsts.PARAM_DPS_ADJ_TP:
                value = moKeyAdjustmentType.getValue();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return value;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbDps) {
                actionDps();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyDps) {
                    itemStateKeyDps();
                }
            }
        }
    }
}
