/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogFindBizPartner.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.JButton;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldRadio;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.lib.img.DImgConsts;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.bpr.db.DBprUtils;
import sba.mod.bpr.db.DDbBizPartner;
import sba.mod.trn.db.DRowFindBizPartner;
import sba.mod.trn.db.DTrnConsts;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DDialogFindBizPartner extends DBeanFormDialog implements DGridPaneFormOwner, ActionListener, ItemListener {

    private boolean mbNewRegistries;
    private int[] manDefaultBizPartnerTypeKey;
    private DGridPaneForm moGridCurrent;
    private DGridPaneForm moGridBizPartnersByCode;
    private DGridPaneForm moGridBizPartnersByName;
    private Vector<DRowFindBizPartner> mvFindBizPartner;

    /** Creates new form DDialogFindBizPartner
     * @param client GUI client.
     * @param subtype Business partner class. Constants defined in DModSysConsts (BS_BPR_CL_...).
     */
    public DDialogFindBizPartner(DGuiClient client, int subtype) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.BX_BPR, subtype, "");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroup = new javax.swing.ButtonGroup();
        jpSettings = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        moRadioByCode = new sba.lib.gui.bean.DBeanFieldRadio();
        moRadioByName = new sba.lib.gui.bean.DBeanFieldRadio();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        moBoolExactMatch = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel7 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jlBizPartnerType = new javax.swing.JLabel();
        moKeyBizPartnerType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jbNewBizPartner = new javax.swing.JButton();
        jpItems = new javax.swing.JPanel();
        jpItemsNorth = new javax.swing.JPanel();
        jlFind = new javax.swing.JLabel();
        moTextFind = new sba.lib.gui.bean.DBeanFieldText();
        jbClearFind = new javax.swing.JButton();
        jpItemsCenter = new javax.swing.JPanel();

        jpSettings.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel4.setLayout(new java.awt.GridLayout(1, 4, 5, 5));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Búsqueda por:"));
        jPanel5.setLayout(new java.awt.GridLayout(2, 1));

        jButtonGroup.add(moRadioByCode);
        moRadioByCode.setText("Código");
        jPanel5.add(moRadioByCode);

        jButtonGroup.add(moRadioByName);
        moRadioByName.setText("Nombre");
        jPanel5.add(moRadioByName);

        jPanel4.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones de búsqueda:"));
        jPanel6.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolExactMatch.setText("Búsqueda exacta");
        moBoolExactMatch.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel11.add(moBoolExactMatch);

        jPanel6.add(jPanel11);

        jPanel4.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros:"));
        jPanel7.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartnerType.setText("Tipo:");
        jlBizPartnerType.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel17.add(jlBizPartnerType);

        moKeyBizPartnerType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(moKeyBizPartnerType);

        jPanel7.add(jPanel17);

        jPanel4.add(jPanel7);

        jpSettings.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Comandos:"));
        jPanel8.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbNewBizPartner.setText("Nuevo");
        jbNewBizPartner.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jbNewBizPartner);

        jPanel8.add(jPanel19);

        jpSettings.add(jPanel8, java.awt.BorderLayout.EAST);

        getContentPane().add(jpSettings, java.awt.BorderLayout.NORTH);

        jpItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones disponibles:"));
        jpItems.setLayout(new java.awt.BorderLayout(0, 5));

        jpItemsNorth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFind.setText("Búsqueda:");
        jlFind.setPreferredSize(new java.awt.Dimension(75, 23));
        jpItemsNorth.add(jlFind);

        moTextFind.setPreferredSize(new java.awt.Dimension(300, 23));
        jpItemsNorth.add(moTextFind);

        jbClearFind.setIcon(miClient.getImageIcon(DImgConsts.CMD_STD_CLEAR));
        jbClearFind.setToolTipText("Limpiar");
        jbClearFind.setPreferredSize(new java.awt.Dimension(23, 23));
        jpItemsNorth.add(jbClearFind);

        jpItems.add(jpItemsNorth, java.awt.BorderLayout.NORTH);

        jpItemsCenter.setLayout(new java.awt.BorderLayout());
        jpItems.add(jpItemsCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpItems, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 920, 575);

        moRadioByCode.setBooleanSettings(moRadioByCode.getText(), false);
        moRadioByName.setBooleanSettings(moRadioByName.getText(), false);
        moBoolExactMatch.setBooleanSettings(moBoolExactMatch.getText(), false);
        moKeyBizPartnerType.setKeySettings(miClient, DGuiUtils.getLabelName(jlBizPartnerType.getText()), false);

        moFields.addField(moRadioByCode);
        moFields.addField(moRadioByName);
        moFields.addField(moBoolExactMatch);
        moFields.addField(moKeyBizPartnerType);

        moFields.setFormButton(jbSave);

        jbSave.setText(DGuiConsts.TXT_BTN_OK);

        moTextFind.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    if (moGridCurrent != null) {
                        moGridCurrent.getTable().requestFocus();
                    }
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                renderBizPartners();
            }
        });

        setTitle("Buscar " + DBprUtils.getBizPartnerClassNameSng(mnFormSubtype).toLowerCase());

        manDefaultBizPartnerTypeKey = null;

        moBoolExactMatch.setSelected(false);

        moGridBizPartnersByCode = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, true, "Búsqueda " + DBprUtils.getBizPartnerClassNamePlr(mnFormSubtype).toLowerCase(), new DGuiParams(DUtilConsts.PER_FIND_CODE, DUtilConsts.PRC_N)) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int i = 0;
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[3];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "RFC");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Razón social o denominación");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridBizPartnersByName = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, true, "Búsqueda " + DBprUtils.getBizPartnerClassNamePlr(mnFormSubtype).toLowerCase(), new DGuiParams(DUtilConsts.PER_FIND_NAME, DUtilConsts.PRC_N)) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int i = 0;
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[4];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "RFC");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Razón social o denominación");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridBizPartnersByCode.setPaneFormOwner(this);
        moGridBizPartnersByName.setPaneFormOwner(this);

        mvFormGrids.add(moGridBizPartnersByCode);
        mvFormGrids.add(moGridBizPartnersByName);

        moRadioByName.setSelected(true);
        itemStateRadioByName();
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            moTextFind.requestFocus();
        }
    }

    private void readBizPartners(final boolean renderBizPartners) {
        int findMode = DLibConsts.UNDEFINED;

        if (moRadioByCode.isSelected()) {
            findMode = DTrnConsts.FIND_MODE_BY_CODE;
        }
        else if (moRadioByName.isSelected()) {
            findMode = DTrnConsts.FIND_MODE_BY_NAME;
        }

        mvFindBizPartner = DTrnUtils.readFindBizPartners(miClient.getSession(), findMode, mnFormSubtype);

        if (renderBizPartners) {
            renderBizPartners();
        }
    }

    private void renderBizPartners() {
        String text = moTextFind.getValue().toUpperCase();
        Vector<DGridRow> rows = new Vector<>();

        if (mvFindBizPartner != null && mvFindBizPartner.size() > 0) {
            if (text.length() == 0) {
                for (DRowFindBizPartner findBizPartner : mvFindBizPartner) {
                    if (moKeyBizPartnerType.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findBizPartner.getBizPartnerTypeKey(), moKeyBizPartnerType.getValue())) {
                        continue;
                    }

                    rows.add(findBizPartner);
                }
            }
            else {
                if (moBoolExactMatch.isSelected()) {
                    for (DRowFindBizPartner findBizPartner : mvFindBizPartner) {
                        if (((String) findBizPartner.getRowValueAt(0)).startsWith(text)) {
                            if (moKeyBizPartnerType.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findBizPartner.getBizPartnerTypeKey(), moKeyBizPartnerType.getValue())) {
                                continue;
                            }

                            rows.add(findBizPartner);
                        }
                    }
                }
                else {
                    for (DRowFindBizPartner findBizPartner : mvFindBizPartner) {
                        if (((String) findBizPartner.getRowValueAt(0)).contains(text)) {
                            if (moKeyBizPartnerType.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findBizPartner.getBizPartnerTypeKey(), moKeyBizPartnerType.getValue())) {
                                continue;
                            }

                            rows.add(findBizPartner);
                        }
                    }
                }
            }
        }

        moGridCurrent.populateGrid(rows);
    }

    private void setCurrentGrid(DGridPaneForm grid) {
        moGridCurrent = grid;

        jpItemsCenter.removeAll();
        jpItemsCenter.add(moGridCurrent);
        jpItemsCenter.validate();
        jpItemsCenter.repaint();

        moTextFind.setValue("");
        moTextFind.requestFocus();
    }

    private void actionTextFind() {
        moGridCurrent.getTable().requestFocus();
    }

    private void actionClearFind() {
        moTextFind.setValue("");
        moTextFind.requestFocus();

        renderBizPartners();
    }

    private void actionNewBizPartner() {
        DDbBizPartner bizPartner = null;

        miClient.getSession().showForm(DModConsts.BU_BPR, mnFormSubtype, null);

        bizPartner = (DDbBizPartner) miClient.getSession().getModule(DModConsts.MOD_BPR).getLastRegistry();

        if (bizPartner != null) {
            mbNewRegistries = true;
            readBizPartners(false);   // render items after setting text to find

            if (moRadioByCode.isSelected()) {
                moTextFind.setValue(bizPartner.getCode());
            }
            else if (moRadioByName.isSelected()) {
                moTextFind.setValue(bizPartner.getName());
            }

            renderBizPartners();
            moTextFind.requestFocus();
        }
    }

    private void itemStateRadioByCode() {
        setCurrentGrid(moGridBizPartnersByCode);
        readBizPartners(true);
    }

    private void itemStateRadioByName() {
        setCurrentGrid(moGridBizPartnersByName);
        readBizPartners(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup jButtonGroup;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbClearFind;
    private javax.swing.JButton jbNewBizPartner;
    private javax.swing.JLabel jlBizPartnerType;
    private javax.swing.JLabel jlFind;
    private javax.swing.JPanel jpItems;
    private javax.swing.JPanel jpItemsCenter;
    private javax.swing.JPanel jpItemsNorth;
    private javax.swing.JPanel jpSettings;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolExactMatch;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBizPartnerType;
    private sba.lib.gui.bean.DBeanFieldRadio moRadioByCode;
    private sba.lib.gui.bean.DBeanFieldRadio moRadioByName;
    private sba.lib.gui.bean.DBeanFieldText moTextFind;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods:
     */

    public void reloadBizPartners() {
        moTextFind.setValue("");
        moTextFind.requestFocus();
        readBizPartners(true);
    }

    public boolean getNewRegistries() {
        return mbNewRegistries;
    }

    /*
     * Overrided methods:
     */

    @Override
    public void addAllListeners() {
        moTextFind.addActionListener(this);
        moRadioByCode.addItemListener(this);
        moRadioByName.addItemListener(this);
        moBoolExactMatch.addItemListener(this);
        moKeyBizPartnerType.addItemListener(this);
        jbClearFind.addActionListener(this);
        jbNewBizPartner.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moTextFind.removeActionListener(this);
        moRadioByCode.removeItemListener(this);
        moRadioByName.removeItemListener(this);
        moBoolExactMatch.removeItemListener(this);
        moKeyBizPartnerType.removeItemListener(this);
        jbClearFind.removeActionListener(this);
        jbNewBizPartner.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyBizPartnerType, DModConsts.BU_BPR_TP, mnFormSubtype, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DRowFindBizPartner findItem = null;
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            findItem = (DRowFindBizPartner) moGridCurrent.getSelectedGridRow();

            if (findItem == null) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + moGridCurrent.getName() + "'.");
                validation.setComponent(moGridCurrent.getTable());
            }
        }

        return validation;
    }

    @Override
    public void initForm() {
        removeAllListeners();

        mbFirstActivation = true;

        reloadCatalogues();

        if (manDefaultBizPartnerTypeKey != null) {
            moKeyBizPartnerType.setValue(manDefaultBizPartnerTypeKey);
        }

        reloadBizPartners();

        addAllListeners();
    }

    @Override
    public void resetForm() {
        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;
        mbNewRegistries = false;
    }

    @Override
    public void setValue(final int type, final Object value) {
        int[] key = null;

        switch (type) {
            case DModSysConsts.FLAG_EXACT_MATCH:
                moBoolExactMatch.setSelected((Boolean) value);
                break;

            case DModSysConsts.PARAM_ITM_TP_KEY:
                key = (int[]) value;
                moKeyBizPartnerType.setValue(key);
                break;

            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        switch (type) {
            case DModConsts.BU_BPR:
                if (moGridCurrent.getSelectedGridRow() != null) {
                    value = moGridCurrent.getSelectedGridRow().getRowPrimaryKey();
                }
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return value;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();

            if (field == moTextFind) {
                actionTextFind();
            }
        }
        else if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClearFind) {
                actionClearFind();
            }
            else if (button == jbNewBizPartner) {
                actionNewBizPartner();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldRadio) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldRadio field = (DBeanFieldRadio) e.getSource();

                if (field == moRadioByCode) {
                    itemStateRadioByCode();
                }
                else if (field == moRadioByName) {
                    itemStateRadioByName();
                }
            }
        }
        else if (e.getSource() instanceof  DBeanFieldBoolean) {
            DBeanFieldBoolean field = (DBeanFieldBoolean) e.getSource();

            if (field == moBoolExactMatch) {
                renderBizPartners();
            }
        }
        else if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyBizPartnerType) {
                    renderBizPartners();
                }
            }
        }
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
