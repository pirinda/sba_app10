/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogHistoryPrices.java
 *
 * Created on 20/12/2011, 04:23:05 PM
 */

package sba.mod.trn.form;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JButton;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.trn.db.DRowHistoryPrices;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DDialogHistoryPrices extends DBeanFormDialog implements ActionListener {

    private int mnItem;
    private DGridPaneForm moGridMoves;

    /** Creates new form DDialogHistoryPrices
     * @param client GUI client.
     * @param category DPS Category. Constants defined in DModSysConsts (TS_DPS_CT_...).
     */
    public DDialogHistoryPrices(DGuiClient client, int category) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.TX_PRC_HST, category, "Historial de precios");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItem = new javax.swing.JTextField();
        jtfItemCode = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlDpsCategory = new javax.swing.JLabel();
        jtfDpsCategory = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlMoves = new javax.swing.JLabel();
        moIntMoves = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel6 = new javax.swing.JPanel();
        jbQuery = new javax.swing.JButton();
        jpMoves = new javax.swing.JPanel();

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la búsqueda:"));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jlItem);

        jtfItem.setEditable(false);
        jtfItem.setText("TEXT");
        jtfItem.setToolTipText("Nombre");
        jtfItem.setFocusable(false);
        jtfItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jtfItem);

        jtfItemCode.setEditable(false);
        jtfItemCode.setText("TEXT");
        jtfItemCode.setToolTipText("Código");
        jtfItemCode.setFocusable(false);
        jtfItemCode.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jtfItemCode);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDpsCategory.setText("Categoría:");
        jlDpsCategory.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jlDpsCategory);

        jtfDpsCategory.setEditable(false);
        jtfDpsCategory.setText("TEXT");
        jtfDpsCategory.setToolTipText("Nombre");
        jtfDpsCategory.setFocusable(false);
        jtfDpsCategory.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jtfDpsCategory);

        jPanel1.add(jPanel4);

        jPanel7.add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(1, 5, 0));

        jlMoves.setText("Movimientos:");
        jlMoves.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jlMoves);

        moIntMoves.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(moIntMoves);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jbQuery.setText("Mostrar");
        jbQuery.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jbQuery);

        jPanel2.add(jPanel6);

        jPanel7.add(jPanel2, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel7, java.awt.BorderLayout.NORTH);

        jpMoves.setBorder(javax.swing.BorderFactory.createTitledBorder("Historial de precios:"));
        jpMoves.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpMoves, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 960, 600);

        moIntMoves.setIntegerSettings(DGuiUtils.getLabelName(jlMoves), DGuiConsts.GUI_TYPE_INT, true);

        moFields.addField(moIntMoves);
        moFields.setFormButton(jbQuery);

        jtfDpsCategory.setText((String) miClient.getSession().readField(DModConsts.TS_DPS_CT, new int[] { mnFormSubtype }, DDbRegistry.FIELD_NAME));
        jtfDpsCategory.setCaretPosition(0);

        jbSave.setEnabled(false);
        jbSave.setText(DGuiConsts.TXT_BTN_OK);
        jbCancel.setText(DGuiConsts.TXT_BTN_CLOSE);
        jbQuery.addActionListener(this);

        moGridMoves = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle, null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[21];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_1B, "#");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_REG_NUM, DGridConsts.COL_TITLE_NUM + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DATE, DGridConsts.COL_TITLE_DATE + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Sucursal empresa");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_BPR_S, DGridConsts.COL_TITLE_NAME + " asociado negocios");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_BPR, DGridConsts.COL_TITLE_CODE + " asociado negocios");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT_UNIT, "Precio u. $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT_UNIT, "Descto. u. $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Descto. par. $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Importe $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Descto. doc.");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Descto. doc. $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Subtotal $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Imptos. tras. $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Imptos. rets. $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Total $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpMoves.add(moGridMoves, BorderLayout.CENTER);

        mvFormGrids.add(moGridMoves);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jbCancel.requestFocus();
        }
    }

    private void renderItem() {
        if (mnItem == DLibConsts.UNDEFINED) {
            jtfItem.setText("");
            jtfItemCode.setText("");
        }
        else {
            jtfItem.setText((String) miClient.getSession().readField(DModConsts.IU_ITM, new int[] { mnItem }, DDbRegistry.FIELD_NAME));
            jtfItem.setCaretPosition(0);
            jtfItemCode.setText((String) miClient.getSession().readField(DModConsts.IU_ITM, new int[] { mnItem }, DDbRegistry.FIELD_CODE));
            jtfItemCode.setCaretPosition(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbQuery;
    private javax.swing.JLabel jlDpsCategory;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlMoves;
    private javax.swing.JPanel jpMoves;
    private javax.swing.JTextField jtfDpsCategory;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfItemCode;
    private sba.lib.gui.bean.DBeanFieldInteger moIntMoves;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods
     */

    public void populateHistory() {
        int move = 0;
        String sql = "";
        ResultSet resultSet = null;
        DRowHistoryPrices row = null;
        Vector<DGridRow> gridRows = new Vector<>();

        if (moIntMoves.getValue() <= 0) {
            miClient.showMsgBoxWarning(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlMoves) + "'.");
            moIntMoves.requestFocus();
        }
        else {
            try {
                sql = "SELECT d.ser, d.num, d.dt, dt.code, cb.code, b.name, bc.code, u.code, " +
                        "dr.qty, dr.prc_unt_cy, dr.dsc_unt_cy, dr.dsc_row_cy, dr.sbt_prv_cy_r, dr.b_dsc_doc, dr.dsc_doc_cy, dr.sbt_cy_r, dr.tax_cha_cy_r, dr.tax_ret_cy_r, dr.tot_cy_r, c.code " +
                        "FROM " + DModConsts.TablesMap.get(DModConsts.T_DPS) + " AS d " +
                        "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.T_DPS_ROW) + " AS dr ON d.id_dps = dr.id_dps AND d.b_del = 0 AND dr.b_del = 0 AND " +
                        "d.fk_dps_ct = " + mnFormSubtype + " AND d.fk_dps_cl = " + DModSysConsts.TS_DPS_CL_PUR_DOC[1] + " AND dr.fk_row_itm = " + mnItem + " " +
                        "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.TS_DPS_TP) + " AS dt ON d.fk_dps_ct = dt.id_dps_ct AND d.fk_dps_cl = dt.id_dps_cl AND d.fk_dps_tp = dt.id_dps_tp " +
                        "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BRA) + " AS cb ON d.fk_own_bpr = cb.id_bpr AND d.fk_own_bra = cb.id_bra " +
                        "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BPR) + " AS b ON d.fk_bpr_bpr = b.id_bpr " +
                        "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BPR_CFG) + " AS bc ON b.id_bpr = bc.id_bpr AND bc.id_bpr_cl = " + DTrnUtils.getBizPartnerClassByDpsCategory(mnFormSubtype) + " " +
                        "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.CS_CUR) + " AS c ON d.fk_cur = c.id_cur " +
                        "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.IU_UNT) + " AS u ON dr.fk_row_unt = u.id_unt " +
                        "ORDER BY d.dt DESC, dt.code, d.ser, d.num DESC " +
                        "LIMIT " + moIntMoves.getValue() + " ";
                resultSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resultSet.next()) {
                    row = new DRowHistoryPrices();

                    row.setMove(++move);
                    row.setDpsType(resultSet.getString("dt.code"));
                    row.setDpsNumber(DTrnUtils.composeDpsNumber(resultSet.getString("d.ser"), resultSet.getInt("d.num")));
                    row.setDpsDate(resultSet.getDate("d.dt"));
                    row.setDpsCompanyBranchCode(resultSet.getString("cb.code"));
                    row.setDpsBizPartner(resultSet.getString("b.name"));
                    row.setDpsBizPartnerCode(resultSet.getString("bc.code"));
                    row.setQuantity(resultSet.getDouble("dr.qty"));
                    row.setUnitCode(resultSet.getString("u.code"));
                    row.setPriceUnitary(resultSet.getDouble("dr.prc_unt_cy"));
                    row.setDiscountUnitary(resultSet.getDouble("dr.dsc_unt_cy"));
                    row.setDiscountRow(resultSet.getDouble("dr.dsc_row_cy"));
                    row.setSubtotalProv_r(resultSet.getDouble("dr.sbt_prv_cy_r"));
                    row.setDiscountDocApplying(resultSet.getBoolean("dr.b_dsc_doc"));
                    row.setDiscountDoc(resultSet.getDouble("dr.dsc_doc_cy"));
                    row.setSubtotal_r(resultSet.getDouble("dr.sbt_cy_r"));
                    row.setTaxCharged_r(resultSet.getDouble("dr.tax_cha_cy_r"));
                    row.setTaxRetained_r(resultSet.getDouble("dr.tax_ret_cy_r"));
                    row.setTotal_r(resultSet.getDouble("dr.tot_cy_r"));
                    row.setCurrencyCode(resultSet.getString("c.code"));

                    gridRows.add(row);
                }

                moGridMoves.populateGrid(gridRows);
            }
            catch (SQLException e) {
                DLibUtils.showException(this, e);
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
            }
        }
    }

    /*
     * Overrided methods
     */

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_ITM:
                mnItem = (Integer) value;
                renderItem();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void resetForm() {
        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        mnItem = DLibConsts.UNDEFINED;

        moFields.resetFields();
        moGridMoves.clearGridRows();

        if (moIntMoves.getValue() <= 0) {
            moIntMoves.setValue(100);
        }

        renderItem();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbQuery) {
                populateHistory();
            }
        }
    }
}
