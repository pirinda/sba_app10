/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogDpsDependentDocsShow.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import java.util.Vector;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DDbDpsRow;

/**
 *
 * @author Sergio Flores
 */
public class DDialogDpsDependentDocsShow extends DBeanFormDialog {

    private Vector<int[]> mvDependentDpsRowKeys;

    /** Creates new form DDialogDpsDependentDocsShow
     * @param client GUI client.
     */
    public DDialogDpsDependentDocsShow(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DLibConsts.UNDEFINED, DLibConsts.UNDEFINED, "Documentos dependientes");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroup = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        jlUnitCode = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jspSerialNumbers = new javax.swing.JScrollPane();
        jltSerialNumber = new javax.swing.JList();

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 5, 0));
        jPanel2.setLayout(new java.awt.GridLayout(1, 1, 0, 5));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Documentos dependientes:");
        jlCode.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel1.add(jlCode);

        jlUnitCode.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel1.add(jlUnitCode);

        jPanel2.add(jPanel1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel5.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jspSerialNumbers.setPreferredSize(new java.awt.Dimension(100, 100));

        jltSerialNumber.setBackground(java.awt.SystemColor.control);
        jltSerialNumber.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jspSerialNumbers.setViewportView(jltSerialNumber);

        jPanel5.add(jspSerialNumbers, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);

        mvDependentDpsRowKeys = new Vector<int[]>();

        jbSave.setEnabled(false);
        jbSave.setText(DGuiConsts.TXT_BTN_OK);
        jbCancel.setText(DGuiConsts.TXT_BTN_CLOSE);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jbCancel.requestFocus();
        }
    }

    private void renderDependentDocs() {
        DDbDps dps = null;
        DDbDpsRow dpsRow = null;
        Vector<String> docs = new Vector<String>();

        for (int[] key : mvDependentDpsRowKeys) {
            dps = (DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, new int[] { key[0] });
            dpsRow = dps.getChildRow(key);

            docs.add(miClient.getSession().readField(DModConsts.TS_DPS_TP, dps.getDpsTypeKey(), DDbRegistry.FIELD_NAME) + ": " +
                    dps.getDpsNumber() + "; " +
                    DLibUtils.DateFormatDate.format(dps.getDate()) + "; " +
                    DLibUtils.getDecimalFormatAmount().format(dps.getTotalCy_r()) + " " + miClient.getSession().getSessionCustom().getCurrencyCode(dps.getCurrencyKey()) + "; " +
                    "Partida: " + dpsRow.getCode() + " - " + dpsRow.getName() + "; " +
                    DLibUtils.getDecimalFormatQuantity().format(dpsRow.getQuantity()) + " " + dpsRow.getDbUnitCode() + "; " +
                    DLibUtils.getDecimalFormatAmount().format(dpsRow.getTotalCy_r()) + " " + miClient.getSession().getSessionCustom().getCurrencyCode(dps.getCurrencyKey()) +
                    (dpsRow.getAdjustmentTypeKey() == null ? "" : "; " + miClient.getSession().readField(DModConsts.TS_ADJ_TP, dpsRow.getAdjustmentTypeKey(), DDbRegistry.FIELD_NAME)));
        }

        jltSerialNumber.setListData(docs);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup jButtonGroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlUnitCode;
    private javax.swing.JList jltSerialNumber;
    private javax.swing.JScrollPane jspSerialNumbers;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void resetForm() {
        removeAllListeners();
        reloadCatalogues();

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        mvDependentDpsRowKeys.clear();
        renderDependentDocs();

        addAllListeners();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_VEC_DPS_ROW:
                mvDependentDpsRowKeys.clear();
                mvDependentDpsRowKeys.addAll((Vector<int[]>) value);
                renderDependentDocs();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
