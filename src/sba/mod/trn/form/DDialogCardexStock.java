/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogCardexStock.java
 *
 * Created on 20/12/2011, 04:23:05 PM
 */

package sba.mod.trn.form;

import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.trn.db.DDbLot;
import sba.mod.trn.db.DRowCardexStock;
import sba.mod.trn.db.DTrnImportDeclaration;

/**
 *
 * @author Sergio Flores
 */
public class DDialogCardexStock extends DBeanFormDialog {

    private int mnModality;
    private int mnYear;
    private Date mtDateCutOff;
    private int[] manCompanyBranchKey;
    private int[] manWarehouseKey;
    private int mnItem;
    private int mnUnit;
    private int mnLot;
    private String msSerialNumber;
    private String msImportDeclaration;
    private Date mtImportDeclarationDate;
    private DGridPaneForm moGridMoves;

    /** Creates new form DDialogCardexStock
     * @param client GUI client.
     * @param modality Cardex modality. Constants defined in DUtilConsts (PER_...).
     */
    public DDialogCardexStock(DGuiClient client, int modality) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.TX_STK_BAL, DLibConsts.UNDEFINED, "Tarjeta auxiliar");
        mnModality = modality;
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItem = new javax.swing.JTextField();
        jtfItemCode = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlCompanyBranch = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfCompanyBranchCode = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlBranchWarehouse = new javax.swing.JLabel();
        jtfBranchWarehouse = new javax.swing.JTextField();
        jtfBranchWarehouseCode = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlLot = new javax.swing.JLabel();
        jtfLot = new javax.swing.JTextField();
        jtfLotDateExpiration = new javax.swing.JTextField();
        jlSerialNumber = new javax.swing.JLabel();
        jtfSerialNumber = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlImportDeclaration = new javax.swing.JLabel();
        jtfImportDeclaration = new javax.swing.JTextField();
        jtfImportDeclarationDate = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlDateCutOff = new javax.swing.JLabel();
        jtfDateCutOff = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlStock = new javax.swing.JLabel();
        moUnitStock = new sba.lib.gui.bean.DBeanCompoundField();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jpMoves = new javax.swing.JPanel();

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la búsqueda:"));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jlItem);

        jtfItem.setEditable(false);
        jtfItem.setText("TEXT");
        jtfItem.setToolTipText("Nombre");
        jtfItem.setFocusable(false);
        jtfItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jtfItem);

        jtfItemCode.setEditable(false);
        jtfItemCode.setText("TEXT");
        jtfItemCode.setToolTipText("Código");
        jtfItemCode.setFocusable(false);
        jtfItemCode.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jtfItemCode);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompanyBranch.setText("Sucursal:");
        jlCompanyBranch.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jlCompanyBranch);

        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("TEXT");
        jtfCompanyBranch.setToolTipText("Nombre");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(245, 23));
        jPanel4.add(jtfCompanyBranch);

        jtfCompanyBranchCode.setEditable(false);
        jtfCompanyBranchCode.setText("TEXT");
        jtfCompanyBranchCode.setToolTipText("Código");
        jtfCompanyBranchCode.setFocusable(false);
        jtfCompanyBranchCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(jtfCompanyBranchCode);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBranchWarehouse.setText("Almacén:");
        jlBranchWarehouse.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jlBranchWarehouse);

        jtfBranchWarehouse.setEditable(false);
        jtfBranchWarehouse.setText("TEXT");
        jtfBranchWarehouse.setToolTipText("Nombre");
        jtfBranchWarehouse.setFocusable(false);
        jtfBranchWarehouse.setPreferredSize(new java.awt.Dimension(245, 23));
        jPanel5.add(jtfBranchWarehouse);

        jtfBranchWarehouseCode.setEditable(false);
        jtfBranchWarehouseCode.setText("TEXT");
        jtfBranchWarehouseCode.setToolTipText("Código");
        jtfBranchWarehouseCode.setFocusable(false);
        jtfBranchWarehouseCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel5.add(jtfBranchWarehouseCode);

        jPanel1.add(jPanel5);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLot.setText("Lote:");
        jlLot.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jlLot);

        jtfLot.setEditable(false);
        jtfLot.setText("TEXT");
        jtfLot.setToolTipText("Lote");
        jtfLot.setFocusable(false);
        jtfLot.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jtfLot);

        jtfLotDateExpiration.setEditable(false);
        jtfLotDateExpiration.setText("00/00/0000");
        jtfLotDateExpiration.setToolTipText("Caducidad");
        jtfLotDateExpiration.setFocusable(false);
        jtfLotDateExpiration.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jtfLotDateExpiration);

        jlSerialNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSerialNumber.setText("Número serie:");
        jlSerialNumber.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel13.add(jlSerialNumber);

        jtfSerialNumber.setEditable(false);
        jtfSerialNumber.setText("TEXT");
        jtfSerialNumber.setToolTipText("Número serie");
        jtfSerialNumber.setFocusable(false);
        jtfSerialNumber.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jtfSerialNumber);

        jPanel1.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlImportDeclaration.setText("Pedimento:");
        jlImportDeclaration.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jlImportDeclaration);

        jtfImportDeclaration.setEditable(false);
        jtfImportDeclaration.setText("TEXT");
        jtfImportDeclaration.setToolTipText("Nombre");
        jtfImportDeclaration.setFocusable(false);
        jtfImportDeclaration.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jtfImportDeclaration);

        jtfImportDeclarationDate.setEditable(false);
        jtfImportDeclarationDate.setText("00/00/0000");
        jtfImportDeclarationDate.setToolTipText("Importación");
        jtfImportDeclarationDate.setFocusable(false);
        jtfImportDeclarationDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jtfImportDeclarationDate);

        jPanel1.add(jPanel14);

        jPanel7.add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutOff.setText("Fecha corte:");
        jlDateCutOff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlDateCutOff);

        jtfDateCutOff.setEditable(false);
        jtfDateCutOff.setText("00/00/0000");
        jtfDateCutOff.setFocusable(false);
        jtfDateCutOff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jtfDateCutOff);

        jPanel6.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStock.setText("Existencia:");
        jlStock.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlStock);
        jPanel9.add(moUnitStock);

        jPanel6.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel6.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel6.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel6.add(jPanel12);

        jPanel7.add(jPanel6, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel7, java.awt.BorderLayout.NORTH);

        jpMoves.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos de almacén:"));
        jpMoves.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpMoves, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 960, 600);

        moUnitStock.setCompoundFieldSettings(miClient);
        moUnitStock.getField().setDecimalSettings(DGuiUtils.getLabelName(jlStock.getText()), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moUnitStock.getField().setEditable(false);

        jbSave.setEnabled(false);
        jbSave.setText(DGuiConsts.TXT_BTN_OK);
        jbCancel.setText(DGuiConsts.TXT_BTN_CLOSE);

        moGridMoves = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle, new DGuiParams(mnModality)) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[12];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_2B, "#");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DATE, DGridConsts.COL_TITLE_DATE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Movimiento", 125);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Entrada");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Salida");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Existencia");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_REG_NUM, DGridConsts.COL_TITLE_NUM + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DATE, DGridConsts.COL_TITLE_DATE + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, "Sucursal empresa");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_BPR_S, DGridConsts.COL_TITLE_NAME + " asociado negocios");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_BPR, DGridConsts.COL_TITLE_CODE + " asociado negocios");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpMoves.add(moGridMoves, BorderLayout.CENTER);

        mvFormGrids.add(moGridMoves);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jbCancel.requestFocus();
        }
    }

    private void renderDateCutOff() {
        if (mtDateCutOff == null) {
            mnYear = 0;
            jtfDateCutOff.setText("");
        }
        else {
            mnYear = DLibTimeUtils.digestYear(mtDateCutOff)[0];
            jtfDateCutOff.setText(DLibUtils.DateFormatDate.format(mtDateCutOff));
        }
    }

    private void renderCompanyBranch() {
        if (manCompanyBranchKey == null) {
            jtfCompanyBranch.setText("");
            jtfCompanyBranchCode.setText("");
        }
        else {
            jtfCompanyBranch.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, manCompanyBranchKey, DDbRegistry.FIELD_NAME));
            jtfCompanyBranch.setCaretPosition(0);
            jtfCompanyBranchCode.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, manCompanyBranchKey, DDbRegistry.FIELD_CODE));
            jtfCompanyBranchCode.setCaretPosition(0);
        }
    }

    private void renderWarehouse() {
        if (manWarehouseKey == null) {
            jtfBranchWarehouse.setText("");
            jtfBranchWarehouseCode.setText("");
        }
        else {
            jtfBranchWarehouse.setText((String) miClient.getSession().readField(DModConsts.CU_WAH, manWarehouseKey, DDbRegistry.FIELD_NAME));
            jtfBranchWarehouse.setCaretPosition(0);
            jtfBranchWarehouseCode.setText((String) miClient.getSession().readField(DModConsts.CU_WAH, manWarehouseKey, DDbRegistry.FIELD_CODE));
            jtfBranchWarehouseCode.setCaretPosition(0);
        }
    }

    private void renderItem() {
        if (mnItem == DLibConsts.UNDEFINED) {
            jtfItem.setText("");
            jtfItemCode.setText("");
        }
        else {
            jtfItem.setText((String) miClient.getSession().readField(DModConsts.IU_ITM, new int[] { mnItem }, DDbRegistry.FIELD_NAME));
            jtfItem.setCaretPosition(0);
            jtfItemCode.setText((String) miClient.getSession().readField(DModConsts.IU_ITM, new int[] { mnItem }, DDbRegistry.FIELD_CODE));
            jtfItemCode.setCaretPosition(0);
        }
    }

    private void renderUnit() {
        if (mnUnit == DLibConsts.UNDEFINED) {
            moUnitStock.setCompoundText("");
        }
        else {
            moUnitStock.setCompoundText((String) miClient.getSession().readField(DModConsts.IU_UNT, new int[] { mnUnit }, DDbRegistry.FIELD_CODE));
        }
    }

    private void renderLot() {
        DDbLot lot = null;

        if (mnLot == DLibConsts.UNDEFINED) {
            jtfLot.setText(DUtilConsts.NON_APPLYING);
            jtfLotDateExpiration.setText("");
        }
        else {
            lot = (DDbLot) miClient.getSession().readRegistry(DModConsts.T_LOT, new int[] { mnItem, mnUnit, mnLot });

            jtfLot.setText(lot.getLot());
            jtfLot.setCaretPosition(0);
            jtfLotDateExpiration.setText(lot.getDateExpiration_n() == null ? "" : DLibUtils.DateFormatDate.format(lot.getDateExpiration_n()));
            jtfLotDateExpiration.setCaretPosition(0);
        }
    }

    private void renderSerialNumber() {
        jtfSerialNumber.setText(msSerialNumber);
        jtfSerialNumber.setCaretPosition(0);
    }

    private void renderImportDeclaration() {
        jtfImportDeclaration.setText(msImportDeclaration);
        jtfImportDeclaration.setCaretPosition(0);
        jtfImportDeclarationDate.setText(mtImportDeclarationDate == null ? "" : DLibUtils.DateFormatDate.format(mtImportDeclarationDate));
        jtfImportDeclarationDate.setCaretPosition(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlBranchWarehouse;
    private javax.swing.JLabel jlCompanyBranch;
    private javax.swing.JLabel jlDateCutOff;
    private javax.swing.JLabel jlImportDeclaration;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLot;
    private javax.swing.JLabel jlSerialNumber;
    private javax.swing.JLabel jlStock;
    private javax.swing.JPanel jpMoves;
    private javax.swing.JTextField jtfBranchWarehouse;
    private javax.swing.JTextField jtfBranchWarehouseCode;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfCompanyBranchCode;
    private javax.swing.JTextField jtfDateCutOff;
    private javax.swing.JTextField jtfImportDeclaration;
    private javax.swing.JTextField jtfImportDeclarationDate;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfItemCode;
    private javax.swing.JTextField jtfLot;
    private javax.swing.JTextField jtfLotDateExpiration;
    private javax.swing.JTextField jtfSerialNumber;
    private sba.lib.gui.bean.DBeanCompoundField moUnitStock;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods
     */

    public void populateCardex() {
        int move = 0;
        double stock = 0;
        String sql = "";
        ResultSet resultSet = null;
        DRowCardexStock row = null;
        Vector<DGridRow> gridRows = new Vector<DGridRow>();

        try {
            // Opening stock:

            sql = "SELECT SUM(stk.mov_in - stk.mov_out) AS f_stk " +
                    "FROM " + DModConsts.TablesMap.get(DModConsts.T_STK) + " AS stk " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.TS_IOG_TP) + " AS mt ON " +
                    "stk.fk_iog_ct = mt.id_iog_ct AND stk.fk_iog_cl = mt.id_iog_cl AND stk.fk_iog_tp = mt.id_iog_tp AND " +
                    "stk.b_del = 0 AND stk.id_yer = " + mnYear + " AND " +
                    "stk.dt < '" + DLibUtils.DbmsDateFormatDate.format(DLibTimeUtils.getBeginOfYear(mtDateCutOff)) + "' AND " +
                    "stk.id_itm = " + mnItem + " AND " +
                    "stk.id_unt = " + mnUnit + " " +
                    (mnLot == DLibConsts.UNDEFINED ? "" : "AND stk.id_lot = " + mnLot + " ") +
                    (manCompanyBranchKey == null ? "" : "AND stk.id_bpr = " + manCompanyBranchKey[0] + " AND stk.id_bra = " + manCompanyBranchKey[1] + " ") +
                    (manWarehouseKey == null ? "" : "AND stk.id_bpr = " + manWarehouseKey[0] + " AND stk.id_bra = " + manWarehouseKey[1] + " AND stk.id_wah = " + manWarehouseKey[2] + " ") +
                    (msSerialNumber.length() == 0 ? "" : "AND stk.snr = '" + msSerialNumber + "' ") +
                    (msImportDeclaration.length() == 0 ? "" : "AND stk.imp_dec = '" + msImportDeclaration + "' AND stk.imp_dec_dt_n = '" + DLibUtils.DbmsDateFormatDate.format(mtImportDeclarationDate) + "' ");
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                row = new DRowCardexStock();

                row.setMove(move++);
                row.setDate(DLibTimeUtils.getBeginOfYear(mtDateCutOff));
                row.setIogMoveType(DUtilConsts.OPEN_BALANCE);
                row.setMoveIn(0);
                row.setMoveOut(0);

                stock += resultSet.getDouble("f_stk");
                row.setStock(stock);

                gridRows.add(row);
            }

            // Stock moves:

            sql = "SELECT stk.id_yer, stk.id_itm, stk.id_unt, stk.id_bpr, stk.id_bra, stk.id_wah, stk.id_lot, " +
                    "stk.dt, stk.mov_in, stk.mov_out, mt.name, " +
                    "CONCAT(d.ser, IF(LENGTH(d.ser) = 0, '', '-'), d.num) AS f_dps_num, d.dt, d.fk_dps_ct, " +
                    "dt.code, cb.code, b.name, bcv.code, bcc.code " +
                    "FROM " + DModConsts.TablesMap.get(DModConsts.T_STK) + " AS stk " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.TS_IOG_TP) + " AS mt ON " +
                    "stk.fk_iog_ct = mt.id_iog_ct AND stk.fk_iog_cl = mt.id_iog_cl AND stk.fk_iog_tp = mt.id_iog_tp AND " +
                    "stk.b_del = 0 AND stk.id_yer = " + mnYear + " AND " +
                    "stk.dt BETWEEN '" + DLibUtils.DbmsDateFormatDate.format(DLibTimeUtils.getBeginOfYear(mtDateCutOff)) + "' AND '" + DLibUtils.DbmsDateFormatDate.format(mtDateCutOff) + "' AND " +
                    "stk.id_itm = " + mnItem + " AND " +
                    "stk.id_unt = " + mnUnit + " " +
                    (mnLot == DLibConsts.UNDEFINED ? "" : "AND stk.id_lot = " + mnLot + " ") +
                    (manCompanyBranchKey == null ? "" : "AND stk.id_bpr = " + manCompanyBranchKey[0] + " AND stk.id_bra = " + manCompanyBranchKey[1] + " ") +
                    (manWarehouseKey == null ? "" : "AND stk.id_bpr = " + manWarehouseKey[0] + " AND stk.id_bra = " + manWarehouseKey[1] + " AND stk.id_wah = " + manWarehouseKey[2] + " ") +
                    (msSerialNumber.length() == 0 ? "" : "AND stk.snr = '" + msSerialNumber + "' ") +
                    (msImportDeclaration.length() == 0 ? "" : "AND stk.imp_dec = '" + msImportDeclaration + "' AND stk.imp_dec_dt_n = '" + DLibUtils.DbmsDateFormatDate.format(mtImportDeclarationDate) + "' ") +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.T_DPS) + " AS d ON " +
                    "stk.fk_dps_inv_dps_n = d.id_dps " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.TS_DPS_TP) + " AS dt ON " +
                    "d.fk_dps_ct = dt.id_dps_ct AND d.fk_dps_cl = dt.id_dps_cl AND d.fk_dps_tp = dt.id_dps_tp " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BRA) + " AS cb ON " +
                    "d.fk_own_bpr = cb.id_bpr AND d.fk_own_bra = cb.id_bra " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BPR) + " AS b ON " +
                    "d.fk_bpr_bpr = b.id_bpr " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BPR_CFG) + " AS bcv ON " +
                    "d.fk_bpr_bpr = bcv.id_bpr AND bcv.id_bpr_cl = " + DModSysConsts.BS_BPR_CL_VEN + " " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BPR_CFG) + " AS bcc ON " +
                    "d.fk_bpr_bpr = bcc.id_bpr AND bcc.id_bpr_cl = " + DModSysConsts.BS_BPR_CL_CUS + " " +
                    "ORDER BY stk.dt, stk.id_yer, stk.id_itm, stk.id_unt, stk.id_bpr, stk.id_bra, stk.id_wah, stk.id_lot ";
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                row = new DRowCardexStock();

                row.setMove(move++);
                row.setDate(resultSet.getDate("stk.dt"));
                row.setIogMoveType(resultSet.getString("mt.name"));
                row.setMoveIn(resultSet.getDouble("stk.mov_in"));
                row.setMoveOut(resultSet.getDouble("stk.mov_out"));
                row.setDpsNumber(resultSet.getString("f_dps_num"));
                row.setDpsType(resultSet.getString("dt.code"));
                row.setDpsDate(resultSet.getDate("d.dt"));
                row.setDpsCompanyBranchCode(resultSet.getString("cb.code"));
                row.setDpsBizPartner(resultSet.getString("b.name"));
                row.setDpsBizPartnerCode(resultSet.getInt("d.fk_dps_ct") == DModSysConsts.TS_DPS_CT_PUR ? resultSet.getString("bcv.code") : resultSet.getString("bcc.code"));

                stock += resultSet.getDouble("stk.mov_in") - resultSet.getDouble("stk.mov_out");
                row.setStock(stock);

                gridRows.add(row);
            }

            moGridMoves.populateGrid(gridRows);
            moUnitStock.getField().setValue(stock);
        }
        catch (SQLException e) {
            DLibUtils.showException(this, e);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    /*
     * Overrided methods
     */

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_DATE:
                mtDateCutOff = (Date) value;
                renderDateCutOff();
                break;
            case DModSysConsts.PARAM_BPR_BRA:
                manCompanyBranchKey = (int[]) value;
                renderCompanyBranch();
                break;
            case DModSysConsts.PARAM_BRA_WAH:
                manWarehouseKey = (int[]) value;
                renderWarehouse();
                break;
            case DModSysConsts.PARAM_ITM:
                mnItem = (Integer) value;
                renderItem();
                break;
            case DModSysConsts.PARAM_ITM_UNT:
                mnUnit = (Integer) value;
                renderUnit();
                break;
            case DModSysConsts.PARAM_LOT_KEY:
                mnItem = ((int[]) value)[0];
                mnUnit = ((int[]) value)[1];
                mnLot = ((int[]) value)[2];
                renderItem();
                renderUnit();
                renderLot();
                break;
            case DModSysConsts.PARAM_SNR:
                msSerialNumber = (String) value;
                renderSerialNumber();
                break;
            case DModSysConsts.PARAM_IMP_DEC:
                msImportDeclaration = ((DTrnImportDeclaration) value).getNumber();
                mtImportDeclarationDate = ((DTrnImportDeclaration) value).getDate();
                renderImportDeclaration();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void resetForm() {
        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        mnYear = 0;
        mtDateCutOff = null;
        manCompanyBranchKey = null;
        manWarehouseKey = null;
        mnItem = DLibConsts.UNDEFINED;
        mnUnit = DLibConsts.UNDEFINED;
        mnLot = DLibConsts.UNDEFINED;
        msSerialNumber = "";
        msImportDeclaration = "";
        mtImportDeclarationDate = null;

        moGridMoves.clearGridRows();

        renderDateCutOff();
        renderCompanyBranch();
        renderWarehouse();
        renderItem();
        renderUnit();
        renderLot();
        renderSerialNumber();
        renderImportDeclaration();
    }
}
