/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormXmlSignatureMove.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.trn.form;

import sba.gui.DGuiClientUtils;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.trn.db.DDbXmlSignatureMove;

/**
 *
 * @author Sergio Flores
 */
public class DFormXmlSignatureMove extends DBeanForm {

    private DDbXmlSignatureMove moRegistry;
    private DGuiFieldKeyGroup moKeyGroup;

    /** Creates new form DFormXmlSignatureMove */
    public DFormXmlSignatureMove(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.T_XSM, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlXmlSignatureProvider = new javax.swing.JLabel();
        moKeyXmlSignatureProvider = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel4 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        moIntQuantity = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel5 = new javax.swing.JPanel();
        jlMoveClass = new javax.swing.JLabel();
        moKeyMoveClass = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlMoveType = new javax.swing.JLabel();
        moKeyMoveType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel2 = new javax.swing.JPanel();
        jlSignatureBranch = new javax.swing.JLabel();
        moKeySignatureBranch = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlStampCode = new javax.swing.JLabel();
        moTextStampCode = new sba.lib.gui.bean.DBeanFieldText();

        jpContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlXmlSignatureProvider.setForeground(java.awt.Color.blue);
        jlXmlSignatureProvider.setText("Proveedor:*");
        jlXmlSignatureProvider.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlXmlSignatureProvider);

        moKeyXmlSignatureProvider.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyXmlSignatureProvider);

        jPanel1.add(jPanel7);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDate);
        jPanel3.add(moDateDate);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Cantidad:*");
        jlQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlQuantity);

        moIntQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(moIntQuantity);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMoveClass.setText("Clase movimiento:*");
        jlMoveClass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlMoveClass);

        moKeyMoveClass.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moKeyMoveClass);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMoveType.setText("Tipo movimiento:*");
        jlMoveType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlMoveType);

        moKeyMoveType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyMoveType);

        jPanel1.add(jPanel6);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSignatureBranch.setText("Sucursal empresa:");
        jlSignatureBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlSignatureBranch);

        moKeySignatureBranch.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel2.add(moKeySignatureBranch);

        jPanel1.add(jPanel2);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStampCode.setForeground(new java.awt.Color(0, 153, 153));
        jlStampCode.setText("Código activación:*");
        jlStampCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlStampCode);

        moTextStampCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(moTextStampCode);

        jPanel1.add(jPanel8);

        jpContainer.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 480, 300);
        
        moKeyXmlSignatureProvider.setKeySettings(miClient, DGuiUtils.getLabelName(jlXmlSignatureProvider), true);
        moDateDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDate), true);
        moIntQuantity.setIntegerSettings(DGuiUtils.getLabelName(jlQuantity), DGuiConsts.GUI_TYPE_INT, true);
        moKeyMoveClass.setKeySettings(miClient, DGuiUtils.getLabelName(jlMoveClass), true);
        moKeyMoveType.setKeySettings(miClient, DGuiUtils.getLabelName(jlMoveType), true);
        moKeySignatureBranch.setKeySettings(miClient, DGuiUtils.getLabelName(jlSignatureBranch), false);
        moTextStampCode.setTextSettings(DGuiUtils.getLabelName(jlStampCode), 50);
        moTextStampCode.setTextCaseType(DLibConsts.UNDEFINED);
        
        moFields.addField(moKeyXmlSignatureProvider);
        moFields.addField(moDateDate);
        moFields.addField(moIntQuantity);
        moFields.addField(moKeyMoveClass);
        moFields.addField(moKeyMoveType);
        moFields.addField(moKeySignatureBranch);
        moFields.addField(moTextStampCode);
        
        moFields.setFormButton(jbSave);
        
        moKeyGroup = new DGuiFieldKeyGroup(miClient);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlMoveClass;
    private javax.swing.JLabel jlMoveType;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlSignatureBranch;
    private javax.swing.JLabel jlStampCode;
    private javax.swing.JLabel jlXmlSignatureProvider;
    private javax.swing.JPanel jpContainer;
    private sba.lib.gui.bean.DBeanFieldDate moDateDate;
    private sba.lib.gui.bean.DBeanFieldInteger moIntQuantity;
    private sba.lib.gui.bean.DBeanFieldKey moKeyMoveClass;
    private sba.lib.gui.bean.DBeanFieldKey moKeyMoveType;
    private sba.lib.gui.bean.DBeanFieldKey moKeySignatureBranch;
    private sba.lib.gui.bean.DBeanFieldKey moKeyXmlSignatureProvider;
    private sba.lib.gui.bean.DBeanFieldText moTextStampCode;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyXmlSignatureProvider, DModConsts.CS_XSP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeySignatureBranch, DModConsts.BU_BRA, DLibConsts.UNDEFINED, new DGuiParams(new int[] { DUtilConsts.BPR_CO_ID }));
        
        moKeyGroup.initGroup();
        moKeyGroup.addFieldKey(moKeyMoveClass, DModConsts.TS_XSM_CL, DLibConsts.UNDEFINED, null);
        moKeyGroup.addFieldKey(moKeyMoveType, DModConsts.TS_XSM_TP, DLibConsts.UNDEFINED, null);
        moKeyGroup.populateCatalogues();
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbXmlSignatureMove) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyXmlSignatureProvider.setValue(new int[] { moRegistry.getPkXmlSignatureProviderId() });
        moDateDate.setValue(moRegistry.getDate());
        moIntQuantity.setValue(moRegistry.getFkXsmClassId() == DModSysConsts.TS_XSM_CL_IN ? moRegistry.getMoveIn() : moRegistry.getMoveOut());
        moKeyMoveClass.setValue(new int[] { moRegistry.getFkXsmClassId() });
        moKeyMoveType.setValue(new int[] { moRegistry.getFkXsmClassId(), moRegistry.getFkXsmTypeId() });
        moKeySignatureBranch.setValue(new int[] { moRegistry.getFkSignatureBizPartnerId_n(), moRegistry.getFkSignatureBranchId_n() });
        moTextStampCode.setValue("");

        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
            moKeyMoveType.setEnabled(false);
        }
        else {
            moKeyXmlSignatureProvider.setEnabled(false);
        }

        addAllListeners();
    }

    @Override
    public DDbXmlSignatureMove getRegistry() throws Exception {
        DDbXmlSignatureMove registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkXmlSignatureProviderId(moKeyXmlSignatureProvider.getValue()[0]);
            //registry.setPkMoveId(...);
        }
        
        registry.setDate(moDateDate.getValue());
        
        if (moKeyMoveClass.getValue()[0] == DModSysConsts.TS_XSM_CL_IN) {
            registry.setMoveIn(moIntQuantity.getValue());
            registry.setMoveOut(0);
        }
        else {
            registry.setMoveIn(0);
            registry.setMoveOut(moIntQuantity.getValue());
        }
        
        //registry.setDeleted(...);
        registry.setSystem(false);
        registry.setFkXsmClassId(moKeyMoveType.getValue()[0]);
        registry.setFkXsmTypeId(moKeyMoveType.getValue()[1]);
        registry.setFkSignatureBizPartnerId_n(moKeySignatureBranch.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeySignatureBranch.getValue()[0]);
        registry.setFkSignatureBranchId_n(moKeySignatureBranch.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeySignatureBranch.getValue()[1]);
        registry.setFkDpsId_n(DLibConsts.UNDEFINED);

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        String stampCode = "";
        DGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moKeyXmlSignatureProvider.getValue()[0] == DModSysConsts.CS_XSP_NA) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + " '" + DGuiUtils.getLabelName(jlXmlSignatureProvider) + "'.");
                validation.setComponent(moKeyXmlSignatureProvider);
            }
            else {
                stampCode = DGuiClientUtils.generateStampCode(moDateDate.getValue(), moIntQuantity.getValue());
                
                if (moTextStampCode.getValue().compareTo(stampCode) != 0) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + " '" + DGuiUtils.getLabelName(jlStampCode) + "'.");
                    validation.setComponent(moTextStampCode);
                }
            }
        }

        return validation;
    }
}
