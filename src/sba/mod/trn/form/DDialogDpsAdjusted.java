/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogDpsAdjusted.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import cfd.ver33.DCfdi33Catalogs;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.grid.DGridUtils;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.lib.img.DImgConsts;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DDbDpsRow;
import sba.mod.trn.db.DRowDpsRowAdjusted;
import sba.mod.trn.db.DTrnStockMove;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DDialogDpsAdjusted extends DBeanFormDialog implements ActionListener, ItemListener, ListSelectionListener, CellEditorListener {

    private static final int COL_QTY_ADJ = 4;
    private static final int COL_TOT_ADJ = 7;

    private int mnYear;
    private int[] manAdjustmentClassKey;
    private DDbDps moDps;
    private DDbDps moDpsAdjustment;
    private DDialogLot moDialogLot;
    private DDialogLotShow moDialogLotShowAvailable;
    private DDialogLotShow moDialogLotShowAdjusted;
    private DDialogSerialNumber moDialogSerialNumber;
    private DDialogSerialNumberShow moDialogSerialNumberShowAvailable;
    private DDialogSerialNumberShow moDialogSerialNumberShowAdjusted;
    private JButton moButtonShowLotAvailable;
    private JButton moButtonShowLotAdjusted;
    private JButton moButtonShowSerialNumberAvailable;
    private JButton moButtonShowSerialNumberAdjusted;

    private DGridPaneForm moGridAdjustment;

    /** Creates new form DDialogDpsAdjusted
     * @param client GUI client.
     * @param type XType of DPS adjustment. Constants defined in DModConsts (TX_ADJ_...).
     * @param subtype Category of DPS. Constants defined in DModSysConsts (TS_DPS_CT_...).
     */
    public DDialogDpsAdjusted(DGuiClient client, int type, int subtype) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, type, subtype, "Ajuste de documento");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlDps = new javax.swing.JLabel();
        moKeyDps = new sba.lib.gui.bean.DBeanFieldKey();
        jtbDps = new javax.swing.JToggleButton();
        jPanel19 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrency = new javax.swing.JTextField();
        jtfExchangeRate = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jlAdjustmentCategory = new javax.swing.JLabel();
        jtfAdjustmentCategory = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jlAdjustmentClass = new javax.swing.JLabel();
        jtfAdjustmentClass = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jlAdjustmentType = new javax.swing.JLabel();
        moKeyAdjustmentType = new sba.lib.gui.bean.DBeanFieldKey();
        moPanelDps = new sba.mod.trn.form.DPanelDps();
        jpDpsRows = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlQuantityOriginal = new javax.swing.JLabel();
        moUnitQuantityOriginal = new sba.lib.gui.bean.DBeanCompoundField();
        jlTotalOriginal = new javax.swing.JLabel();
        moCurTotalOriginal = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel7 = new javax.swing.JPanel();
        jlQuantityInc = new javax.swing.JLabel();
        moUnitQuantityInc = new sba.lib.gui.bean.DBeanCompoundField();
        jlTotalInc = new javax.swing.JLabel();
        moCurTotalInc = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel8 = new javax.swing.JPanel();
        jlQuantityDec = new javax.swing.JLabel();
        moUnitQuantityDec = new sba.lib.gui.bean.DBeanCompoundField();
        jlTotalDec = new javax.swing.JLabel();
        moCurTotalDec = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel9 = new javax.swing.JPanel();
        jlQuantityAvailable = new javax.swing.JLabel();
        moUnitQuantityAvailable = new sba.lib.gui.bean.DBeanCompoundField();
        jlTotalAvailable = new javax.swing.JLabel();
        moCurTotalAvailable = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel11 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jbAdjustAll = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jbClearAll = new javax.swing.JButton();

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento a ajustar:"));
        jpDps.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel15.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDps.setText("Documento:*");
        jlDps.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jlDps);

        moKeyDps.setPreferredSize(new java.awt.Dimension(237, 23));
        jPanel15.add(moKeyDps);

        jtbDps.setText("+");
        jtbDps.setToolTipText("Todos los documentos");
        jtbDps.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jtbDps.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jtbDps);

        jPanel14.add(jPanel15);

        jPanel19.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlCurrency);

        jtfCurrency.setEditable(false);
        jtfCurrency.setText("TEXT");
        jtfCurrency.setFocusable(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel19.add(jtfCurrency);

        jtfExchangeRate.setEditable(false);
        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("0.0000");
        jtfExchangeRate.setToolTipText("Tipo de cambio");
        jtfExchangeRate.setFocusable(false);
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel19.add(jtfExchangeRate);

        jPanel14.add(jPanel19);

        jPanel18.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlAdjustmentCategory.setText("Cat. ajuste:");
        jlAdjustmentCategory.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlAdjustmentCategory);

        jtfAdjustmentCategory.setEditable(false);
        jtfAdjustmentCategory.setText("TEXT");
        jtfAdjustmentCategory.setFocusable(false);
        jtfAdjustmentCategory.setPreferredSize(new java.awt.Dimension(265, 23));
        jPanel18.add(jtfAdjustmentCategory);

        jPanel14.add(jPanel18);

        jPanel2.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlAdjustmentClass.setText("Clase ajuste:");
        jlAdjustmentClass.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jlAdjustmentClass);

        jtfAdjustmentClass.setEditable(false);
        jtfAdjustmentClass.setText("TEXT");
        jtfAdjustmentClass.setFocusable(false);
        jtfAdjustmentClass.setPreferredSize(new java.awt.Dimension(265, 23));
        jPanel2.add(jtfAdjustmentClass);

        jPanel14.add(jPanel2);

        jPanel17.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlAdjustmentType.setText("Tipo ajuste:*");
        jlAdjustmentType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jlAdjustmentType);

        moKeyAdjustmentType.setPreferredSize(new java.awt.Dimension(265, 23));
        jPanel17.add(moKeyAdjustmentType);

        jPanel14.add(jPanel17);

        jPanel16.add(jPanel14, java.awt.BorderLayout.NORTH);

        jpDps.add(jPanel16, java.awt.BorderLayout.WEST);
        jpDps.add(moPanelDps, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.NORTH);

        jpDpsRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas del documento a ajustar:"));
        jpDpsRows.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlQuantityOriginal.setText("+ Cantidad original:");
        jlQuantityOriginal.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlQuantityOriginal);
        jPanel6.add(moUnitQuantityOriginal);

        jlTotalOriginal.setText("+ Total original:");
        jlTotalOriginal.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlTotalOriginal);
        jPanel6.add(moCurTotalOriginal);

        jPanel5.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlQuantityInc.setText("+ Cantidad ajustes inc.:");
        jlQuantityInc.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlQuantityInc);
        jPanel7.add(moUnitQuantityInc);

        jlTotalInc.setText("+ Total ajustes inc.:");
        jlTotalInc.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlTotalInc);
        jPanel7.add(moCurTotalInc);

        jPanel5.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlQuantityDec.setText("- Cantidad ajustes dec.:");
        jlQuantityDec.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlQuantityDec);
        jPanel8.add(moUnitQuantityDec);

        jlTotalDec.setText("- Total ajustes dec.:");
        jlTotalDec.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlTotalDec);
        jPanel8.add(moCurTotalDec);

        jPanel5.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlQuantityAvailable.setText("= Cantidad disponible:");
        jlQuantityAvailable.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlQuantityAvailable);
        jPanel9.add(moUnitQuantityAvailable);

        jlTotalAvailable.setText("= Total disponible:");
        jlTotalAvailable.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlTotalAvailable);
        jPanel9.add(moCurTotalAvailable);

        jPanel5.add(jPanel9);

        jPanel4.add(jPanel5, java.awt.BorderLayout.WEST);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jbAdjustAll.setText("Ajustar todo");
        jbAdjustAll.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jbAdjustAll);

        jPanel10.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jbClearAll.setText("Limpiar todo");
        jbClearAll.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jbClearAll);

        jPanel10.add(jPanel13);

        jPanel11.add(jPanel10, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel11, java.awt.BorderLayout.CENTER);

        jpDpsRows.add(jPanel4, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpDpsRows, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 960, 600);

        mnYear = DLibTimeUtils.digestYear(miClient.getSession().getWorkingDate())[0];

        moKeyDps.setKeySettings(miClient, DGuiUtils.getLabelName(jlDps.getText()), true);
        moKeyAdjustmentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlAdjustmentType.getText()), true);
        moUnitQuantityOriginal.setCompoundFieldSettings(miClient);
        moUnitQuantityOriginal.getField().setDecimalSettings(DGuiUtils.getLabelName(jlQuantityOriginal.getText()), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moUnitQuantityInc.setCompoundFieldSettings(miClient);
        moUnitQuantityInc.getField().setDecimalSettings(DGuiUtils.getLabelName(jlQuantityInc.getText()), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moUnitQuantityDec.setCompoundFieldSettings(miClient);
        moUnitQuantityDec.getField().setDecimalSettings(DGuiUtils.getLabelName(jlQuantityDec.getText()), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moUnitQuantityAvailable.setCompoundFieldSettings(miClient);
        moUnitQuantityAvailable.getField().setDecimalSettings(DGuiUtils.getLabelName(jlQuantityAvailable.getText()), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurTotalOriginal.setCompoundFieldSettings(miClient);
        moCurTotalOriginal.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotalOriginal.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurTotalInc.setCompoundFieldSettings(miClient);
        moCurTotalInc.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotalInc.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurTotalDec.setCompoundFieldSettings(miClient);
        moCurTotalDec.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotalDec.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurTotalAvailable.setCompoundFieldSettings(miClient);
        moCurTotalAvailable.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotalAvailable.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, false);

        moUnitQuantityOriginal.getField().setEditable(false);
        moUnitQuantityInc.getField().setEditable(false);
        moUnitQuantityDec.getField().setEditable(false);
        moUnitQuantityAvailable.getField().setEditable(false);
        moCurTotalOriginal.getField().setEditable(false);
        moCurTotalInc.getField().setEditable(false);
        moCurTotalDec.getField().setEditable(false);
        moCurTotalAvailable.getField().setEditable(false);

        moFields.addField(moKeyDps);
        moFields.addField(moKeyAdjustmentType);
        moFields.setFormButton(jbSave);

        manAdjustmentClassKey = DTrnUtils.getAdjustmentClassByAdjustmentXType(mnFormType);
        jtfAdjustmentCategory.setText((String) miClient.getSession().readField(DModConsts.TS_ADJ_CT, new int[] { manAdjustmentClassKey[0] }, DDbRegistry.FIELD_NAME));
        jtfAdjustmentClass.setText((String) miClient.getSession().readField(DModConsts.TS_ADJ_CL, manAdjustmentClassKey, DDbRegistry.FIELD_NAME));

        if (DTrnUtils.isAdjustmentForMoney(manAdjustmentClassKey)) {
            moDialogLot = null;
            moDialogLotShowAvailable = null;
            moDialogLotShowAdjusted = null;
            moDialogSerialNumber = null;
            moDialogSerialNumberShowAvailable = null;
            moDialogSerialNumberShowAdjusted = null;
            moButtonShowLotAvailable = null;
            moButtonShowLotAdjusted = null;
            moButtonShowSerialNumberAvailable = null;
            moButtonShowSerialNumberAdjusted = null;
        }
        else {
            moDialogLot = new DDialogLot(miClient, DTrnUtils.getDpsXTypeByAdjustmentXType(mnFormType), mnFormSubtype);
            moDialogLotShowAvailable = new DDialogLotShow(miClient, DDialogSerialNumberShow.TYPE_ADJ_AVL);
            moDialogLotShowAdjusted = new DDialogLotShow(miClient, DDialogSerialNumberShow.TYPE_ADJ_ADJ);
            moDialogSerialNumber = new DDialogSerialNumber(miClient, DTrnUtils.getDpsXTypeByAdjustmentXType(mnFormType), mnFormSubtype);
            moDialogSerialNumberShowAvailable = new DDialogSerialNumberShow(miClient, DDialogSerialNumberShow.TYPE_ADJ_AVL);
            moDialogSerialNumberShowAdjusted = new DDialogSerialNumberShow(miClient, DDialogSerialNumberShow.TYPE_ADJ_ADJ);
            moButtonShowLotAvailable = DGridUtils.createButton(miClient.getImageIcon(DImgConsts.CMD_STD_LOT), "Lotes disponibles", this);
            moButtonShowLotAdjusted = DGridUtils.createButton(miClient.getImageIcon(DImgConsts.CMD_STD_ADJ_LOT), "Lotes ajustados", this);
            moButtonShowSerialNumberAvailable = DGridUtils.createButton(miClient.getImageIcon(DImgConsts.CMD_STD_SER_NUM), "Números de serie disponibles", this);
            moButtonShowSerialNumberAdjusted = DGridUtils.createButton(miClient.getImageIcon(DImgConsts.CMD_STD_ADJ_SER_NUM), "Números de serie ajustados", this);
        }

        moPanelDps.setPanelSettings(miClient);
        moPanelDps.enableShowCardex();

        jbSave.setText(DGuiConsts.TXT_BTN_OK);

        moGridAdjustment = new DGridPaneForm(miClient, DLibConsts.UNDEFINED, DLibConsts.UNDEFINED, "Partidas del documento a ajustar") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[8];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_2B, "#");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);

                if (DTrnUtils.isAdjustmentForMoney(manAdjustmentClassKey)) {
                    // Increments or discounts:

                    columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant. disp.");
                    columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant. ajuste");
                    columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                }
                else {
                    // Additions or returns:

                    columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant. disp.");
                    columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cant. ajuste");
                    columns[col++].setEditable(true);
                    columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                }

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Total disp. $ M");
                columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Total ajuste $ M");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        if (DTrnUtils.isAdjustmentForStock(manAdjustmentClassKey)) {
            moGridAdjustment.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(moButtonShowLotAvailable);
            moGridAdjustment.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(moButtonShowLotAdjusted);
            moGridAdjustment.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(moButtonShowSerialNumberAvailable);
            moGridAdjustment.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(moButtonShowSerialNumberAdjusted);
        }

        jpDpsRows.add(moGridAdjustment, BorderLayout.CENTER);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridAdjustment);
        */
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            moKeyDps.requestFocus();
        }
    }

    private DDbDpsRow createDpsRow(DRowDpsRowAdjusted rowAdjusted) {
        double rate = 0;
        DDbDpsRow dpsRow = moDps.getChildRow(rowAdjusted.getRowPrimaryKey());
        DDbDpsRow dpsRowNew = new DDbDpsRow();

        rate = dpsRow.getTotalCy_r() == 0 ? 0 : rowAdjusted.getTotalAdjustedCy() / dpsRow.getTotalCy_r();

        dpsRowNew.setPkDpsId(0);
        dpsRowNew.setPkRowId(0);
        dpsRowNew.setCode(dpsRow.getCode());
        dpsRowNew.setName(dpsRow.getName());
        dpsRowNew.setPredial(dpsRow.getPredial());
        dpsRowNew.setSortingPos(0);
        dpsRowNew.setDiscountDocApplying(false);
        dpsRowNew.setDiscountUnitaryPercentageApplying(false);
        dpsRowNew.setDiscountRowPercentageApplying(false);
        dpsRowNew.setDiscountUnitaryPercentage(0);
        dpsRowNew.setDiscountRowPercentage(0);

        dpsRowNew.setPriceUnitary(0);
        dpsRowNew.setDiscountUnitary(0);
        dpsRowNew.setDiscountRow(0);
        dpsRowNew.setSubtotalProv_r(0);
        dpsRowNew.setDiscountDoc(0);
        dpsRowNew.setSubtotal_r(0);
        dpsRowNew.setTaxCharged_r(0);
        dpsRowNew.setTaxRetained_r(0);
        dpsRowNew.setTotal_r(0);
        dpsRowNew.setPriceUnitaryCalculated_r(0);

        if (DTrnUtils.isAdjustmentForMoney(manAdjustmentClassKey)) {
            // Increments or discounts:

            dpsRowNew.setQuantity(0);
            dpsRowNew.setPriceUnitaryCy(dpsRow.getSubtotalCy_r() * rate);
        }
        else {
            // Additions or returns:

            dpsRowNew.setQuantity(rowAdjusted.getQuantityAdjusted() == 0 ? 1 : rowAdjusted.getQuantityAdjusted());
            dpsRowNew.setPriceUnitaryCy((dpsRow.getSubtotalCy_r() * rate) / (rowAdjusted.getQuantityAdjusted() == 0 ? 1 : rowAdjusted.getQuantityAdjusted()));
        }

        dpsRowNew.setDiscountUnitaryCy(0);
        dpsRowNew.setDiscountRowCy(0);
        dpsRowNew.setSubtotalProvCy_r(dpsRow.getSubtotalCy_r() * rate);
        dpsRowNew.setDiscountDocCy(0);
        dpsRowNew.setSubtotalCy_r(dpsRow.getSubtotalCy_r() * rate);
        dpsRowNew.setTaxChargedCy_r(0);
        dpsRowNew.setTaxRetainedCy_r(0);
        dpsRowNew.setTotalCy_r(0);
        dpsRowNew.setPriceUnitaryCalculatedCy_r(0);

        dpsRowNew.setAuxTotalAdjustedCy(rowAdjusted.getTotalAdjustedCy());     // the keystone when adjusting a DPS

        dpsRowNew.setTaxChargedRate1(dpsRow.getTaxChargedRate1());
        dpsRowNew.setTaxChargedRate2(dpsRow.getTaxChargedRate2());
        dpsRowNew.setTaxChargedRate3(dpsRow.getTaxChargedRate3());
        dpsRowNew.setTaxRetainedRate1(dpsRow.getTaxRetainedRate1());
        dpsRowNew.setTaxRetainedRate2(dpsRow.getTaxRetainedRate2());
        dpsRowNew.setTaxRetainedRate3(dpsRow.getTaxRetainedRate3());
        dpsRowNew.setTaxCharged1(0);
        dpsRowNew.setTaxCharged2(0);
        dpsRowNew.setTaxCharged3(0);
        dpsRowNew.setTaxRetained1(0);
        dpsRowNew.setTaxRetained2(0);
        dpsRowNew.setTaxRetained3(0);
        dpsRowNew.setTaxCharged1Cy(0);
        dpsRowNew.setTaxCharged2Cy(0);
        dpsRowNew.setTaxCharged3Cy(0);
        dpsRowNew.setTaxRetained1Cy(0);
        dpsRowNew.setTaxRetained2Cy(0);
        dpsRowNew.setTaxRetained3Cy(0);
        dpsRowNew.setMeasurementLength(dpsRow.getMeasurementLength() * rate);
        dpsRowNew.setMeasurementSurface(dpsRow.getMeasurementSurface() * rate);
        dpsRowNew.setMeasurementVolume(dpsRow.getMeasurementVolume() * rate);
        dpsRowNew.setMeasurementMass(dpsRow.getMeasurementMass() * rate);
        dpsRowNew.setMeasurementTime(dpsRow.getMeasurementTime() * rate);
        dpsRowNew.setWeightGross(dpsRow.getWeightGross() * rate);
        dpsRowNew.setWeightDelivery(dpsRow.getWeightDelivery() * rate);
        dpsRowNew.setSurplusPercentage(0);
        dpsRowNew.setTaxManual(false);
        dpsRowNew.setInventoriable(dpsRow.isInventoriable() && DTrnUtils.isAdjustmentForStock(manAdjustmentClassKey));
        dpsRowNew.setDeleted(false);
        dpsRowNew.setSystem(false);
        dpsRowNew.setFkAdjustmentCategoryId(moKeyAdjustmentType.getValue()[0]);
        dpsRowNew.setFkAdjustmentClassId(moKeyAdjustmentType.getValue()[1]);
        dpsRowNew.setFkAdjustmentTypeId(moKeyAdjustmentType.getValue()[2]);
        dpsRowNew.setFkRowItemId(dpsRow.getFkRowItemId());
        dpsRowNew.setFkRowUnitId(dpsRow.getFkRowUnitId());
        dpsRowNew.setFkReferenceItemId_n(DLibConsts.UNDEFINED);
        dpsRowNew.setFkReferenceUnitId_n(DLibConsts.UNDEFINED);
        dpsRowNew.setFkTaxRegionId(dpsRow.getFkTaxRegionId());
        dpsRowNew.setFkTaxCharged1Id(dpsRow.getFkTaxCharged1Id());
        dpsRowNew.setFkTaxCharged2Id(dpsRow.getFkTaxCharged2Id());
        dpsRowNew.setFkTaxCharged3Id(dpsRow.getFkTaxCharged3Id());
        dpsRowNew.setFkTaxRetained1Id(dpsRow.getFkTaxRetained1Id());
        dpsRowNew.setFkTaxRetained2Id(dpsRow.getFkTaxRetained2Id());
        dpsRowNew.setFkTaxRetained3Id(dpsRow.getFkTaxRetained3Id());
        dpsRowNew.setFkSourceDpsId_n(dpsRow.getPkDpsId());
        dpsRowNew.setFkSourceRowId_n(dpsRow.getPkRowId());
        dpsRowNew.setFkUserInsertId(DUtilConsts.USR_NA_ID);
        dpsRowNew.setFkUserUpdateId(DUtilConsts.USR_NA_ID);
        dpsRowNew.setTsUserInsert(null);
        dpsRowNew.setTsUserUpdate(null);

        /* 2018-01-14 (Sergio Flores): It seems that ClaveProdServ and ClaveUnidad attributes are fixed in CFDI 3.3 credit notes.
        DDbItem item = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, new int[] { dpsRow.getFkRowItemId() });
        DDbUnit unit = (DDbUnit) miClient.getSession().readRegistry(DModConsts.IU_UNT, new int[] { dpsRow.getFkRowUnitId() });
        dpsRowNew.setDfrItemKey(item.getActualCfdItemKey());
        dpsRowNew.setDfrUnitKey(unit.getCfdUnitKey());
        */
        dpsRowNew.setDfrItemKey(DCfdi33Catalogs.ClaveProdServServsFacturacion); //fixed ClaveProdServ
        dpsRowNew.setDfrUnitKey(DCfdi33Catalogs.ClaveUnidadAct);    //fixed ClaveUnidad
        dpsRowNew.setDfrSourceUuid(moDps.getDfrUuid());
        
        dpsRowNew.setDbUnitCode(dpsRow.getDbUnitCode());
        dpsRowNew.setDbTaxRegimeId(dpsRow.getDbTaxRegimeId());

        if (dpsRowNew.isInventoriable()) {
            dpsRowNew.getAuxStockMoves().addAll(rowAdjusted.getStockMovesAdjusted());
        }

        dpsRowNew.computeTotal(false, false, 0, moDpsAdjustment.getExchangeRate());

        return dpsRowNew;
    }

    private Vector<DDbDpsRow> createDpsRows() {
        DRowDpsRowAdjusted rowAdjusted = null;
        Vector<DDbDpsRow> rows = new Vector<DDbDpsRow>();

        for (DGridRow row : moGridAdjustment.getModel().getGridRows()) {
            rowAdjusted = (DRowDpsRowAdjusted) row;

            if (DTrnUtils.isAdjustmentForMoney(manAdjustmentClassKey)) {
                // Increments or discounts:

                if (rowAdjusted.getTotalAdjustedCy() != 0) {
                    rows.add(createDpsRow(rowAdjusted));
                }
            }
            else {
                // Additions or returns:

                if (rowAdjusted.getQuantityAdjusted() != 0 && rowAdjusted.getTotalAdjustedCy() != 0) {
                    rows.add(createDpsRow(rowAdjusted));
                }
            }
        }

        return rows;
    }

    private void renderDpsAdjustment() {
        removeAllListeners();

        if (moDpsAdjustment == null) {
            jtfCurrency.setText("");
            jtfExchangeRate.setText(DLibUtils.getDecimalFormatExchangeRate().format(0));

            moCurTotalOriginal.setCurrencyKey(null);
            moCurTotalInc.setCurrencyKey(null);
            moCurTotalDec.setCurrencyKey(null);
            moCurTotalAvailable.setCurrencyKey(null);

            moPanelDps.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, null);

            jtbDps.setSelected(false);
            moKeyDps.removeAllItems();
        }
        else {
            jtfCurrency.setText(miClient.getSession().getSessionCustom().getCurrency(moDpsAdjustment.getCurrencyKey()));
            jtfExchangeRate.setText(DLibUtils.getDecimalFormatExchangeRate().format(moDpsAdjustment.getExchangeRate()));

            moCurTotalOriginal.setCurrencyKey(moDpsAdjustment.getCurrencyKey());
            moCurTotalInc.setCurrencyKey(moDpsAdjustment.getCurrencyKey());
            moCurTotalDec.setCurrencyKey(moDpsAdjustment.getCurrencyKey());
            moCurTotalAvailable.setCurrencyKey(moDpsAdjustment.getCurrencyKey());

            moPanelDps.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, moDpsAdjustment.getBookkeepingNumberKey_n());

            actionDps();
        }

        itemStateKeyDps();

        addAllListeners();
    }

    @SuppressWarnings("unchecked")
    private boolean adjustLots(DRowDpsRowAdjusted rowAdjusted) {
        boolean valid = false;
        boolean adjust = true;
        DRowDpsRowAdjusted rowAdjustedGrid = null;

        while (adjust) {
            moDialogLot.resetForm();
            moDialogLot.setValue(DModSysConsts.PARAM_DATE, moDpsAdjustment.getDate());
            moDialogLot.setValue(DModSysConsts.PARAM_ITM_UNT, new int[] { rowAdjusted.getFkItemId(), rowAdjusted.getFkUnitId() });
            moDialogLot.setValue(DModSysConsts.PARAM_BRA_WAH, moDpsAdjustment.getBranchWarehouseKey_n());
            moDialogLot.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, moDpsAdjustment.getBookkeepingNumberKey_n());
            moDialogLot.setValue(DModSysConsts.PARAM_QTY, rowAdjusted.getQuantityAdjusted());
            moDialogLot.setValue(DModSysConsts.PARAM_PRC, new double[3]);
            moDialogLot.setValue(DModSysConsts.PARAM_CUR, miClient.getSession().getSessionCustom().getCurrencyCode(moDpsAdjustment.getCurrencyKey()));
            moDialogLot.setValue(DModSysConsts.PARAM_VEC_STK_MOV_ADJ, rowAdjusted.getStockMovesAvailable());   // stock lots available to adjust
            moDialogLot.setValue(DModSysConsts.PARAM_VEC_STK_MOV, rowAdjusted.getStockMovesAdjusted());        // stock lots adjusted
            moDialogLot.setVisible(true);

            if (moDialogLot.getFormResult() != DGuiConsts.FORM_RESULT_OK) {
                adjust = false;
            }
            else {
                // Validate stock lots:

                valid = true;
                rowAdjusted.getStockMovesAdjusted().clear();
                rowAdjusted.getStockMovesAdjusted().addAll((Vector<DTrnStockMove>) moDialogLot.getValue(DModSysConsts.PARAM_VEC_STK_MOV));

                DPS:
                for (DGridRow gridRow : moGridAdjustment.getModel().getGridRows()) {
                    rowAdjustedGrid = (DRowDpsRowAdjusted) gridRow;

                    if (rowAdjusted != rowAdjustedGrid) {
                        if (rowAdjustedGrid.areSerialNumbersAvailable() && rowAdjustedGrid.getFkItemId() == rowAdjusted.getFkItemId()) {
                            for (DTrnStockMove moveGrid : rowAdjustedGrid.getStockMovesAdjusted()) {
                                for (DTrnStockMove move : rowAdjusted.getStockMovesAdjusted()) {
                                    if (moveGrid.getSerialNumber().compareTo(move.getSerialNumber()) == 0) {
                                        valid = false;
                                        miClient.showMsgBoxWarning("El número de serie '" + move.getSerialNumber() + "' ya está en el documento.");
                                        break DPS;
                                    }
                                }
                            }
                        }
                    }
                }

                if (valid) {
                    break;
                }
            }
        }

        return adjust;
    }

    @SuppressWarnings("unchecked")
    private boolean adjustSerialNumbers(DRowDpsRowAdjusted rowAdjusted) {
        boolean valid = false;
        boolean adjust = true;
        DRowDpsRowAdjusted rowAdjustedGrid = null;

        while (adjust) {
            moDialogSerialNumber.resetForm();
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_DATE, moDpsAdjustment.getDate());
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_LOT_KEY, new int[] { rowAdjusted.getFkItemId(), rowAdjusted.getFkUnitId(), DUtilConsts.LOT_ID });
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_BRA_WAH, moDpsAdjustment.getBranchWarehouseKey_n());
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, moDpsAdjustment.getBookkeepingNumberKey_n());
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_QTY, new Double(rowAdjusted.getQuantityAdjusted()).intValue());
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_PRC, new double[3]);
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_CUR, miClient.getSession().getSessionCustom().getCurrencyCode(moDpsAdjustment.getCurrencyKey()));
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_VEC_STK_MOV_ADJ, rowAdjusted.getStockMovesAvailable());   // serial numbers available to adjust
            moDialogSerialNumber.setValue(DModSysConsts.PARAM_VEC_STK_MOV, rowAdjusted.getStockMovesAdjusted());        // serial numbers adjusted
            moDialogSerialNumber.setVisible(true);

            if (moDialogSerialNumber.getFormResult() != DGuiConsts.FORM_RESULT_OK) {
                adjust = false;
            }
            else {
                // Validate serial numbers:

                valid = true;
                rowAdjusted.getStockMovesAdjusted().clear();
                rowAdjusted.getStockMovesAdjusted().addAll((Vector<DTrnStockMove>) moDialogSerialNumber.getValue(DModSysConsts.PARAM_VEC_STK_MOV));

                DPS:
                for (DGridRow gridRow : moGridAdjustment.getModel().getGridRows()) {
                    rowAdjustedGrid = (DRowDpsRowAdjusted) gridRow;

                    if (rowAdjusted != rowAdjustedGrid) {
                        if (rowAdjustedGrid.areSerialNumbersAvailable() && rowAdjustedGrid.getFkItemId() == rowAdjusted.getFkItemId()) {
                            for (DTrnStockMove moveGrid : rowAdjustedGrid.getStockMovesAdjusted()) {
                                for (DTrnStockMove move : rowAdjusted.getStockMovesAdjusted()) {
                                    if (moveGrid.getSerialNumber().compareTo(move.getSerialNumber()) == 0) {
                                        valid = false;
                                        miClient.showMsgBoxWarning("El número de serie '" + move.getSerialNumber() + "' ya está en el documento.");
                                        break DPS;
                                    }
                                }
                            }
                        }
                    }
                }

                if (valid) {
                    break;
                }
            }
        }

        return adjust;
    }

    private void actionDps() {
        DGuiParams params = new DGuiParams();

        params.getParamsMap().put(DModSysConsts.PARAM_YEAR, mnYear);
        params.getParamsMap().put(DModSysConsts.PARAM_BPR_CL, DTrnUtils.getBizPartnerClassByDpsCategory(moDpsAdjustment.getFkDpsCategoryId()));
        params.getParamsMap().put(DModSysConsts.PARAM_BPR, moDpsAdjustment.getFkBizPartnerBizPartnerId());
        params.getParamsMap().put(DModSysConsts.PARAM_CUR, moDpsAdjustment.getFkCurrencyId());
        params.getParamsMap().put(DModSysConsts.PARAM_BKK_NUM_KEY, moDpsAdjustment.getBookkeepingNumberKey_n());
        params.getParamsMap().put(DModSysConsts.PARAM_BAL, DUtilConsts.BAL_CY); // document's currency balance

        if (!jtbDps.isSelected()) {
            miClient.getSession().populateCatalogue(moKeyDps, DModConsts.TX_ACC_PAY, DLibConsts.UNDEFINED, params);     // show only pending documents
        }
        else {
            miClient.getSession().populateCatalogue(moKeyDps, DModConsts.TX_ACC_PAY_COL, DLibConsts.UNDEFINED, params); // show all documents: pending and collected
        }
    }

    private void actionAdjustAll() {
        DRowDpsRowAdjusted rowAdjusted = null;

        if (moGridAdjustment.getTable().getRowCount() > 0) {
            if (DTrnUtils.isAdjustmentForMoney(manAdjustmentClassKey)) {
                // Increments or discounts:

                for (DGridRow row : moGridAdjustment.getModel().getGridRows()) {
                    rowAdjusted = (DRowDpsRowAdjusted) row;
                    rowAdjusted.setTotalAdjustedCy(rowAdjusted.getTotalAvailableCy());
                }
            }
            else {
                // Additions or returns:

                for (DGridRow row : moGridAdjustment.getModel().getGridRows()) {
                    rowAdjusted = (DRowDpsRowAdjusted) row;
                    rowAdjusted.setQuantityAdjusted(rowAdjusted.getQuantityAvailable());
                    rowAdjusted.setTotalAdjustedCy(rowAdjusted.getTotalAvailableCy());

                    rowAdjusted.getStockMovesAdjusted().clear();
                    rowAdjusted.getStockMovesAdjusted().addAll(rowAdjusted.getStockMovesAvailable());
                }
            }

            moGridAdjustment.renderGridRows();
            moGridAdjustment.setSelectedGridRow(0);
        }
    }

    private void actionClearAll() {
        DRowDpsRowAdjusted rowAdjusted = null;

        if (moGridAdjustment.getTable().getRowCount() > 0) {
            if (DTrnUtils.isAdjustmentForMoney(manAdjustmentClassKey)) {
                // Increments or discounts:

                for (DGridRow row : moGridAdjustment.getModel().getGridRows()) {
                    rowAdjusted = (DRowDpsRowAdjusted) row;
                    rowAdjusted.setTotalAdjustedCy(0);
                }
            }
            else {
                // Additions or returns:

                for (DGridRow row : moGridAdjustment.getModel().getGridRows()) {
                    rowAdjusted = (DRowDpsRowAdjusted) row;
                    rowAdjusted.setQuantityAdjusted(0);
                    rowAdjusted.setTotalAdjustedCy(0);
                    rowAdjusted.getStockMovesAdjusted().clear();
                }
            }

            moGridAdjustment.renderGridRows();
            moGridAdjustment.setSelectedGridRow(0);
        }
    }

    private void actionShowLotAvailable() {
        DRowDpsRowAdjusted rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getSelectedGridRow();

        if (rowAdjusted == null) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            if (!rowAdjusted.isInventoriable()) {
                miClient.showMsgBoxInformation("La partida del documento no es inventariable.");
            }
            else if (!rowAdjusted.areLotsAvailable()) {
                miClient.showMsgBoxInformation("La partida del documento no tiene lotes disponibles.");
            }
            else {
                moDialogLotShowAvailable.resetForm();
                moDialogLotShowAvailable.setValue(DModSysConsts.PARAM_OBJ_DPS_ROW_ADJ, rowAdjusted);
                moDialogLotShowAvailable.setVisible(true);
            }
        }
    }

    private void actionShowLotAdjusted() {
        DRowDpsRowAdjusted rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getSelectedGridRow();

        if (rowAdjusted == null) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            if (!rowAdjusted.isInventoriable()) {
                miClient.showMsgBoxInformation("La partida del documento no es inventariable.");
            }
            else if (!rowAdjusted.areLotsAvailable()) {
                miClient.showMsgBoxInformation("La partida del documento no tiene lotes ajustados.");
            }
            else {
                moDialogLotShowAdjusted.resetForm();
                moDialogLotShowAdjusted.setValue(DModSysConsts.PARAM_OBJ_DPS_ROW_ADJ, rowAdjusted);
                moDialogLotShowAdjusted.setVisible(true);
            }
        }
    }

    private void actionShowSerialNumberAvailable() {
        DRowDpsRowAdjusted rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getSelectedGridRow();

        if (rowAdjusted == null) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            if (!rowAdjusted.isInventoriable()) {
                miClient.showMsgBoxInformation("La partida del documento no es inventariable.");
            }
            else if (!rowAdjusted.areSerialNumbersAvailable()) {
                miClient.showMsgBoxInformation("La partida del documento no tiene números de serie disponibles.");
            }
            else {
                moDialogSerialNumberShowAvailable.resetForm();
                moDialogSerialNumberShowAvailable.setValue(DModSysConsts.PARAM_OBJ_DPS_ROW_ADJ, rowAdjusted);
                moDialogSerialNumberShowAvailable.setVisible(true);
            }
        }
    }

    private void actionShowSerialNumberAdjusted() {
        DRowDpsRowAdjusted rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getSelectedGridRow();

        if (rowAdjusted == null) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            if (!rowAdjusted.isInventoriable()) {
                miClient.showMsgBoxInformation("La partida del documento no es inventariable.");
            }
            else if (!rowAdjusted.areSerialNumbersAvailable()) {
                miClient.showMsgBoxInformation("La partida del documento no tiene números de serie ajustados.");
            }
            else {
                moDialogSerialNumberShowAdjusted.resetForm();
                moDialogSerialNumberShowAdjusted.setValue(DModSysConsts.PARAM_OBJ_DPS_ROW_ADJ, rowAdjusted);
                moDialogSerialNumberShowAdjusted.setVisible(true);
            }
        }
    }

    private void itemStateKeyDps() {
        DTrnStockMove stockMoveAdjusted = null;
        DRowDpsRowAdjusted rowAdjusted = null;
        Vector<DGridRow> gridRows = null;

        try {
            if (moKeyDps.getSelectedIndex() <= 0) {
                moDps = null;
                gridRows = new Vector<>();
            }
            else {
                // Read selected document to adjust and create its rows for adjustment:

                moDps = (DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, moKeyDps.getSelectedItem().getPrimaryKey());
                gridRows = DTrnUtils.createDpsRowsForAdjustment(miClient.getSession(), mnYear, moDps.getPrimaryKey(), moDpsAdjustment.getBookkeepingNumberKey_n());

                // Include source DPS adjustment in current DPS to be adjusted:

                for (DDbDpsRow rowSource : moDpsAdjustment.getChildRows()) {
                    if (!rowSource.isDeleted()) {
                        if (rowSource.getFkSourceDpsId_n() == moDps.getPkDpsId()) {
                            // Source DPS adjustment row belongs to current DPS to be adjusted:

                            for (DGridRow gridRow : gridRows) {
                                rowAdjusted = (DRowDpsRowAdjusted) gridRow;

                                if (DLibUtils.compareKeys(rowSource.getSourceDpsRowKey_n(), rowAdjusted.getRowPrimaryKey())) {
                                    if (DTrnUtils.isAdjustmentForMoney(manAdjustmentClassKey)) {
                                        // Increments or discounts:

                                        if (manAdjustmentClassKey[0] == DModSysConsts.TS_ADJ_CT_INC) {
                                            rowAdjusted.setTotalIncCurrentCy(rowAdjusted.getTotalIncCurrentCy() + rowSource.getTotalCy_r());
                                        }
                                        else {
                                            rowAdjusted.setTotalDecCurrentCy(rowAdjusted.getTotalDecCurrentCy() + rowSource.getTotalCy_r());
                                        }
                                    }
                                    else {
                                        // Additions or returns:

                                        if (manAdjustmentClassKey[0] == DModSysConsts.TS_ADJ_CT_INC) {
                                            rowAdjusted.setQuantityIncCurrent(rowAdjusted.getQuantityIncCurrent() + rowSource.getQuantity());
                                            rowAdjusted.setTotalIncCurrentCy(rowAdjusted.getTotalIncCurrentCy() + rowSource.getTotalCy_r());
                                        }
                                        else {
                                            rowAdjusted.setQuantityDecCurrent(rowAdjusted.getQuantityDecCurrent() + rowSource.getQuantity());
                                            rowAdjusted.setTotalDecCurrentCy(rowAdjusted.getTotalDecCurrentCy() + rowSource.getTotalCy_r());
                                        }
                                    }

                                    // Remove allready adjusted stock lots:

                                    if (rowSource.isInventoriable() && !rowSource.getAuxStockMoves().isEmpty() && !rowSource.getAuxStockMoves().get(0).getLot().isEmpty()) {

                                        for (DTrnStockMove stockMoveSource : rowSource.getAuxStockMoves()) {
                                            for (int i = 0; i < rowAdjusted.getStockMovesAvailable().size(); i++) {
                                                stockMoveAdjusted = rowAdjusted.getStockMovesAvailable().get(i);

                                                if (stockMoveSource.getLot().compareTo(stockMoveAdjusted.getLot()) == 0 && DLibTimeUtils.isSameDate(stockMoveSource.getDateExpiration(), stockMoveAdjusted.getDateExpiration())) {
                                                    stockMoveAdjusted.setQuantity(stockMoveAdjusted.getQuantity() - stockMoveSource.getQuantity());
                                                    if (stockMoveAdjusted.getQuantity() <= 0) {
                                                        rowAdjusted.getStockMovesAvailable().remove(i);
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    // Remove allready adjusted serial numbers:

                                    if (rowSource.isInventoriable() && !rowSource.getAuxStockMoves().isEmpty() && !rowSource.getAuxStockMoves().get(0).getSerialNumber().isEmpty()) {

                                        for (DTrnStockMove stockMoveSource : rowSource.getAuxStockMoves()) {
                                            for (int i = 0; i < rowAdjusted.getStockMovesAvailable().size(); i++) {
                                                stockMoveAdjusted = rowAdjusted.getStockMovesAvailable().get(i);

                                                if (stockMoveSource.getSerialNumber().compareTo(stockMoveAdjusted.getSerialNumber()) == 0) {
                                                    rowAdjusted.getStockMovesAvailable().remove(i);
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            moPanelDps.setRegistry(moDps);  // document to adjust
            moGridAdjustment.populateGrid(gridRows, this);
            moGridAdjustment.getTable().getDefaultEditor(moGridAdjustment.getModel().getColumnClass(COL_QTY_ADJ)).addCellEditorListener(this);
            moGridAdjustment.getTable().getDefaultEditor(moGridAdjustment.getModel().getColumnClass(COL_TOT_ADJ)).addCellEditorListener(this);

            valueChangedDpsRow();
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    private void valueChangedDpsRow() {
        DRowDpsRowAdjusted rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getSelectedGridRow();

        if (rowAdjusted == null) {
            moUnitQuantityOriginal.getField().setValue(0d);
            moUnitQuantityInc.getField().setValue(0d);
            moUnitQuantityDec.getField().setValue(0d);
            moUnitQuantityAvailable.getField().setValue(0d);
            moUnitQuantityOriginal.setCompoundText("");
            moUnitQuantityInc.setCompoundText("");
            moUnitQuantityDec.setCompoundText("");
            moUnitQuantityAvailable.setCompoundText("");

            moCurTotalOriginal.getField().setValue(0d);
            moCurTotalInc.getField().setValue(0d);
            moCurTotalDec.getField().setValue(0d);
            moCurTotalAvailable.getField().setValue(0d);
        }
        else {
            moUnitQuantityOriginal.getField().setValue(rowAdjusted.getQuantityOriginal());
            moUnitQuantityInc.getField().setValue(rowAdjusted.getQuantityInc() + rowAdjusted.getQuantityIncCurrent());
            moUnitQuantityDec.getField().setValue(rowAdjusted.getQuantityDec() + rowAdjusted.getQuantityDecCurrent());
            moUnitQuantityAvailable.getField().setValue(rowAdjusted.getQuantityAvailable());
            moUnitQuantityOriginal.setCompoundText(rowAdjusted.getUnitCode());
            moUnitQuantityInc.setCompoundText(rowAdjusted.getUnitCode());
            moUnitQuantityDec.setCompoundText(rowAdjusted.getUnitCode());
            moUnitQuantityAvailable.setCompoundText(rowAdjusted.getUnitCode());

            moCurTotalOriginal.getField().setValue(rowAdjusted.getTotalOriginalCy());
            moCurTotalInc.getField().setValue(rowAdjusted.getTotalIncCy() + rowAdjusted.getTotalIncCurrentCy());
            moCurTotalDec.getField().setValue(rowAdjusted.getTotalDecCy() + rowAdjusted.getTotalDecCurrentCy());
            moCurTotalAvailable.getField().setValue(rowAdjusted.getTotalAvailableCy());
        }
    }

    private void processEditingQuantityAdjusted() {
        int index = moGridAdjustment.getTable().getSelectedRow();
        boolean clear = false;
        DTrnStockMove stockMove = null;
        DRowDpsRowAdjusted rowAdjusted = null;

        if (index != -1) {
            rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getSelectedGridRow();

            if (rowAdjusted.getQuantityAdjusted() <= 0) {
                clear = true;
            }
            else if (rowAdjusted.getQuantityAdjusted() > rowAdjusted.getQuantityAvailable()) {
                clear = true;
                miClient.showMsgBoxWarning("La cantidad máxima a ajustar para esta partida es: " + DLibUtils.getDecimalFormatQuantity().format(rowAdjusted.getQuantityAvailable()) + " " + rowAdjusted.getUnitCode() + ".");
            }
            else {
                if (rowAdjusted.areLotsAvailable()) {

                    if (!adjustLots(rowAdjusted)) {
                        clear = true;
                    }
                }
                else if (rowAdjusted.areSerialNumbersAvailable()) {
                    rowAdjusted.setQuantityAdjusted((int) rowAdjusted.getQuantityAdjusted());

                    if (!adjustSerialNumbers(rowAdjusted)) {
                        clear = true;
                    }
                }
                else if (rowAdjusted.isInventoriable()) {
                    stockMove = rowAdjusted.getStockMovesAvailable().get(0);
                    rowAdjusted.getStockMovesAdjusted().clear();
                    rowAdjusted.getStockMovesAdjusted().add(new DTrnStockMove(stockMove.getStockMoveKey(), rowAdjusted.getQuantityAdjusted()));
                }

                rowAdjusted.setTotalAdjustedCy(rowAdjusted.getQuantityAvailable() == 0 ? 0 : (rowAdjusted.getTotalAvailableCy() / rowAdjusted.getQuantityAvailable()) * rowAdjusted.getQuantityAdjusted());
            }

            if (clear) {
                rowAdjusted.setQuantityAdjusted(0);
                rowAdjusted.setTotalAdjustedCy(0);
                rowAdjusted.getStockMovesAdjusted().clear();
            }

            moGridAdjustment.renderGridRows();
            moGridAdjustment.setSelectedGridRow(index);
        }
    }

    private void processEditingTotalAdjusted() {
        int index = moGridAdjustment.getTable().getSelectedRow();
        boolean clear = false;
        DRowDpsRowAdjusted rowAdjusted = null;

        if (index != -1) {
            rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getSelectedGridRow();

            if (DTrnUtils.isAdjustmentForStock(manAdjustmentClassKey) && rowAdjusted.getQuantityAdjusted() == 0) {
                clear = true;
                miClient.showMsgBoxWarning("Se debe especificar la cantidad a ajustar primero que el total a ajustar.");
            }
            else {
                if (rowAdjusted.getTotalAdjustedCy() <= 0) {
                    clear = true;
                }
                else if (rowAdjusted.getTotalAdjustedCy() > rowAdjusted.getTotalAvailableCy()) {
                    clear = true;
                    miClient.showMsgBoxWarning("El total máximo a ajustar para esta partida es: " + DLibUtils.getDecimalFormatAmount().format(rowAdjusted.getTotalAvailableCy()) + ".");
                }

            }

            if (clear) {
                rowAdjusted.setQuantityAdjusted(0);
                rowAdjusted.setTotalAdjustedCy(0);
                rowAdjusted.getStockMovesAdjusted().clear();
            }

            moGridAdjustment.renderGridRows();
            moGridAdjustment.setSelectedGridRow(index);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAdjustAll;
    private javax.swing.JButton jbClearAll;
    private javax.swing.JLabel jlAdjustmentCategory;
    private javax.swing.JLabel jlAdjustmentClass;
    private javax.swing.JLabel jlAdjustmentType;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDps;
    private javax.swing.JLabel jlQuantityAvailable;
    private javax.swing.JLabel jlQuantityDec;
    private javax.swing.JLabel jlQuantityInc;
    private javax.swing.JLabel jlQuantityOriginal;
    private javax.swing.JLabel jlTotalAvailable;
    private javax.swing.JLabel jlTotalDec;
    private javax.swing.JLabel jlTotalInc;
    private javax.swing.JLabel jlTotalOriginal;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpDpsRows;
    private javax.swing.JToggleButton jtbDps;
    private javax.swing.JTextField jtfAdjustmentCategory;
    private javax.swing.JTextField jtfAdjustmentClass;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfExchangeRate;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotalAvailable;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotalDec;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotalInc;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotalOriginal;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAdjustmentType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDps;
    private sba.mod.trn.form.DPanelDps moPanelDps;
    private sba.lib.gui.bean.DBeanCompoundField moUnitQuantityAvailable;
    private sba.lib.gui.bean.DBeanCompoundField moUnitQuantityDec;
    private sba.lib.gui.bean.DBeanCompoundField moUnitQuantityInc;
    private sba.lib.gui.bean.DBeanCompoundField moUnitQuantityOriginal;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jtbDps.addActionListener(this);
        jbAdjustAll.addActionListener(this);
        jbClearAll.addActionListener(this);
        moKeyDps.addItemListener(this);

        if (DTrnUtils.isAdjustmentForStock(manAdjustmentClassKey)) {
            moButtonShowLotAvailable.addActionListener(this);
            moButtonShowLotAdjusted.addActionListener(this);
            moButtonShowSerialNumberAvailable.addActionListener(this);
            moButtonShowSerialNumberAdjusted.addActionListener(this);
        }
    }

    @Override
    public void removeAllListeners() {
        jtbDps.removeActionListener(this);
        jbAdjustAll.removeActionListener(this);
        jbClearAll.removeActionListener(this);
        moKeyDps.removeItemListener(this);

        if (DTrnUtils.isAdjustmentForStock(manAdjustmentClassKey)) {
            moButtonShowLotAvailable.removeActionListener(this);
            moButtonShowLotAdjusted.removeActionListener(this);
            moButtonShowSerialNumberAvailable.removeActionListener(this);
            moButtonShowSerialNumberAdjusted.removeActionListener(this);
        }
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyAdjustmentType, DModConsts.TS_ADJ_TP, DLibConsts.UNDEFINED, new DGuiParams(manAdjustmentClassKey));
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        int decsQty = DLibUtils.getDecimalFormatQuantity().getMaximumFractionDigits();
        int decsAmt = DLibUtils.getDecimalFormatAmount().getMaximumFractionDigits();
        double adjustmentCy = 0;
        boolean adjusted = false;
        DRowDpsRowAdjusted rowAdjusted = null;
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (DTrnUtils.isAdjustmentForMoney(manAdjustmentClassKey)) {
                // Increments or discounts:

                for (int i = 0; i < moGridAdjustment.getModel().getRowCount(); i++) {
                    rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getGridRow(i);

                    adjustmentCy += rowAdjusted.getTotalAdjustedCy();

                    if (rowAdjusted.getTotalAdjustedCy() != 0) {
                        adjusted = true;
                    }
                }
            }
            else {
                // Additions or returns:

                VALIDATION:
                for (int i = 0; i < moGridAdjustment.getModel().getRowCount(); i++) {
                    rowAdjusted = (DRowDpsRowAdjusted) moGridAdjustment.getGridRow(i);

                    adjustmentCy += rowAdjusted.getTotalAdjustedCy();

                    if (rowAdjusted.getQuantityAdjusted() != 0) {
                        if (DLibUtils.round(rowAdjusted.getQuantityAdjusted(), decsQty) > DLibUtils.round(rowAdjusted.getQuantityAvailable(), decsQty)) {
                            validation.setMessage("En la partida # " + rowAdjusted.getSortingPos() + ", " +
                                    "la cantidad ajustada es mayor a la cantidad disponible.");
                            validation.setComponent(moGridAdjustment.getTable());
                            moGridAdjustment.setSelectedGridRow(i);
                            break;
                        }

                        if (DLibUtils.round(rowAdjusted.getTotalAdjustedCy(), decsAmt) > DLibUtils.round(rowAdjusted.getTotalAvailableCy(), decsAmt)) {
                            validation.setMessage("En la partida # " + rowAdjusted.getSortingPos() + ", " +
                                    "el monto ajustado es mayor al total disponible.");
                            validation.setComponent(moGridAdjustment.getTable());
                            moGridAdjustment.setSelectedGridRow(i);
                            break;
                        }

                        if (DLibUtils.round(rowAdjusted.getTotalAdjustedCy(), decsAmt) == 0 && DLibUtils.round(rowAdjusted.getTotalAvailableCy(), decsAmt) > 0) {
                            if (miClient.showMsgBoxConfirm("En la partida # " + rowAdjusted.getSortingPos() + ", no se ha especificado el monto ajustado.\n" + DGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                                validation.setMessage("En la partida # " + rowAdjusted.getSortingPos() + ", " +
                                        "se debe especificar el monto ajustado.");
                                validation.setComponent(moGridAdjustment.getTable());
                                moGridAdjustment.setSelectedGridRow(i);
                                break;
                            }
                        }

                        if (DLibUtils.round(rowAdjusted.getQuantityAdjusted(), decsQty) == DLibUtils.round(rowAdjusted.getQuantityAvailable(), decsQty) &&
                                DLibUtils.round(rowAdjusted.getTotalAdjustedCy(), decsAmt) != DLibUtils.round(rowAdjusted.getTotalAvailableCy(), decsAmt)) {
                            validation.setMessage("En la partida # " + rowAdjusted.getSortingPos() + ", " +
                                    "se ha ajustado toda la cantidad disponible, pero no todo el total disponible.");
                            validation.setComponent(moGridAdjustment.getTable());
                            moGridAdjustment.setSelectedGridRow(i);
                            break;
                        }

                        if (rowAdjusted.areSerialNumbersAvailable()) {
                            // Validate serial numbers:

                            if ((int) rowAdjusted.getQuantityAdjusted() != rowAdjusted.getStockMovesAdjusted().size()) {
                                validation.setMessage("En la partida # " + rowAdjusted.getSortingPos() + ", " +
                                        "la cantidad ajustada es " + DLibUtils.getDecimalFormatQuantity().format(rowAdjusted.getQuantityAdjusted()) + ", " +
                                        "pero los números de serie ajustados son " + rowAdjusted.getStockMovesAdjusted().size() + ".");
                                validation.setComponent(moGridAdjustment.getTable());
                                moGridAdjustment.setSelectedGridRow(i);
                                break;
                            }
                            else {
                                for (DTrnStockMove move : rowAdjusted.getStockMovesAdjusted()) {
                                    if ((int) move.getQuantity() != 1) {
                                        validation.setMessage("En la partida # " + rowAdjusted.getSortingPos() + ", " +
                                                "el número de serie '" + move.getSerialNumber() + "' " +
                                                "tiene " + DLibUtils.getDecimalFormatQuantity().format(move.getQuantity()) + " " + rowAdjusted.getUnitCode() + ".");
                                        validation.setComponent(moGridAdjustment.getTable());
                                        moGridAdjustment.setSelectedGridRow(i);
                                        break VALIDATION;
                                    }
                                }
                            }
                        }

                        adjusted = true;
                    }
                }
            }

            if (validation.isValid()) {
                if (!adjusted) {
                    validation.setMessage("No se ha capturado ningún ajuste.");
                    validation.setComponent(moGridAdjustment.getTable());
                }
                else if (DLibUtils.round(adjustmentCy, decsAmt) > DLibUtils.round((Double) moPanelDps.getValue(DUtilConsts.BAL_CY), decsAmt)) {
                    if (miClient.showMsgBoxConfirm("El total ajustado (" + DLibUtils.getDecimalFormatAmount().format(adjustmentCy) + ") " +
                            "es mayor al saldo del documento (" + DLibUtils.getDecimalFormatAmount().format((Double) moPanelDps.getValue(DUtilConsts.BAL_CY)) + ").\n" + DGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                        validation.setMessage("El total ajustado (" + DLibUtils.getDecimalFormatAmount().format(adjustmentCy) + ") " +
                                "no puede ser mayor al saldo del documento (" + DLibUtils.getDecimalFormatAmount().format((Double) moPanelDps.getValue(DUtilConsts.BAL_CY)) + ").");
                        validation.setComponent(moGridAdjustment.getTable());
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void resetForm() {
        reloadCatalogues();

        mnFormResult = DGuiConsts.FORM_RESULT_CANCEL;
        mbFirstActivation = true;

        moDpsAdjustment = null;
        renderDpsAdjustment();

        moKeyAdjustmentType.setSelectedIndex(1);    // simpliest type
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_OBJ_DPS_ADJ:
                moDpsAdjustment = (DDbDps) value;
                renderDpsAdjustment();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;

        switch (type) {
            case DModSysConsts.PARAM_VEC_DPS_ROW:
                value = createDpsRows();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return value;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbAdjustAll) {
                actionAdjustAll();
            }
            else if (button == jbClearAll) {
                actionClearAll();
            }
            else if (button == moButtonShowLotAvailable) {
                actionShowLotAvailable();
            }
            else if (button == moButtonShowLotAdjusted) {
                actionShowLotAdjusted();
            }
            else if (button == moButtonShowSerialNumberAvailable) {
                actionShowSerialNumberAvailable();
            }
            else if (button == moButtonShowSerialNumberAdjusted) {
                actionShowSerialNumberAdjusted();
            }
        }
        else if (e.getSource() instanceof JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbDps) {
                actionDps();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyDps) {
                    itemStateKeyDps();
                }
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            valueChangedDpsRow();
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moGridAdjustment.getTable().getSelectedColumn()) {
            case COL_QTY_ADJ:
                processEditingQuantityAdjusted();
                break;
            case COL_TOT_ADJ:
                processEditingTotalAdjusted();
                break;
            default:
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {

    }
}
