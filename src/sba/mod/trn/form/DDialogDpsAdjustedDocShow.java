/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogDpsAdjustedDocShow.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;

/**
 *
 * @author Sergio Flores
 */
public class DDialogDpsAdjustedDocShow extends DBeanFormDialog {

    /** Creates new form DDialogDpsAdjustedDocShow
     * @param client GUI client.
     */
    public DDialogDpsAdjustedDocShow(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DLibConsts.UNDEFINED, DLibConsts.UNDEFINED, "Documento ajustado");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroup = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jpDpsRows = new javax.swing.JPanel();
        moPanelDps = new sba.mod.trn.form.DPanelDps();

        jLabel2.setText("jLabel1");

        jpDpsRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento ajustado:"));
        jpDpsRows.setLayout(new java.awt.BorderLayout(0, 5));
        jpDpsRows.add(moPanelDps, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpDpsRows, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);

        moPanelDps.setPanelSettings(miClient);
        moPanelDps.enableShowCardex();

        jbSave.setEnabled(false);
        jbSave.setText(DGuiConsts.TXT_BTN_OK);
        jbCancel.setText(DGuiConsts.TXT_BTN_CLOSE);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jbCancel.requestFocus();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup jButtonGroup;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jpDpsRows;
    private sba.mod.trn.form.DPanelDps moPanelDps;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        
    }

    @Override
    public void removeAllListeners() {
        
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void resetForm() {
        reloadCatalogues();

        mnFormResult = DGuiConsts.FORM_RESULT_CANCEL;
        mbFirstActivation = true;

        try {
            moPanelDps.setRegistry(null);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_BKK_NUM_KEY:
                moPanelDps.setValue(type, value);
                break;
            case DModSysConsts.PARAM_DPS:
                try {
                    moPanelDps.setRegistry(miClient.getSession().readRegistry(DModConsts.T_DPS, (int[]) value));
                }
                catch (Exception e) {
                    DLibUtils.showException(this, e);
                }
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
