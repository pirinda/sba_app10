/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogFindItem.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import sba.gui.DGuiClientSessionCustom;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldRadio;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.lib.img.DImgConsts;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbConfigBranch;
import sba.mod.cfg.db.DDbConfigCompany;
import sba.mod.fin.db.DDbTaxGroupConfigRow;
import sba.mod.itm.db.DDbItem;
import sba.mod.trn.db.DRowFindItem;
import sba.mod.trn.db.DTrnConsts;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DDialogFindItem extends DBeanFormDialog implements DGridPaneFormOwner, ActionListener, ItemListener {

    private Date mtDate;
    private int mnYear;
    private int mnItemPriceType;
    private int mnIdentityType;
    private int mnItemFilter;
    private double mdQuantity;
    private double mdDiscountPercentage;
    private boolean mbShowPrices;
    private boolean mbOnlyInStock;
    private boolean mbOnlyInventoriable;
    private boolean mbOnlyConvertible;
    private boolean mbValidateStock;
    private boolean mbNewRegistries;
    private int[] manWarehouseKey;
    private int[] manTaxGroupKey;
    private int[] manTaxRegionKey;
    private int[] manDefaultItemCategoryKey;
    private int[] manDefaultItemClassKey;
    private int[] manDefaultItemTypeKey;
    private DGuiFieldKeyGroup moFieldKeyGroup;
    private DGridPaneForm moGridCurrent;
    private DGridPaneForm moGridItemsByCode;
    private DGridPaneForm moGridItemsByCodePrices;
    private DGridPaneForm moGridItemsByName;
    private DGridPaneForm moGridItemsByNamePrices;
    private DGridPaneForm moGridItemsByExtra;
    private DGridPaneForm moGridItemsByExtraPrices;
    private DDbTaxGroupConfigRow moTaxGroupConfigRow;
    private DGridColumnForm[] maoCommonColumns;
    private Vector<DRowFindItem> mvFindItems;

    /** Creates new form DDialogFindItem
     * @param client GUI client.
     * @param subtype IOG category. Constants defined in DModSysConsts (TS_IOG_CT_...).
     */
    public DDialogFindItem(DGuiClient client, int subtype) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.IX_ITM, subtype, "");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroup = new javax.swing.ButtonGroup();
        jpSettings = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        moRadioByCode = new sba.lib.gui.bean.DBeanFieldRadio();
        moRadioByName = new sba.lib.gui.bean.DBeanFieldRadio();
        jPanel10 = new javax.swing.JPanel();
        moRadioByBrand = new sba.lib.gui.bean.DBeanFieldRadio();
        moRadioByManufacturer = new sba.lib.gui.bean.DBeanFieldRadio();
        moRadioByComponent = new sba.lib.gui.bean.DBeanFieldRadio();
        moRadioByDepartment = new sba.lib.gui.bean.DBeanFieldRadio();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        moBoolExactMatch = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel12 = new javax.swing.JPanel();
        moBoolOnlyInStock = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel14 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        jtfQuantity = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlItemCategory = new javax.swing.JLabel();
        moKeyItemCategory = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel16 = new javax.swing.JPanel();
        jlItemClass = new javax.swing.JLabel();
        moKeyItemClass = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlItemType = new javax.swing.JLabel();
        moKeyItemType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel18 = new javax.swing.JPanel();
        jlItemFilter = new javax.swing.JLabel();
        jtfItemFilter = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jbNewItem = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jbReloadItems = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jpItems = new javax.swing.JPanel();
        jpItemsNorth = new javax.swing.JPanel();
        jlFind = new javax.swing.JLabel();
        moTextFind = new sba.lib.gui.bean.DBeanFieldText();
        jbClearFind = new javax.swing.JButton();
        jpItemsCenter = new javax.swing.JPanel();
        jpItemsSouth = new javax.swing.JPanel();
        jtfBranchCode = new javax.swing.JTextField();
        jtfBranchWarehouseCode = new javax.swing.JTextField();
        jtfYear = new javax.swing.JTextField();
        jlDummy01 = new javax.swing.JLabel();
        jtfItemPriceType = new javax.swing.JTextField();
        jtfDiscountPercentage = new javax.swing.JTextField();
        jtfTaxGroup = new javax.swing.JTextField();
        jtfTaxRegion = new javax.swing.JTextField();
        jtfIdentityType = new javax.swing.JTextField();
        jtfDate = new javax.swing.JTextField();

        jpSettings.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel4.setLayout(new java.awt.GridLayout(1, 4, 5, 5));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Búsqueda por:"));
        jPanel5.setLayout(new java.awt.GridLayout(1, 2));

        jPanel9.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jButtonGroup.add(moRadioByCode);
        moRadioByCode.setText("Código");
        jPanel9.add(moRadioByCode);

        jButtonGroup.add(moRadioByName);
        moRadioByName.setText("Nombre");
        jPanel9.add(moRadioByName);

        jPanel5.add(jPanel9);

        jPanel10.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jButtonGroup.add(moRadioByBrand);
        moRadioByBrand.setText("Marca");
        jPanel10.add(moRadioByBrand);

        jButtonGroup.add(moRadioByManufacturer);
        moRadioByManufacturer.setText("Fabricante");
        jPanel10.add(moRadioByManufacturer);

        jButtonGroup.add(moRadioByComponent);
        moRadioByComponent.setText("Componente");
        jPanel10.add(moRadioByComponent);

        jButtonGroup.add(moRadioByDepartment);
        moRadioByDepartment.setText("Departamento");
        jPanel10.add(moRadioByDepartment);

        jPanel5.add(jPanel10);

        jPanel4.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones de búsqueda:"));
        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolExactMatch.setText("Búsqueda exacta");
        moBoolExactMatch.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel11.add(moBoolExactMatch);

        jPanel6.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolOnlyInStock.setText("Mostrar sólo en existencia");
        moBoolOnlyInStock.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel12.add(moBoolOnlyInStock);

        jPanel6.add(jPanel12);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel6.add(jPanel14);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Cantidad:");
        jlQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jlQuantity);

        jtfQuantity.setEditable(false);
        jtfQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantity.setText("0.00000000");
        jtfQuantity.setFocusable(false);
        jtfQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jtfQuantity);

        jPanel6.add(jPanel13);

        jPanel4.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros:"));
        jPanel7.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemCategory.setText("Categoría:");
        jlItemCategory.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel15.add(jlItemCategory);

        moKeyItemCategory.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(moKeyItemCategory);

        jPanel7.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemClass.setText("Clase:");
        jlItemClass.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel16.add(jlItemClass);

        moKeyItemClass.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(moKeyItemClass);

        jPanel7.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemType.setText("Tipo:");
        jlItemType.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel17.add(jlItemType);

        moKeyItemType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(moKeyItemType);

        jPanel7.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemFilter.setText("Filtro:");
        jlItemFilter.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel18.add(jlItemFilter);

        jtfItemFilter.setEditable(false);
        jtfItemFilter.setFocusable(false);
        jtfItemFilter.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(jtfItemFilter);

        jPanel7.add(jPanel18);

        jPanel4.add(jPanel7);

        jpSettings.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Comandos:"));
        jPanel8.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbNewItem.setText("Nuevo");
        jbNewItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jbNewItem);

        jPanel8.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbReloadItems.setText("Refrescar");
        jbReloadItems.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jbReloadItems);

        jPanel8.add(jPanel20);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel8.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel8.add(jPanel22);

        jpSettings.add(jPanel8, java.awt.BorderLayout.EAST);

        getContentPane().add(jpSettings, java.awt.BorderLayout.NORTH);

        jpItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones disponibles:"));
        jpItems.setLayout(new java.awt.BorderLayout(0, 5));

        jpItemsNorth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFind.setText("Búsqueda:");
        jlFind.setPreferredSize(new java.awt.Dimension(75, 23));
        jpItemsNorth.add(jlFind);

        moTextFind.setPreferredSize(new java.awt.Dimension(300, 23));
        jpItemsNorth.add(moTextFind);

        jbClearFind.setIcon(miClient.getImageIcon(DImgConsts.CMD_STD_CLEAR));
        jbClearFind.setToolTipText("Limpiar");
        jbClearFind.setPreferredSize(new java.awt.Dimension(23, 23));
        jpItemsNorth.add(jbClearFind);

        jpItems.add(jpItemsNorth, java.awt.BorderLayout.NORTH);

        jpItemsCenter.setLayout(new java.awt.BorderLayout());
        jpItems.add(jpItemsCenter, java.awt.BorderLayout.CENTER);

        jpItemsSouth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfBranchCode.setEditable(false);
        jtfBranchCode.setToolTipText(DUtilConsts.TXT_BRANCH);
        jtfBranchCode.setFocusable(false);
        jtfBranchCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jpItemsSouth.add(jtfBranchCode);

        jtfBranchWarehouseCode.setEditable(false);
        jtfBranchWarehouseCode.setToolTipText(DUtilConsts.TXT_BRANCH_WAH);
        jtfBranchWarehouseCode.setFocusable(false);
        jtfBranchWarehouseCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jpItemsSouth.add(jtfBranchWarehouseCode);

        jtfYear.setEditable(false);
        jtfYear.setToolTipText(DUtilConsts.TXT_FISCAL_YEAR);
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jpItemsSouth.add(jtfYear);

        jlDummy01.setPreferredSize(new java.awt.Dimension(50, 23));
        jpItemsSouth.add(jlDummy01);

        jtfItemPriceType.setEditable(false);
        jtfItemPriceType.setToolTipText("Lista de precios");
        jtfItemPriceType.setFocusable(false);
        jtfItemPriceType.setPreferredSize(new java.awt.Dimension(125, 23));
        jpItemsSouth.add(jtfItemPriceType);

        jtfDiscountPercentage.setEditable(false);
        jtfDiscountPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDiscountPercentage.setToolTipText("Descuento adicional");
        jtfDiscountPercentage.setFocusable(false);
        jtfDiscountPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jpItemsSouth.add(jtfDiscountPercentage);

        jtfTaxGroup.setEditable(false);
        jtfTaxGroup.setToolTipText("Grupo de impuestos");
        jtfTaxGroup.setFocusable(false);
        jtfTaxGroup.setPreferredSize(new java.awt.Dimension(175, 23));
        jpItemsSouth.add(jtfTaxGroup);

        jtfTaxRegion.setEditable(false);
        jtfTaxRegion.setToolTipText("Región de impuestos");
        jtfTaxRegion.setFocusable(false);
        jtfTaxRegion.setPreferredSize(new java.awt.Dimension(125, 23));
        jpItemsSouth.add(jtfTaxRegion);

        jtfIdentityType.setEditable(false);
        jtfIdentityType.setToolTipText("Tipo de persona");
        jtfIdentityType.setFocusable(false);
        jtfIdentityType.setPreferredSize(new java.awt.Dimension(125, 23));
        jpItemsSouth.add(jtfIdentityType);

        jtfDate.setEditable(false);
        jtfDate.setToolTipText("Fecha del movimiento");
        jtfDate.setFocusable(false);
        jtfDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jpItemsSouth.add(jtfDate);

        jpItems.add(jpItemsSouth, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpItems, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        int col = 0;
        DDbConfigCompany configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();
        DGuiClientSessionCustom sessionCustom = (DGuiClientSessionCustom) miClient.getSession().getSessionCustom();

        DGuiUtils.setWindowBounds(this, 1000, 625);

        moFieldKeyGroup = new DGuiFieldKeyGroup(miClient);

        moRadioByCode.setBooleanSettings(moRadioByCode.getText(), false);
        moRadioByName.setBooleanSettings(moRadioByName.getText(), false);
        moRadioByBrand.setBooleanSettings(moRadioByBrand.getText(), false);
        moRadioByManufacturer.setBooleanSettings(moRadioByManufacturer.getText(), false);
        moRadioByComponent.setBooleanSettings(moRadioByComponent.getText(), false);
        moRadioByDepartment.setBooleanSettings(moRadioByDepartment.getText(), false);
        moBoolExactMatch.setBooleanSettings(moBoolExactMatch.getText(), false);
        moBoolOnlyInStock.setBooleanSettings(moBoolOnlyInStock.getText(), false);
        moKeyItemCategory.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemCategory.getText()), false);
        moKeyItemClass.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemClass.getText()), false);
        moKeyItemType.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemType.getText()), false);

        moFields.addField(moRadioByCode);
        moFields.addField(moRadioByName);
        moFields.addField(moRadioByBrand);
        moFields.addField(moRadioByManufacturer);
        moFields.addField(moRadioByComponent);
        moFields.addField(moRadioByDepartment);
        moFields.addField(moBoolExactMatch);
        moFields.addField(moBoolOnlyInStock);
        moFields.addField(moKeyItemCategory);
        moFields.addField(moKeyItemClass);
        moFields.addField(moKeyItemType);

        moFields.setFormButton(jbSave);

        jbSave.setText(DGuiConsts.TXT_BTN_OK);

        moTextFind.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    if (moGridCurrent != null) {
                        moGridCurrent.getTable().requestFocus();
                    }
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                renderItems();
            }
        });

        switch (mnFormSubtype) {
            case DModSysConsts.TS_IOG_CT_IN:
                mbShowPrices = false;
                mbOnlyInStock = false;
                setTitle("Buscar ítem para entrada");
                break;
            case DModSysConsts.TS_IOG_CT_OUT:
                mbShowPrices = true;
                mbOnlyInStock = true;
                setTitle("Buscar ítem para salida");
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        mbOnlyInventoriable = false;
        mbOnlyConvertible = false;
        mbValidateStock = true;

        mtDate = miClient.getSession().getWorkingDate();
        mnYear = DLibTimeUtils.digestYear(mtDate)[0];
        mnItemPriceType = DModSysConsts.MS_ITM_PRC_TP_SRP;
        mnIdentityType = sessionCustom.getIdentityTypeDefault();
        mnItemFilter = DTrnConsts.ITEM_FILTER_ALL;
        mdQuantity = 0;
        mdDiscountPercentage = 0;
        manWarehouseKey = new int[] { DUtilConsts.BPR_CO_ID, DUtilConsts.BPR_BRA_ID, DUtilConsts.BRA_WAH_ID };
        manTaxGroupKey = new int[] { ((DDbConfigCompany) miClient.getSession().getConfigCompany()).getFkTaxGroupId_n() };
        manTaxRegionKey = new int[] { ((DDbConfigBranch) miClient.getSession().getConfigBranch()).getFkTaxRegionId() };
        manDefaultItemCategoryKey = null;
        manDefaultItemClassKey = null;
        manDefaultItemTypeKey = null;

        moRadioByBrand.setEnabled(configCompany.isBrandApplying());
        moRadioByManufacturer.setEnabled(configCompany.isManufacturerApplying());
        moRadioByComponent.setEnabled(configCompany.isComponentApplying());
        moRadioByDepartment.setEnabled(configCompany.isDepartmentApplying());

        moBoolExactMatch.setSelected(false);
        moBoolOnlyInStock.setSelected(mbOnlyInStock);
        moFieldKeyGroup.resetGroup();

        displayDate();
        displayItemPriceType();
        displayIdentityType();
        displayItemFilter();
        displayQuantity();
        displayDiscountPercentage();
        displayBranchWarehouse();
        displayTaxGroup();
        displayTaxRegion();

        computeTaxGroupConfigRow();

        col = 0;
        maoCommonColumns = new DGridColumnForm[7];
        maoCommonColumns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "Categoría ítem");
        maoCommonColumns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "Clase ítem");
        maoCommonColumns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo ítem");
        maoCommonColumns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Existencia");
        maoCommonColumns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "Unidad");
        maoCommonColumns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT_UNIT, "Precio u. $ ML");
        maoCommonColumns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Precio u. neto $ ML");

        moGridItemsByCode = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, true, "Búsqueda ítems", new DGuiParams(DUtilConsts.PER_FIND_CODE, DUtilConsts.PRC_N)) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int i = 0;
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[8];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Extra");

                for (col = 3; col < columns.length; col++) {
                    columns[col] = maoCommonColumns[i++];
                }

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridItemsByCodePrices = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, true, "Búsqueda ítems", new DGuiParams(DUtilConsts.PER_FIND_CODE, DUtilConsts.PRC_Y)) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int i = 0;
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[10];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Extra");

                for (col = 3; col < columns.length; col++) {
                    columns[col] = maoCommonColumns[i++];
                }

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridItemsByName = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, true, "Búsqueda ítems", new DGuiParams(DUtilConsts.PER_FIND_NAME, DUtilConsts.PRC_N)) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int i = 0;
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[8];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Extra");

                for (col = 3; col < columns.length; col++) {
                    columns[col] = maoCommonColumns[i++];
                }

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridItemsByNamePrices = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, true, "Búsqueda ítems", new DGuiParams(DUtilConsts.PER_FIND_NAME, DUtilConsts.PRC_Y)) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int i = 0;
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[10];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Extra");

                for (col = 3; col < columns.length; col++) {
                    columns[col] = maoCommonColumns[i++];
                }

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridItemsByExtra = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, true, "Búsqueda ítems", new DGuiParams(DUtilConsts.PER_FIND_EXTRA, DUtilConsts.PRC_N)) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int i = 0;
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[8];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Extra");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);

                for (col = 3; col < columns.length; col++) {
                    columns[col] = maoCommonColumns[i++];
                }

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridItemsByExtraPrices = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, true, "Búsqueda ítems", new DGuiParams(DUtilConsts.PER_FIND_EXTRA, DUtilConsts.PRC_Y)) {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int i = 0;
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[10];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Extra");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);

                for (col = 3; col < columns.length; col++) {
                    columns[col] = maoCommonColumns[i++];
                }

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridItemsByCode.setPaneFormOwner(this);
        moGridItemsByCodePrices.setPaneFormOwner(this);
        moGridItemsByName.setPaneFormOwner(this);
        moGridItemsByNamePrices.setPaneFormOwner(this);
        moGridItemsByExtra.setPaneFormOwner(this);
        moGridItemsByExtraPrices.setPaneFormOwner(this);

        mvFormGrids.add(moGridItemsByCode);
        mvFormGrids.add(moGridItemsByCodePrices);
        mvFormGrids.add(moGridItemsByName);
        mvFormGrids.add(moGridItemsByNamePrices);
        mvFormGrids.add(moGridItemsByExtra);
        mvFormGrids.add(moGridItemsByExtraPrices);

        if (configCompany.isItemCodeApplying()) {
            moRadioByCode.setSelected(true);
            itemStateRadioByCode();
        }
        else {
            moRadioByName.setSelected(true);
            itemStateRadioByName();
        }
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            moTextFind.requestFocus();
        }
    }

    private void computeTaxGroupConfigRow() {
        moTaxGroupConfigRow = DTrnUtils.getTaxGroupConfigRow(miClient.getSession(), manTaxGroupKey, manTaxRegionKey, mnIdentityType, mtDate);
    }

    private void readItems(final boolean renderItems) {
        int findMode = DLibConsts.UNDEFINED;

        if (moRadioByCode.isSelected()) {
            findMode = DTrnConsts.FIND_MODE_BY_CODE;
        }
        else if (moRadioByName.isSelected()) {
            findMode = DTrnConsts.FIND_MODE_BY_NAME;
        }
        else if (moRadioByBrand.isSelected()) {
            findMode = DTrnConsts.FIND_MODE_BY_BRD;
        }
        else if (moRadioByManufacturer.isSelected()) {
            findMode = DTrnConsts.FIND_MODE_BY_MFR;
        }
        else if (moRadioByComponent.isSelected()) {
            findMode = DTrnConsts.FIND_MODE_BY_CMP;
        }
        else if (moRadioByDepartment.isSelected()) {
            findMode = DTrnConsts.FIND_MODE_BY_DEP;
        }

        if (mbShowPrices) {
            mvFindItems = DTrnUtils.readFindItems(miClient.getSession(), mnItemFilter, findMode, mnYear, manWarehouseKey, mnItemPriceType, moTaxGroupConfigRow);
        }
        else {
            mvFindItems = DTrnUtils.readFindItems(miClient.getSession(), mnItemFilter, findMode, mnYear, manWarehouseKey);
        }

        if (renderItems) {
            renderItems();
        }
    }

    private void renderItems() {
        double taxRate = 0;
        String text = moTextFind.getValue().toUpperCase();
        DRowFindItem rowFindItem = null;
        Vector<DGridRow> rows = new Vector<DGridRow>();

        if (mvFindItems != null && mvFindItems.size() > 0) {
            if (text.length() == 0) {
                for (DRowFindItem findItem : mvFindItems) {
                    if (mbOnlyInStock && findItem.isInventoriable() && findItem.getStock() == 0) {
                        continue;
                    }
                    if (mbOnlyInventoriable && !findItem.isInventoriable()) {
                        continue;
                    }
                    if (mbOnlyConvertible && !findItem.isConvertible()) {
                        continue;
                    }

                    if (moKeyItemType.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemTypeKey(), moKeyItemType.getValue())) {
                        continue;
                    }
                    else if (moKeyItemClass.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemClassKey(), moKeyItemClass.getValue())) {
                        continue;
                    }
                    else if (moKeyItemCategory.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemCategoryKey(), moKeyItemCategory.getValue())) {
                        continue;
                    }

                    rows.add(findItem);
                }
            }
            else {
                if (moBoolExactMatch.isSelected()) {
                    for (DRowFindItem findItem : mvFindItems) {
                        if (((String) findItem.getRowValueAt(0)).startsWith(text)) {
                            if (mbOnlyInStock && findItem.isInventoriable() && findItem.getStock() == 0) {
                                continue;
                            }
                            if (mbOnlyInventoriable && !findItem.isInventoriable()) {
                                continue;
                            }
                            if (mbOnlyConvertible && !findItem.isConvertible()) {
                                continue;
                            }

                            if (moKeyItemType.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemTypeKey(), moKeyItemType.getValue())) {
                                continue;
                            }
                            else if (moKeyItemClass.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemClassKey(), moKeyItemClass.getValue())) {
                                continue;
                            }
                            else if (moKeyItemCategory.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemCategoryKey(), moKeyItemCategory.getValue())) {
                                continue;
                            }

                            rows.add(findItem);
                        }
                    }
                }
                else {
                    for (DRowFindItem findItem : mvFindItems) {
                        if (((String) findItem.getRowValueAt(0)).contains(text)) {
                            if (mbOnlyInStock && findItem.isInventoriable() && findItem.getStock() == 0) {
                                continue;
                            }
                            if (mbOnlyInventoriable && !findItem.isInventoriable()) {
                                continue;
                            }
                            if (mbOnlyConvertible && !findItem.isConvertible()) {
                                continue;
                            }

                            if (moKeyItemType.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemTypeKey(), moKeyItemType.getValue())) {
                                continue;
                            }
                            else if (moKeyItemClass.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemClassKey(), moKeyItemClass.getValue())) {
                                continue;
                            }
                            else if (moKeyItemCategory.getSelectedIndex() > 0 && !DLibUtils.compareKeys(findItem.getItemCategoryKey(), moKeyItemCategory.getValue())) {
                                continue;
                            }

                            rows.add(findItem);
                        }
                    }
                }
            }

            if (moTaxGroupConfigRow != null && mbShowPrices) {
                taxRate = DTrnUtils.computeTaxRate(moTaxGroupConfigRow, DTrnUtils.getDpsCategoryByIogCategory(mnFormSubtype));

                for (DGridRow row : rows) {
                    rowFindItem = (DRowFindItem) row;
                    rowFindItem.setPriceNet(rowFindItem.getPrice() * taxRate);
                }
            }
        }

        moGridCurrent.populateGrid(rows);
    }

    private void displayDate() {
        jtfDate.setText(!mbShowPrices ? "" : DLibUtils.DateFormatDate.format(mtDate));
        jtfYear.setText(DLibUtils.DecimalFormatCalendarYear.format(mnYear));
    }

    private void displayItemPriceType() {
        jtfItemPriceType.setText(!mbShowPrices || mnItemPriceType == DLibConsts.UNDEFINED ? "" : (String) miClient.getSession().readField(DModConsts.MS_ITM_PRC_TP, new int[] { mnItemPriceType }, DDbRegistry.FIELD_NAME));
    }

    private void displayIdentityType() {
        jtfIdentityType.setText(!mbShowPrices || mnIdentityType == DLibConsts.UNDEFINED ? "" : (String) miClient.getSession().readField(DModConsts.BS_IDY_TP, new int[] { mnIdentityType }, DDbRegistry.FIELD_NAME));
    }

    private void displayItemFilter() {
        switch (mnItemFilter) {
            case DTrnConsts.ITEM_FILTER_ALL:
                jtfItemFilter.setText(DTrnConsts.TXT_ITEM_FILTER_ALL);
                break;
            case DTrnConsts.ITEM_FILTER_INV:
                jtfItemFilter.setText(DTrnConsts.TXT_ITEM_FILTER_INV);
                break;
            case DTrnConsts.ITEM_FILTER_INV_PAC:
                jtfItemFilter.setText(DTrnConsts.TXT_ITEM_FILTER_INV_PAC);
                break;
            default:
                jtfItemFilter.setText("?");
        }
    }

    private void displayQuantity() {
        jtfQuantity.setText(DLibUtils.getDecimalFormatQuantity().format(mdQuantity));
    }

    private void displayDiscountPercentage() {
        jtfDiscountPercentage.setText(mdDiscountPercentage == 0 ? "" : DLibUtils.getDecimalFormatPercentageDiscount().format(mdDiscountPercentage));
    }

    private void displayBranchWarehouse() {
        jtfBranchCode.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, manWarehouseKey, DDbRegistry.FIELD_CODE));
        jtfBranchWarehouseCode.setText((String) miClient.getSession().readField(DModConsts.CU_WAH, manWarehouseKey, DDbRegistry.FIELD_CODE));
    }

    private void displayTaxGroup() {
        jtfTaxGroup.setText(!mbShowPrices ? "" : (String) miClient.getSession().readField(DModConsts.FU_TAX_GRP, manTaxGroupKey, DDbRegistry.FIELD_NAME));
    }

    private void displayTaxRegion() {
        jtfTaxRegion.setText(!mbShowPrices ? "" : (String) miClient.getSession().readField(DModConsts.FU_TAX_REG, manTaxRegionKey, DDbRegistry.FIELD_NAME));
    }

    private void setCurrentGrid(DGridPaneForm grid) {
        moGridCurrent = grid;

        jpItemsCenter.removeAll();
        jpItemsCenter.add(moGridCurrent);
        jpItemsCenter.validate();
        jpItemsCenter.repaint();

        moTextFind.setValue("");
        moTextFind.requestFocus();
    }

    private void actionTextFind() {
        moGridCurrent.getTable().requestFocus();
    }

    private void actionClearFind() {
        moTextFind.setValue("");
        moTextFind.requestFocus();

        renderItems();
    }

    private void actionNewItem() {
        DDbItem item = null;

        miClient.getSession().showForm(DModConsts.IU_ITM, DLibConsts.UNDEFINED, null);

        item = (DDbItem) miClient.getSession().getModule(DModConsts.MOD_ITM).getLastRegistry();

        if (item != null) {
            mbNewRegistries = true;
            readItems(false);   // render items after setting text to find

            if (moRadioByCode.isSelected()) {
                moTextFind.setValue(item.getCode());
            }
            else if (moRadioByName.isSelected()) {
                moTextFind.setValue(item.getName());
            }
            else if (moRadioByBrand.isSelected()) {
                moTextFind.setValue(miClient.getSession().readField(DModConsts.IU_BRD, new int[] { item.getFkBrandId() }, DDbRegistry.FIELD_NAME));
            }
            else if (moRadioByManufacturer.isSelected()) {
                moTextFind.setValue(miClient.getSession().readField(DModConsts.IU_MFR, new int[] { item.getFkManufacturerId() }, DDbRegistry.FIELD_NAME));
            }
            else if (moRadioByComponent.isSelected()) {
                moTextFind.setValue(miClient.getSession().readField(DModConsts.IU_CMP, new int[] { item.getFkComponentId() }, DDbRegistry.FIELD_NAME));
            }
            else if (moRadioByDepartment.isSelected()) {
                moTextFind.setValue(miClient.getSession().readField(DModConsts.IU_DEP, new int[] { item.getFkDepartmentId() }, DDbRegistry.FIELD_NAME));
            }

            renderItems();
            moTextFind.requestFocus();
        }
    }

    private void itemStateRadioByCode() {
        setCurrentGrid(!mbShowPrices ? moGridItemsByCode : moGridItemsByCodePrices);
        readItems(true);
    }

    private void itemStateRadioByName() {
        setCurrentGrid(!mbShowPrices ? moGridItemsByName : moGridItemsByNamePrices);
        readItems(true);
    }

    private void itemStateRadioByExtra() {
        setCurrentGrid(!mbShowPrices ? moGridItemsByExtra : moGridItemsByExtraPrices);
        readItems(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup jButtonGroup;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClearFind;
    private javax.swing.JButton jbNewItem;
    private javax.swing.JButton jbReloadItems;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlFind;
    private javax.swing.JLabel jlItemCategory;
    private javax.swing.JLabel jlItemClass;
    private javax.swing.JLabel jlItemFilter;
    private javax.swing.JLabel jlItemType;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JPanel jpItems;
    private javax.swing.JPanel jpItemsCenter;
    private javax.swing.JPanel jpItemsNorth;
    private javax.swing.JPanel jpItemsSouth;
    private javax.swing.JPanel jpSettings;
    private javax.swing.JTextField jtfBranchCode;
    private javax.swing.JTextField jtfBranchWarehouseCode;
    private javax.swing.JTextField jtfDate;
    private javax.swing.JTextField jtfDiscountPercentage;
    private javax.swing.JTextField jtfIdentityType;
    private javax.swing.JTextField jtfItemFilter;
    private javax.swing.JTextField jtfItemPriceType;
    private javax.swing.JTextField jtfQuantity;
    private javax.swing.JTextField jtfTaxGroup;
    private javax.swing.JTextField jtfTaxRegion;
    private javax.swing.JTextField jtfYear;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolExactMatch;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolOnlyInStock;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemCategory;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemClass;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemType;
    private sba.lib.gui.bean.DBeanFieldRadio moRadioByBrand;
    private sba.lib.gui.bean.DBeanFieldRadio moRadioByCode;
    private sba.lib.gui.bean.DBeanFieldRadio moRadioByComponent;
    private sba.lib.gui.bean.DBeanFieldRadio moRadioByDepartment;
    private sba.lib.gui.bean.DBeanFieldRadio moRadioByManufacturer;
    private sba.lib.gui.bean.DBeanFieldRadio moRadioByName;
    private sba.lib.gui.bean.DBeanFieldText moTextFind;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods:
     */

    public void reloadItems() {
        moTextFind.setValue("");
        moTextFind.requestFocus();
        readItems(true);
    }

    public boolean getNewRegistries() {
        return mbNewRegistries;
    }

    /*
     * Overrided methods:
     */

    @Override
    public void addAllListeners() {
        moTextFind.addActionListener(this);
        moRadioByCode.addItemListener(this);
        moRadioByName.addItemListener(this);
        moRadioByBrand.addItemListener(this);
        moRadioByManufacturer.addItemListener(this);
        moRadioByComponent.addItemListener(this);
        moRadioByDepartment.addItemListener(this);
        moBoolExactMatch.addItemListener(this);
        moBoolOnlyInStock.addItemListener(this);
        moKeyItemCategory.addItemListener(this);
        moKeyItemClass.addItemListener(this);
        moKeyItemType.addItemListener(this);
        jbClearFind.addActionListener(this);
        jbNewItem.addActionListener(this);
        jbReloadItems.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moTextFind.removeActionListener(this);
        moRadioByCode.removeItemListener(this);
        moRadioByName.removeItemListener(this);
        moRadioByBrand.removeItemListener(this);
        moRadioByManufacturer.removeItemListener(this);
        moRadioByComponent.removeItemListener(this);
        moRadioByDepartment.removeItemListener(this);
        moBoolExactMatch.removeItemListener(this);
        moBoolOnlyInStock.removeItemListener(this);
        moKeyItemCategory.removeItemListener(this);
        moKeyItemClass.removeItemListener(this);
        moKeyItemType.removeItemListener(this);
        jbClearFind.removeActionListener(this);
        jbNewItem.removeActionListener(this);
        jbReloadItems.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moFieldKeyGroup.initGroup();
        moFieldKeyGroup.addFieldKey(moKeyItemCategory, DModConsts.IS_ITM_CT, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyItemClass, DModConsts.IS_ITM_CL, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyItemType, DModConsts.IS_ITM_TP, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DRowFindItem findItem = null;
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            findItem = (DRowFindItem) moGridCurrent.getSelectedGridRow();

            if (findItem == null) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + moGridCurrent.getName() + "'.");
                validation.setComponent(moGridCurrent.getTable());
            }
            else {
                if (mnFormSubtype == DModSysConsts.TS_IOG_CT_OUT && mbValidateStock) {
                    if (findItem.isInventoriable() && mdQuantity > findItem.getStock()) {
                        validation.setMessage("No se puede procesar el ítem '" + findItem.getName() + "'.\n" +
                                "No hay existencias suficientes en el almacén del documento:\n" +
                                "- unidades requeridas: " + DLibUtils.getDecimalFormatQuantity().format(mdQuantity) + " " + findItem.getUnitCode() + "\n" +
                                "- unidades en existencia: " + DLibUtils.getDecimalFormatQuantity().format(findItem.getStock()) + " " + findItem.getUnitCode() + "");
                        validation.setComponent(moGridCurrent.getTable());
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void initForm() {
        removeAllListeners();

        mbFirstActivation = true;

        reloadCatalogues();
        moFieldKeyGroup.resetGroup();

        if (manDefaultItemTypeKey != null) {
            moKeyItemCategory.setValue(new int[] { manDefaultItemTypeKey[0] });
            moKeyItemClass.setValue(new int[] { manDefaultItemTypeKey[0], manDefaultItemTypeKey[1] });
            moKeyItemType.setValue(manDefaultItemTypeKey);
        }
        else if (manDefaultItemClassKey != null) {
            moKeyItemCategory.setValue(new int[] { manDefaultItemClassKey[0] });
            moKeyItemClass.setValue(manDefaultItemClassKey);
        }
        else if (manDefaultItemCategoryKey != null) {
            moKeyItemCategory.setValue(manDefaultItemCategoryKey);
        }

        reloadItems();

        addAllListeners();
    }

    @Override
    public void resetForm() {
        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;
        mbNewRegistries = false;
    }

    @Override
    public void setValue(final int type, final Object value) {
        int[] key = null;

        switch (type) {
            case DModSysConsts.FLAG_EXACT_MATCH:
                moBoolExactMatch.setSelected((Boolean) value);
                break;

            case DModSysConsts.FLAG_SHOW_PRICES:
                mbShowPrices = (Boolean) value;
                break;

            case DModSysConsts.FLAG_ONLY_IN_STOCK:
                mbOnlyInStock = (Boolean) value;
                moBoolOnlyInStock.setSelected(mbOnlyInStock);
                break;

            case DModSysConsts.FLAG_ONLY_INVENTORIABLE:
                mbOnlyInventoriable = (Boolean) value;
                break;

            case DModSysConsts.FLAG_ONLY_CONVERTIBLE:
                mbOnlyConvertible = (Boolean) value;
                break;

            case DModSysConsts.FLAG_VALIDATE_STOCK:
                mbValidateStock = (Boolean) value;
                break;

            case DModSysConsts.PARAM_ITM_FILTER:
                mnItemFilter = (Integer) value;
                displayItemFilter();
                break;

            case DModSysConsts.PARAM_ITM_CT_KEY:
                key = (int[]) value;
                moKeyItemCategory.setValue(key);
                break;

            case DModSysConsts.PARAM_ITM_CL_KEY:
                key = (int[]) value;
                moKeyItemCategory.setValue(new int[] { key[0] });
                moKeyItemClass.setValue(key);
                break;

            case DModSysConsts.PARAM_ITM_TP_KEY:
                key = (int[]) value;
                moKeyItemCategory.setValue(new int[] { key[0] });
                moKeyItemClass.setValue(new int[] { key[0], key[1] });
                moKeyItemType.setValue(key);
                break;

            case DModSysConsts.PARAM_BRA_WAH:
                manWarehouseKey = (int[]) value;
                displayBranchWarehouse();
                break;

            case DModSysConsts.PARAM_DATE:
                mtDate = (Date) value;
                mnYear = DLibTimeUtils.digestYear(mtDate)[0];
                displayDate();
                break;

            case DModSysConsts.PARAM_ITM_PRC_TP:
                mnItemPriceType = (Integer) value;
                displayItemPriceType();
                break;

            case DModSysConsts.PARAM_DSC_PER:
                mdDiscountPercentage = (Double) value;
                displayDiscountPercentage();
                break;

            case DModSysConsts.PARAM_BPR_IDY_TP:
                mnIdentityType = (Integer) value;
                displayIdentityType();
                break;

            case DModSysConsts.PARAM_TAX_GRP:
                manTaxGroupKey = (int[]) value;
                displayTaxGroup();
                break;

            case DModSysConsts.PARAM_TAX_REG:
                manTaxRegionKey = (int[]) value;
                displayTaxRegion();
                break;

            case DModSysConsts.PARAM_QTY:
                mdQuantity = (Double) value;
                displayQuantity();
                break;

            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        switch (type) {
            case DModConsts.IU_ITM:
                if (moGridCurrent.getSelectedGridRow() != null) {
                    value = moGridCurrent.getSelectedGridRow().getRowPrimaryKey();
                }
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return value;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();

            if (field == moTextFind) {
                actionTextFind();
            }
        }
        else if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClearFind) {
                actionClearFind();
            }
            else if (button == jbNewItem) {
                actionNewItem();
            }
            else if (button == jbReloadItems) {
                reloadItems();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldRadio) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldRadio field = (DBeanFieldRadio) e.getSource();

                if (field == moRadioByCode) {
                    itemStateRadioByCode();
                }
                else if (field == moRadioByName) {
                    itemStateRadioByName();
                }
                else if (field == moRadioByBrand) {
                    itemStateRadioByExtra();
                }
                else if (field == moRadioByManufacturer) {
                    itemStateRadioByExtra();
                }
                else if (field == moRadioByComponent) {
                    itemStateRadioByExtra();
                }
                else if (field == moRadioByDepartment) {
                    itemStateRadioByExtra();
                }
            }
        }
        else if (e.getSource() instanceof  DBeanFieldBoolean) {
            DBeanFieldBoolean field = (DBeanFieldBoolean) e.getSource();

            if (field == moBoolExactMatch) {
                renderItems();
            }
            else if (field == moBoolOnlyInStock) {
                mbOnlyInStock = moBoolOnlyInStock.getValue();
                renderItems();
            }
        }
        else if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyItemCategory) {
                    renderItems();
                }
                else if (field == moKeyItemClass) {
                    renderItems();
                }
                else if (field == moKeyItemType) {
                    renderItems();
                }
            }
        }
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
