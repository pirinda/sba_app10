/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormDfrPayment.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.trn.form;

import cfd.DElement;
import cfd.ver3.DCfdVer3Consts;
import cfd.ver33.DCfdi33Catalogs;
import cfd.ver33.DElementCfdiRelacionados;
import cfd.ver33.DElementComprobante;
import cfd.ver33.crp10.DElementDoctoRelacionado;
import cfd.ver33.crp10.DElementPagos;
import cfd.ver33.crp10.DElementPagosPago;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sba.gui.DGuiClientApp;
import sba.gui.DGuiClientSessionCustom;
import sba.gui.cat.DXmlCatalog;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.grid.DGridUtils;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiField;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.bpr.db.DDbBizPartner;
import sba.mod.bpr.db.DDbBizPartnerConfig;
import sba.mod.bpr.db.DDbBranch;
import sba.mod.bpr.db.DDbBranchAddress;
import sba.mod.cfg.db.DDbBranchCash;
import sba.mod.cfg.db.DDbConfigBranch;
import sba.mod.cfg.db.DDbConfigCompany;
import sba.mod.cfg.db.DDbLock;
import sba.mod.cfg.db.DLockConsts;
import sba.mod.cfg.db.DLockUtils;
import sba.mod.trn.db.DDbDfr;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DRowDfrPayment;
import sba.mod.trn.db.DRowDfrPaymentDoc;
import sba.mod.trn.db.DTrnAmount;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DFormDfrPayment extends DBeanForm implements ActionListener, FocusListener, ItemListener, ListSelectionListener {
    
    private final static int MODE_ADD = 1;
    private final static int MODE_MODIFY = 2;

    private DDbDfr moRegistry;
    private DDbLock moRegistryLock;
    private DDbBizPartner moBizPartner;
    private DDbBizPartnerConfig moBizPartnerConfig;
    private DDbBranch moBizPartnerBranch;
    private DDbBranchAddress moBizPartnerBranchAddress;
    private DDbConfigCompany moConfigCompany;
    private DDbConfigBranch moConfigBranch;
    private DDbBranchCash moBranchCash;
    private DDialogFindBizPartner moDialogFindBizPartner;
    private DDialogDpsInvoicePicker moDialogDpsInvoicePicker;
    private DGridPaneForm moGridPayments;
    private DGridPaneForm moGridPaymentDocs;
    private Date mtOriginalDate;
    private int mnOriginalYear;
    private JButton mjButtonLaunchCalc;

    private DXmlCatalog moXmlCatalogCfdUsage;
    private DXmlCatalog moXmlCatalogModeOfPayment;
    private DXmlCatalog moXmlCatalogCurrency;
    
    private int mnModePayment;      // current edition mode of payment
    private int mnModePaymentDoc;   // current edition mode of payment of document
    private DDbDps moDoc;           // current DPS in edition of payment of document, if any, CFDI can be a third-party's
    private DElementDoctoRelacionado moDoctoRelacionado; // current edited DoctoRelacionado, if new, then it is null
    private double mdDocTotalPayment;

    /** Creates new form DFormDfrPayment
     * @param client GUI client.
     */
    public DFormDfrPayment(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.TX_DFR_PAY, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgMode = new javax.swing.ButtonGroup();
        jpContainer = new javax.swing.JPanel();
        jpDfr = new javax.swing.JPanel();
        jpDfr1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        moKeyCfdReceptor = new sba.lib.gui.bean.DBeanFieldKey();
        jbCfdReceptorPick = new javax.swing.JButton();
        jbCfdReceptorEdit = new javax.swing.JButton();
        jspHeadquartersAddress = new javax.swing.JScrollPane();
        jtaHeadquartersAddress = new javax.swing.JTextArea();
        jpDfr2 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextCfdSeries = new sba.lib.gui.bean.DBeanFieldText();
        moIntCfdNumber = new sba.lib.gui.bean.DBeanFieldInteger();
        jtfCfdUuid = new javax.swing.JTextField();
        jtfCfdType = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jlDateCfdDate = new javax.swing.JLabel();
        moDateCfdDate = new sba.lib.gui.bean.DBeanFieldDate();
        jLabel2 = new javax.swing.JLabel();
        jtfCfdDatetime = new javax.swing.JTextField();
        jtfCfdDocType = new javax.swing.JTextField();
        jtfCfdDocStatus = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jlMode = new javax.swing.JLabel();
        moRadModeEmit = new sba.lib.gui.bean.DBeanFieldRadio();
        moRadModeEmitPay = new sba.lib.gui.bean.DBeanFieldRadio();
        jlCfdConfirmation = new javax.swing.JLabel();
        moTextCfdConfirmation = new sba.lib.gui.bean.DBeanFieldText();
        jpDfr3 = new javax.swing.JPanel();
        jlCfdUsage = new javax.swing.JLabel();
        moKeyCfdUsage = new sba.lib.gui.bean.DBeanFieldKey();
        jlCfdTaxRegime = new javax.swing.JLabel();
        moKeyCfdTaxRegime = new sba.lib.gui.bean.DBeanFieldKey();
        jlCfdRelated = new javax.swing.JLabel();
        moTextCfdRelated = new sba.lib.gui.bean.DBeanFieldText();
        jbCfdRelatedPick = new javax.swing.JButton();
        jtfCfdRelationType = new javax.swing.JTextField();
        jpDfrRows = new javax.swing.JPanel();
        jpPayments = new javax.swing.JPanel();
        jpPayments1 = new javax.swing.JPanel();
        jPanel48 = new javax.swing.JPanel();
        jPanel50 = new javax.swing.JPanel();
        jlPayDatetime = new javax.swing.JLabel();
        moDatePayDate = new sba.lib.gui.bean.DBeanFieldDate();
        moTextPayTime = new sba.lib.gui.bean.DBeanFieldText();
        jPanel51 = new javax.swing.JPanel();
        jlPayModeOfPaymentType = new javax.swing.JLabel();
        moKeyPayModeOfPaymentType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel2 = new javax.swing.JPanel();
        jlPayCurrency = new javax.swing.JLabel();
        moKeyPayCurrency = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlPayExchangeRate = new javax.swing.JLabel();
        moDecPayExchangeRate = new sba.lib.gui.bean.DBeanFieldDecimal();
        jbPayExchangeRatePick = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlPayAmountPay = new javax.swing.JLabel();
        moCurPayAmountPay = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel5 = new javax.swing.JPanel();
        jlPayAmountLoc = new javax.swing.JLabel();
        moCurPayAmountLoc = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel11 = new javax.swing.JPanel();
        jbPayAdd = new javax.swing.JButton();
        jbPayModify = new javax.swing.JButton();
        jbPayDelete = new javax.swing.JButton();
        jPanel49 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlPayOperation = new javax.swing.JLabel();
        moTextPayOperation = new sba.lib.gui.bean.DBeanFieldText();
        jPanel10 = new javax.swing.JPanel();
        jlPayPayersBank = new javax.swing.JLabel();
        moTextPayPayersBank = new sba.lib.gui.bean.DBeanFieldText();
        jPanel52 = new javax.swing.JPanel();
        jlPayPayersBankFiscalId = new javax.swing.JLabel();
        moTextPayPayersBankFiscalId = new sba.lib.gui.bean.DBeanFieldText();
        jPanel53 = new javax.swing.JPanel();
        jlPayPayersAccount = new javax.swing.JLabel();
        moTextPayPayersAccount = new sba.lib.gui.bean.DBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlPayRecipientsBankFiscalId = new javax.swing.JLabel();
        moTextPayRecipientsBankFiscalId = new sba.lib.gui.bean.DBeanFieldText();
        jPanel9 = new javax.swing.JPanel();
        jlPayRecipientsAccount = new javax.swing.JLabel();
        moTextPayRecipientsAccount = new sba.lib.gui.bean.DBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jbPayOk = new javax.swing.JButton();
        jbPayCancel = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlTotalCfd = new javax.swing.JLabel();
        moCurTotalCfdPay = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        moCurTotalCfdLoc = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel16 = new javax.swing.JPanel();
        jtfOwnBranch = new javax.swing.JTextField();
        jtfBranchCash = new javax.swing.JTextField();
        jpPaymentDocs = new javax.swing.JPanel();
        jpPaymentDocs1 = new javax.swing.JPanel();
        jPanel54 = new javax.swing.JPanel();
        jPanel55 = new javax.swing.JPanel();
        jlDocNumber = new javax.swing.JLabel();
        moTextDocSeries = new sba.lib.gui.bean.DBeanFieldText();
        moIntDocNumber = new sba.lib.gui.bean.DBeanFieldInteger();
        moTextDocUuid = new sba.lib.gui.bean.DBeanFieldText();
        jbDocPick = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jlDocCurrency = new javax.swing.JLabel();
        moKeyDocCurrency = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel19 = new javax.swing.JPanel();
        jlDocExchangeRate = new javax.swing.JLabel();
        moDecDocExchangeRate = new sba.lib.gui.bean.DBeanFieldDecimal();
        jbDocExchangeRatePick = new javax.swing.JButton();
        jbDocExchangeRateInvert = new javax.swing.JButton();
        jtfDocExchangeRate = new javax.swing.JTextField();
        jlDocInstallment = new javax.swing.JLabel();
        moIntDocInstallment = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel24 = new javax.swing.JPanel();
        jlDocBalancePrev = new javax.swing.JLabel();
        moCurDocBalancePrevDoc = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        moCurDocBalancePrevPay = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel26 = new javax.swing.JPanel();
        jlDocPayment = new javax.swing.JLabel();
        moCurDocPaymentDoc = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        moCurDocPaymentPay = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel56 = new javax.swing.JPanel();
        jlDocBalancePend = new javax.swing.JLabel();
        moCurDocBalancePendDoc = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        moCurDocBalancePendPay = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel27 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        jbDocAdd = new javax.swing.JButton();
        jbDocModify = new javax.swing.JButton();
        jbDocDelete = new javax.swing.JButton();
        jPanel29 = new javax.swing.JPanel();
        jbDocOk = new javax.swing.JButton();
        jbDocCancel = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jlTotalPayment = new javax.swing.JLabel();
        moCurTotalPaymentPay = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        moCurTotalPaymentLoc = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpContainer.setLayout(new java.awt.BorderLayout());

        jpDfr.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento:"));
        jpDfr.setLayout(new java.awt.BorderLayout(5, 5));

        jpDfr1.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel7.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moKeyCfdReceptor.setToolTipText("Asociado de negocios");
        moKeyCfdReceptor.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel3.add(moKeyCfdReceptor);

        jbCfdReceptorPick.setText("...");
        jbCfdReceptorPick.setToolTipText("Buscar receptor [F9]");
        jbCfdReceptorPick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbCfdReceptorPick);

        jbCfdReceptorEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_edit.gif"))); // NOI18N
        jbCfdReceptorEdit.setToolTipText("Modificar receptor");
        jbCfdReceptorEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbCfdReceptorEdit);

        jPanel7.add(jPanel3, java.awt.BorderLayout.NORTH);

        jspHeadquartersAddress.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspHeadquartersAddress.setPreferredSize(new java.awt.Dimension(100, 55));

        jtaHeadquartersAddress.setEditable(false);
        jtaHeadquartersAddress.setBackground(java.awt.SystemColor.control);
        jtaHeadquartersAddress.setColumns(20);
        jtaHeadquartersAddress.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jtaHeadquartersAddress.setRows(5);
        jtaHeadquartersAddress.setFocusable(false);
        jspHeadquartersAddress.setViewportView(jtaHeadquartersAddress);

        jPanel7.add(jspHeadquartersAddress, java.awt.BorderLayout.CENTER);

        jpDfr1.add(jPanel7, java.awt.BorderLayout.CENTER);

        jpDfr.add(jpDfr1, java.awt.BorderLayout.CENTER);

        jpDfr2.setLayout(new java.awt.BorderLayout());

        jPanel20.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(60, 23));
        jlNumber.setRequestFocusEnabled(false);
        jPanel21.add(jlNumber);

        moTextCfdSeries.setEditable(false);
        moTextCfdSeries.setText("TEXT");
        moTextCfdSeries.setToolTipText("Serie");
        moTextCfdSeries.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(moTextCfdSeries);

        moIntCfdNumber.setEditable(false);
        moIntCfdNumber.setText("999999");
        moIntCfdNumber.setToolTipText("Folio");
        moIntCfdNumber.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel21.add(moIntCfdNumber);

        jtfCfdUuid.setEditable(false);
        jtfCfdUuid.setText("F5343B75-9A23-4E25-979A-03CA560FEE62");
        jtfCfdUuid.setToolTipText("UUID del comprobante");
        jtfCfdUuid.setFocusable(false);
        jtfCfdUuid.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel21.add(jtfCfdUuid);

        jtfCfdType.setEditable(false);
        jtfCfdType.setText("TEXT");
        jtfCfdType.setToolTipText("Tipo de comprobante");
        jtfCfdType.setFocusable(false);
        jtfCfdType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(jtfCfdType);

        jPanel20.add(jPanel21);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCfdDate.setText("Fecha:*");
        jlDateCfdDate.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel23.add(jlDateCfdDate);

        moDateCfdDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(moDateCfdDate);

        jLabel2.setPreferredSize(new java.awt.Dimension(10, 23));
        jLabel2.setRequestFocusEnabled(false);
        jPanel23.add(jLabel2);

        jtfCfdDatetime.setEditable(false);
        jtfCfdDatetime.setText("01/01/2001 00:00:00");
        jtfCfdDatetime.setToolTipText("Fecha-hora del comprobante");
        jtfCfdDatetime.setFocusable(false);
        jtfCfdDatetime.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel23.add(jtfCfdDatetime);

        jtfCfdDocType.setEditable(false);
        jtfCfdDocType.setText("TEXT");
        jtfCfdDocType.setToolTipText("Tipo de documento");
        jtfCfdDocType.setFocusable(false);
        jtfCfdDocType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jtfCfdDocType);

        jtfCfdDocStatus.setEditable(false);
        jtfCfdDocStatus.setText("TEXT");
        jtfCfdDocStatus.setToolTipText("Estatus del documento");
        jtfCfdDocStatus.setFocusable(false);
        jtfCfdDocStatus.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel23.add(jtfCfdDocStatus);

        jPanel20.add(jPanel23);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMode.setText("Modalidad:");
        jlMode.setPreferredSize(new java.awt.Dimension(60, 23));
        jlMode.setRequestFocusEnabled(false);
        jPanel22.add(jlMode);

        bgMode.add(moRadModeEmit);
        moRadModeEmit.setText("Emitir CFDI");
        jPanel22.add(moRadModeEmit);

        bgMode.add(moRadModeEmitPay);
        moRadModeEmitPay.setText("Emitir CFDI y aplicar pagos");
        moRadModeEmitPay.setPreferredSize(new java.awt.Dimension(183, 23));
        jPanel22.add(moRadModeEmitPay);

        jlCfdConfirmation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCfdConfirmation.setText("Conf.:");
        jlCfdConfirmation.setToolTipText("Número de confirmación");
        jlCfdConfirmation.setPreferredSize(new java.awt.Dimension(52, 23));
        jPanel22.add(jlCfdConfirmation);

        moTextCfdConfirmation.setText("TEXT");
        moTextCfdConfirmation.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(moTextCfdConfirmation);

        jPanel20.add(jPanel22);

        jpDfr2.add(jPanel20, java.awt.BorderLayout.NORTH);

        jpDfr.add(jpDfr2, java.awt.BorderLayout.EAST);

        jpDfr3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdUsage.setText("Uso CFDI:*");
        jlCfdUsage.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDfr3.add(jlCfdUsage);

        moKeyCfdUsage.setPreferredSize(new java.awt.Dimension(210, 23));
        jpDfr3.add(moKeyCfdUsage);

        jlCfdTaxRegime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCfdTaxRegime.setText("Régimen:*");
        jlCfdTaxRegime.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDfr3.add(jlCfdTaxRegime);

        moKeyCfdTaxRegime.setPreferredSize(new java.awt.Dimension(210, 23));
        jpDfr3.add(moKeyCfdTaxRegime);

        jlCfdRelated.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCfdRelated.setText("CFDI relacionado:");
        jlCfdRelated.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDfr3.add(jlCfdRelated);

        moTextCfdRelated.setText("F5343B75-9A23-4E25-979A-03CA560FEE62");
        moTextCfdRelated.setPreferredSize(new java.awt.Dimension(225, 23));
        jpDfr3.add(moTextCfdRelated);

        jbCfdRelatedPick.setText("...");
        jbCfdRelatedPick.setToolTipText("Buscar documento relacionado (DR)");
        jbCfdRelatedPick.setPreferredSize(new java.awt.Dimension(23, 23));
        jpDfr3.add(jbCfdRelatedPick);

        jtfCfdRelationType.setEditable(false);
        jtfCfdRelationType.setText("TEXT");
        jtfCfdRelationType.setToolTipText("Tipo relación");
        jtfCfdRelationType.setFocusable(false);
        jtfCfdRelationType.setPreferredSize(new java.awt.Dimension(48, 23));
        jpDfr3.add(jtfCfdRelationType);

        jpDfr.add(jpDfr3, java.awt.BorderLayout.SOUTH);

        jpContainer.add(jpDfr, java.awt.BorderLayout.NORTH);

        jpDfrRows.setLayout(new java.awt.BorderLayout(0, 5));

        jpPayments.setBorder(javax.swing.BorderFactory.createTitledBorder("Pagos:"));
        jpPayments.setLayout(new java.awt.BorderLayout());

        jpPayments1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel48.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel50.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayDatetime.setText("Fecha pago:*");
        jlPayDatetime.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel50.add(jlPayDatetime);
        jPanel50.add(moDatePayDate);

        moTextPayTime.setText("12:00:00");
        moTextPayTime.setToolTipText("Hora (HH:mm:ss)");
        moTextPayTime.setPreferredSize(new java.awt.Dimension(67, 23));
        jPanel50.add(moTextPayTime);

        jPanel48.add(jPanel50);

        jPanel51.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayModeOfPaymentType.setText("Forma pago:*");
        jlPayModeOfPaymentType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel51.add(jlPayModeOfPaymentType);

        moKeyPayModeOfPaymentType.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel51.add(moKeyPayModeOfPaymentType);

        jPanel48.add(jPanel51);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayCurrency.setText("Moneda:*");
        jlPayCurrency.setPreferredSize(new java.awt.Dimension(75, 23));
        jlPayCurrency.setRequestFocusEnabled(false);
        jPanel2.add(jlPayCurrency);

        moKeyPayCurrency.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel2.add(moKeyPayCurrency);

        jPanel48.add(jPanel2);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayExchangeRate.setText("T. cambio:*");
        jlPayExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlPayExchangeRate);

        moDecPayExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(moDecPayExchangeRate);

        jbPayExchangeRatePick.setText("...");
        jbPayExchangeRatePick.setToolTipText("Buscar tipo de cambio");
        jbPayExchangeRatePick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbPayExchangeRatePick);

        jPanel48.add(jPanel6);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayAmountPay.setText("Monto pago:*");
        jlPayAmountPay.setPreferredSize(new java.awt.Dimension(75, 23));
        jlPayAmountPay.setRequestFocusEnabled(false);
        jPanel4.add(jlPayAmountPay);
        jPanel4.add(moCurPayAmountPay);

        jPanel48.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayAmountLoc.setPreferredSize(new java.awt.Dimension(75, 23));
        jlPayAmountLoc.setRequestFocusEnabled(false);
        jPanel5.add(jlPayAmountLoc);

        moCurPayAmountLoc.setEditable(false);
        jPanel5.add(moCurPayAmountLoc);

        jPanel48.add(jPanel5);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbPayAdd.setText("Agregar");
        jbPayAdd.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel11.add(jbPayAdd);

        jbPayModify.setText("Modificar");
        jbPayModify.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel11.add(jbPayModify);

        jbPayDelete.setText("Eliminar");
        jbPayDelete.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel11.add(jbPayDelete);

        jPanel48.add(jPanel11);

        jpPayments1.add(jPanel48);

        jPanel49.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayOperation.setText("# Operación:");
        jlPayOperation.setPreferredSize(new java.awt.Dimension(100, 23));
        jlPayOperation.setRequestFocusEnabled(false);
        jPanel14.add(jlPayOperation);

        moTextPayOperation.setText("TEXT");
        moTextPayOperation.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel14.add(moTextPayOperation);

        jPanel49.add(jPanel14);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayPayersBank.setText("Nombre emisor CO:");
        jlPayPayersBank.setToolTipText("Banco emisor cuenta ordenante");
        jlPayPayersBank.setPreferredSize(new java.awt.Dimension(100, 23));
        jlPayPayersBank.setRequestFocusEnabled(false);
        jPanel10.add(jlPayPayersBank);

        moTextPayPayersBank.setText("TEXT");
        moTextPayPayersBank.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel10.add(moTextPayPayersBank);

        jPanel49.add(jPanel10);

        jPanel52.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayPayersBankFiscalId.setText("RFC emisor CO:");
        jlPayPayersBankFiscalId.setToolTipText("RFC emisor cuenta ordenante");
        jlPayPayersBankFiscalId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel52.add(jlPayPayersBankFiscalId);

        moTextPayPayersBankFiscalId.setText("TEXT");
        moTextPayPayersBankFiscalId.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel52.add(moTextPayPayersBankFiscalId);

        jPanel49.add(jPanel52);

        jPanel53.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayPayersAccount.setText("# Cta. Ordenante:");
        jlPayPayersAccount.setToolTipText("Número cuenta ordenante");
        jlPayPayersAccount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel53.add(jlPayPayersAccount);

        moTextPayPayersAccount.setText("TEXT");
        moTextPayPayersAccount.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel53.add(moTextPayPayersAccount);

        jPanel49.add(jPanel53);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayRecipientsBankFiscalId.setText("RFC emisor CB:");
        jlPayRecipientsBankFiscalId.setToolTipText("RFC emisor cuenta beneficiario");
        jlPayRecipientsBankFiscalId.setPreferredSize(new java.awt.Dimension(100, 23));
        jlPayRecipientsBankFiscalId.setRequestFocusEnabled(false);
        jPanel8.add(jlPayRecipientsBankFiscalId);

        moTextPayRecipientsBankFiscalId.setText("TEXT");
        moTextPayRecipientsBankFiscalId.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel8.add(moTextPayRecipientsBankFiscalId);

        jPanel49.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayRecipientsAccount.setText("# Cta. Beneficiario:");
        jlPayRecipientsAccount.setToolTipText("Número cuenta beneficiario");
        jlPayRecipientsAccount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlPayRecipientsAccount);

        moTextPayRecipientsAccount.setText("TEXT");
        moTextPayRecipientsAccount.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel9.add(moTextPayRecipientsAccount);

        jPanel49.add(jPanel9);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbPayOk.setText("Aceptar");
        jbPayOk.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel12.add(jbPayOk);

        jbPayCancel.setText("Cancelar");
        jbPayCancel.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel12.add(jbPayCancel);

        jPanel49.add(jPanel12);

        jpPayments1.add(jPanel49);

        jpPayments.add(jpPayments1, java.awt.BorderLayout.PAGE_START);

        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlTotalCfd.setText("Total pagos:");
        jlTotalCfd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jlTotalCfd);

        moCurTotalCfdPay.setEditable(false);
        jPanel1.add(moCurTotalCfdPay);

        moCurTotalCfdLoc.setEditable(false);
        jPanel1.add(moCurTotalCfdLoc);

        jPanel15.add(jPanel1, java.awt.BorderLayout.WEST);

        jtfOwnBranch.setEditable(false);
        jtfOwnBranch.setText("TEXT");
        jtfOwnBranch.setToolTipText(DUtilConsts.TXT_BRANCH);
        jtfOwnBranch.setFocusable(false);
        jtfOwnBranch.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jtfOwnBranch);

        jtfBranchCash.setEditable(false);
        jtfBranchCash.setText("TEXT");
        jtfBranchCash.setToolTipText(DUtilConsts.TXT_BRANCH_CSH);
        jtfBranchCash.setFocusable(false);
        jtfBranchCash.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jtfBranchCash);

        jPanel15.add(jPanel16, java.awt.BorderLayout.EAST);

        jpPayments.add(jPanel15, java.awt.BorderLayout.SOUTH);

        jpDfrRows.add(jpPayments, java.awt.BorderLayout.WEST);

        jpPaymentDocs.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos relacionados:"));
        jpPaymentDocs.setLayout(new java.awt.BorderLayout());

        jpPaymentDocs1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jPanel54.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel55.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocNumber.setText("Folio DR:*");
        jlDocNumber.setToolTipText("Folio documento relacionado");
        jlDocNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel55.add(jlDocNumber);

        moTextDocSeries.setText("TEXT");
        moTextDocSeries.setToolTipText("Serie");
        moTextDocSeries.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel55.add(moTextDocSeries);

        moIntDocNumber.setText("999999");
        moIntDocNumber.setToolTipText("Folio");
        moIntDocNumber.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel55.add(moIntDocNumber);

        moTextDocUuid.setText("F5343B75-9A23-4E25-979A-03CA560FEE62");
        moTextDocUuid.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel55.add(moTextDocUuid);

        jbDocPick.setText("...");
        jbDocPick.setToolTipText("Buscar documento relacionado (DR)");
        jbDocPick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel55.add(jbDocPick);

        jPanel54.add(jPanel55);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocCurrency.setText("Moneda DR:*");
        jlDocCurrency.setToolTipText("Moneda documento relacionado");
        jlDocCurrency.setPreferredSize(new java.awt.Dimension(100, 23));
        jlDocCurrency.setRequestFocusEnabled(false);
        jPanel18.add(jlDocCurrency);

        moKeyDocCurrency.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel18.add(moKeyDocCurrency);

        jPanel54.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocExchangeRate.setText("T. cambio:*");
        jlDocExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlDocExchangeRate);

        moDecDocExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(moDecDocExchangeRate);

        jbDocExchangeRatePick.setText("...");
        jbDocExchangeRatePick.setToolTipText("Buscar tipo de cambio");
        jbDocExchangeRatePick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbDocExchangeRatePick);

        jbDocExchangeRateInvert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_mon.gif"))); // NOI18N
        jbDocExchangeRateInvert.setToolTipText("Invertir tipo de cambio (1/x)");
        jbDocExchangeRateInvert.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbDocExchangeRateInvert);

        jtfDocExchangeRate.setEditable(false);
        jtfDocExchangeRate.setText("TEXT");
        jtfDocExchangeRate.setFocusable(false);
        jtfDocExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jtfDocExchangeRate);

        jlDocInstallment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDocInstallment.setText("Parcialidad DR:*");
        jlDocInstallment.setToolTipText("Parcialidad documento relacionado");
        jlDocInstallment.setPreferredSize(new java.awt.Dimension(100, 23));
        jlDocInstallment.setRequestFocusEnabled(false);
        jPanel19.add(jlDocInstallment);

        moIntDocInstallment.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel19.add(moIntDocInstallment);

        jPanel54.add(jPanel19);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocBalancePrev.setText("Saldo anterior:*");
        jlDocBalancePrev.setPreferredSize(new java.awt.Dimension(100, 23));
        jlDocBalancePrev.setRequestFocusEnabled(false);
        jPanel24.add(jlDocBalancePrev);
        jPanel24.add(moCurDocBalancePrevDoc);

        moCurDocBalancePrevPay.setEditable(false);
        jPanel24.add(moCurDocBalancePrevPay);

        jPanel54.add(jPanel24);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocPayment.setText("Importe pagado:*");
        jlDocPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jlDocPayment.setRequestFocusEnabled(false);
        jPanel26.add(jlDocPayment);
        jPanel26.add(moCurDocPaymentDoc);

        moCurDocPaymentPay.setEditable(false);
        jPanel26.add(moCurDocPaymentPay);

        jPanel54.add(jPanel26);

        jPanel56.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocBalancePend.setText("Saldo insoluto:*");
        jlDocBalancePend.setPreferredSize(new java.awt.Dimension(100, 23));
        jlDocBalancePend.setRequestFocusEnabled(false);
        jPanel56.add(jlDocBalancePend);

        moCurDocBalancePendDoc.setEditable(false);
        jPanel56.add(moCurDocBalancePendDoc);

        moCurDocBalancePendPay.setEditable(false);
        jPanel56.add(moCurDocBalancePendPay);

        jPanel54.add(jPanel56);

        jPanel27.setLayout(new java.awt.BorderLayout());

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbDocAdd.setText("Agregar");
        jbDocAdd.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel28.add(jbDocAdd);

        jbDocModify.setText("Modificar");
        jbDocModify.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel28.add(jbDocModify);

        jbDocDelete.setText("Eliminar");
        jbDocDelete.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel28.add(jbDocDelete);

        jPanel27.add(jPanel28, java.awt.BorderLayout.CENTER);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbDocOk.setText("Aceptar");
        jbDocOk.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel29.add(jbDocOk);

        jbDocCancel.setText("Cancelar");
        jbDocCancel.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel29.add(jbDocCancel);

        jPanel27.add(jPanel29, java.awt.BorderLayout.EAST);

        jPanel54.add(jPanel27);

        jpPaymentDocs1.add(jPanel54);

        jpPaymentDocs.add(jpPaymentDocs1, java.awt.BorderLayout.PAGE_START);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlTotalPayment.setText("Total documentos:");
        jlTotalPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlTotalPayment);

        moCurTotalPaymentPay.setEditable(false);
        jPanel13.add(moCurTotalPaymentPay);

        moCurTotalPaymentLoc.setEditable(false);
        jPanel13.add(moCurTotalPaymentLoc);

        jpPaymentDocs.add(jPanel13, java.awt.BorderLayout.PAGE_END);

        jpDfrRows.add(jpPaymentDocs, java.awt.BorderLayout.CENTER);

        jpContainer.add(jpDfrRows, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        freeLockByCancel();
    }//GEN-LAST:event_formWindowClosing

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 1024, 640);

        moKeyCfdReceptor.setKeySettings(miClient, "receptor", true);
        moKeyCfdReceptor.setFieldButton(jbCfdReceptorPick);
        moTextCfdSeries.setTextSettings(DGuiUtils.getLabelName(jlNumber), 10, 0);
        moIntCfdNumber.setIntegerSettings(DGuiUtils.getLabelName(jlNumber), DGuiConsts.GUI_TYPE_INT_RAW, true);
        moDateCfdDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateCfdDate), true);
        moRadModeEmit.setBooleanSettings(moRadModeEmit.getText(), false);
        moRadModeEmitPay.setBooleanSettings(moRadModeEmitPay.getText(), false);
        moTextCfdConfirmation.setTextSettings(DGuiUtils.getLabelName(jlCfdConfirmation), 5, 0);
        moKeyCfdUsage.setKeySettings(miClient, DGuiUtils.getLabelName(jlCfdUsage), true);
        moKeyCfdTaxRegime.setKeySettings(miClient, DGuiUtils.getLabelName(jlCfdTaxRegime), true);
        moTextCfdRelated.setTextSettings(DGuiUtils.getLabelName(jlCfdRelated), DCfdVer3Consts.LEN_UUID, 0);

        moDatePayDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlPayDatetime), true);
        moTextPayTime.setTextSettings(DGuiUtils.getLabelName(jlPayDatetime), 8, 8); // HH:mm:ss
        moKeyPayModeOfPaymentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlPayModeOfPaymentType), true);
        moKeyPayCurrency.setKeySettings(miClient, DGuiUtils.getLabelName(jlPayCurrency), true);
        moDecPayExchangeRate.setDecimalSettings(DGuiUtils.getLabelName(jlPayExchangeRate), DGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecPayExchangeRate.setFieldButton(jbPayExchangeRatePick);
        moCurPayAmountPay.setCompoundFieldSettings(miClient);
        moCurPayAmountPay.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPayAmountPay), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurPayAmountLoc.setCompoundFieldSettings(miClient);
        moCurPayAmountLoc.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPayAmountLoc), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moTextPayOperation.setTextSettings(DGuiUtils.getLabelName(jlPayOperation), 100, 0);
        moTextPayPayersBank.setTextSettings(DGuiUtils.getLabelName(jlPayPayersBank), 300, 0);
        moTextPayPayersBankFiscalId.setTextSettings(DGuiUtils.getLabelName(jlPayPayersBankFiscalId), 13, 0); // RFC
        moTextPayPayersAccount.setTextSettings(DGuiUtils.getLabelName(jlPayPayersAccount), 50, 0);
        moTextPayRecipientsBankFiscalId.setTextSettings(DGuiUtils.getLabelName(jlPayRecipientsBankFiscalId), 13, 0); // RFC
        moTextPayRecipientsAccount.setTextSettings(DGuiUtils.getLabelName(jlPayRecipientsAccount), 50, 0);
        
        moTextDocSeries.setTextSettings(DGuiUtils.getLabelName(jlDocNumber), 10, 0);
        moIntDocNumber.setIntegerSettings(DGuiUtils.getLabelName(jlDocNumber), DGuiConsts.GUI_TYPE_INT_RAW, true);
        moTextDocUuid.setTextSettings(DGuiUtils.getLabelName(jlDocNumber), DCfdVer3Consts.LEN_UUID, DCfdVer3Consts.LEN_UUID);
        moKeyDocCurrency.setKeySettings(miClient, DGuiUtils.getLabelName(jlDocCurrency), true);
        moDecDocExchangeRate.setDecimalSettings(DGuiUtils.getLabelName(jlDocExchangeRate), DGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecDocExchangeRate.setFieldButton(jbDocExchangeRatePick);
        moIntDocInstallment.setIntegerSettings(DGuiUtils.getLabelName(jlDocInstallment), DGuiConsts.GUI_TYPE_INT, true);
        moCurDocBalancePrevDoc.setCompoundFieldSettings(miClient);
        moCurDocBalancePrevDoc.getField().setDecimalSettings(DGuiUtils.getLabelName(jlDocBalancePrev), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurDocBalancePrevPay.setCompoundFieldSettings(miClient);
        moCurDocBalancePrevPay.getField().setDecimalSettings(DGuiUtils.getLabelName(jlDocBalancePrev), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurDocPaymentDoc.setCompoundFieldSettings(miClient);
        moCurDocPaymentDoc.getField().setDecimalSettings(DGuiUtils.getLabelName(jlDocPayment), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurDocPaymentPay.setCompoundFieldSettings(miClient);
        moCurDocPaymentPay.getField().setDecimalSettings(DGuiUtils.getLabelName(jlDocPayment), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurDocBalancePendDoc.setCompoundFieldSettings(miClient);
        moCurDocBalancePendDoc.getField().setDecimalSettings(DGuiUtils.getLabelName(jlDocBalancePend), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurDocBalancePendPay.setCompoundFieldSettings(miClient);
        moCurDocBalancePendPay.getField().setDecimalSettings(DGuiUtils.getLabelName(jlDocBalancePend), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moCurTotalCfdPay.setCompoundFieldSettings(miClient);
        moCurTotalCfdPay.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotalCfd), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurTotalCfdLoc.setCompoundFieldSettings(miClient);
        moCurTotalCfdLoc.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotalCfd), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurTotalPaymentPay.setCompoundFieldSettings(miClient);
        moCurTotalPaymentPay.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotalPayment), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurTotalPaymentLoc.setCompoundFieldSettings(miClient);
        moCurTotalPaymentLoc.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotalPayment), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moFields.addField(moKeyCfdReceptor);
        //moFields.addField(moTextCfdSeries);
        //moFields.addField(moIntCfdNumber);
        moFields.addField(moDateCfdDate);
        moFields.addField(moRadModeEmit);
        moFields.addField(moRadModeEmitPay);
        moFields.addField(moTextCfdConfirmation);
        moFields.addField(moKeyCfdUsage);
        moFields.addField(moKeyCfdTaxRegime);
        moFields.addField(moTextCfdRelated);
        
        moTextCfdRelated.setNextButton(jbPayAdd);
        
        moFields.addField(moDatePayDate);
        moFields.addField(moTextPayTime);
        moFields.addField(moKeyPayModeOfPaymentType);
        moFields.addField(moKeyPayCurrency);
        moFields.addField(moDecPayExchangeRate);
        moFields.addField(moCurPayAmountPay.getField());
        moFields.addField(moTextPayOperation);
        moFields.addField(moTextPayPayersBank);
        moFields.addField(moTextPayPayersBankFiscalId);
        moFields.addField(moTextPayPayersAccount);
        moFields.addField(moTextPayRecipientsBankFiscalId);
        moFields.addField(moTextPayRecipientsAccount);
        
        moTextPayRecipientsAccount.setNextButton(jbPayOk);
        
        moFields.addField(moTextDocSeries);
        moFields.addField(moIntDocNumber);
        moFields.addField(moTextDocUuid);
        moFields.addField(moKeyDocCurrency);
        moFields.addField(moDecDocExchangeRate);
        moFields.addField(moIntDocInstallment);
        moFields.addField(moCurDocBalancePrevDoc.getField());
        moFields.addField(moCurDocPaymentDoc.getField());
        
        moCurDocPaymentDoc.getField().setNextButton(jbDocOk);

        moFields.setFormButton(jbSave);

        moXmlCatalogCfdUsage = ((DGuiClientApp) miClient).getXmlCatalogsMap().get(DCfdi33Catalogs.CAT_CFDI_USO);
        moXmlCatalogCfdUsage.populateCatalog(moKeyCfdUsage);

        moXmlCatalogModeOfPayment = ((DGuiClientApp) miClient).getXmlCatalogsMap().get(DCfdi33Catalogs.CAT_FDP);
        moXmlCatalogModeOfPayment.populateCatalog(moKeyPayModeOfPaymentType);

        moXmlCatalogCurrency = ((DGuiClientApp) miClient).getXmlCatalogsMap().get(DCfdi33Catalogs.CAT_MON);
        moXmlCatalogCurrency.populateCatalog(moKeyPayCurrency);
        moXmlCatalogCurrency.populateCatalog(moKeyDocCurrency);

        moDialogFindBizPartner = new DDialogFindBizPartner(miClient, DModSysConsts.BS_BPR_CL_CUS);
        moDialogDpsInvoicePicker = new DDialogDpsInvoicePicker(miClient);

        mjButtonLaunchCalc = DGridUtils.createButton(new ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_cal.gif")), "Mostrar calculadora", this);
        jpCommandLeft.add(mjButtonLaunchCalc);

        moGridPayments = new DGridPaneForm(miClient, DModConsts.T_DFR, DModSysConsts.TX_DFR_CRP_PAY, "Pagos") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[11];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DATE_DATETIME, "Fecha pago");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "Forma pago");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Monto pago $");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_EXC_RATE, "T. cambio");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "# Operación");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "RFC emisor CB");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "# Cta. Beneficiario");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "RFC emisor CO");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "# Cta. Ordenante");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Nombre emisor CO");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridPaymentDocs = new DGridPaneForm(miClient, DModConsts.T_DFR, DModSysConsts.TX_DFR_CRP_PAY_DOC, "Documentos relacionados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[9];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "Serie DR");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio DR");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "UUID DR");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Importe pagado $");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Saldo anterior $");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Saldo insoluto $");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda DR");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_2B, "Parcialidad DR");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_EXC_RATE, "T. cambio");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridPayments.setForm(null);
        moGridPaymentDocs.setForm(null);

        jpPayments.add(moGridPayments, BorderLayout.CENTER);
        jpPaymentDocs.add(moGridPaymentDocs, BorderLayout.CENTER);

        mvFormGrids.add(moGridPayments);
        mvFormGrids.add(moGridPaymentDocs);
    }

    private void freeLockByCancel() {
        if (moRegistryLock != null) {
            try {
                DLockUtils.freeLock(miClient.getSession(), moRegistryLock, DLockConsts.LOCK_ST_FREED_CANCEL);
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
            }
            finally {
                moRegistryLock = null;
            }
        }
    }
    
    private Date composePayDatetime() throws Exception {
        return DLibUtils.DateFormatDatetime.parse(DLibUtils.DateFormatDate.format(moDatePayDate.getValue()) + " " + moTextPayTime.getValue());
    }
    
    private void clearFieldsCfd() {
        moTextCfdSeries.resetField();
        moIntCfdNumber.resetField();
        jtfCfdUuid.setText("");
        jtfCfdType.setText("");
        jtfCfdDatetime.setText("");
        jtfCfdDocType.setText("");
        jtfCfdDocStatus.setText("");
        jtfCfdRelationType.setText("");
                
        moDateCfdDate.resetField();
        moTextCfdConfirmation.resetField();
        moKeyCfdUsage.resetField();
        moKeyCfdTaxRegime.resetField();
        moTextCfdRelated.resetField();
        
        bgMode.clearSelection();
    }
    
    private void initFieldsCfd() {
        clearFieldsCfd();
        
        if (moKeyCfdReceptor.getSelectedIndex() > 0) {
            moTextCfdSeries.setValue(moConfigBranch.getEdsCrpSeries());
            moDateCfdDate.setValue(miClient.getSession().getWorkingDate());
            moKeyCfdUsage.setValue(new int[] { moXmlCatalogCfdUsage.getId(moBizPartnerConfig.getCfdUsage()) });
            moKeyCfdTaxRegime.setValue(new int[] { moConfigCompany.getFkTaxRegimeId() });
            
            moRadModeEmitPay.setSelected(true);
        }
    }
    
    private void initFieldsPayment() {
        moDatePayDate.setValue(miClient.getSession().getWorkingDate());
        moTextPayTime.setValue("12:00:00");
        
        if (moKeyCfdReceptor.getSelectedIndex() > 0) {
            moKeyPayModeOfPaymentType.setValue(new int[] { moBizPartnerConfig.getActualFkModeOfPaymentTypeId() });
            moKeyPayCurrency.setValue(new int[] { moBizPartnerConfig.getActualFkCurrencyId(miClient.getSession()) });
        }
    }
    
    private void updateFieldCfdRelationType() {
        jtfCfdRelationType.setText(moTextCfdRelated.getValue().isEmpty() ? "" : DCfdi33Catalogs.REL_TP_SUSTITUCION);
    }
    
    private void updateEnabledFieldsCfd() {
        boolean enable = moGridPayments.getTable().getRowCount() == 0;
        enableFieldsCfdReceptor(enable);
        enableFieldsCfd(enable && moKeyCfdReceptor.getSelectedIndex() > 0);
    }
    
    private void enableFieldsCfdReceptor(final boolean enable) {
        moKeyCfdReceptor.setEnabled(enable);
        jbCfdReceptorPick.setEnabled(enable);
        jbCfdReceptorEdit.setEnabled(enable);
    }
    
    private void enableFieldsCfd(final boolean enable) {
        boolean paymentsAvailable = moGridPayments.getTable().getRowCount() > 0;
        moDateCfdDate.setEditable(enable || paymentsAvailable);
        moRadModeEmit.setEnabled(enable || paymentsAvailable);
        moRadModeEmitPay.setEnabled(enable || paymentsAvailable);
        moTextCfdConfirmation.setEditable(enable || paymentsAvailable);
        moKeyCfdUsage.setEnabled(enable || paymentsAvailable);
        moKeyCfdTaxRegime.setEnabled(enable || paymentsAvailable);
        moTextCfdRelated.setEditable(enable || paymentsAvailable);
        jbCfdRelatedPick.setEnabled(/*enable || paymentsAvailable*/false); // should be enabled when needed, but until implemented!
    }
    
    private void enableFieldsPayments(final boolean enable) {
        moDatePayDate.setEditable(enable);
        moTextPayTime.setEditable(enable);
        moKeyPayModeOfPaymentType.setEnabled(enable);
        moKeyPayCurrency.setEnabled(enable);
        boolean enableXrt = enable && moKeyPayCurrency.getSelectedIndex() > 0 && !miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { moXmlCatalogCurrency.getId(moKeyPayCurrency.getSelectedItem().getCode()) });
        moDecPayExchangeRate.setEnabled(enableXrt); // enable or disable
        jbPayExchangeRatePick.setEnabled(/*enableXrt*/false); // should be enabled when needed, but until implemented!
        moCurPayAmountPay.getField().setEditable(enable);
        moTextPayOperation.setEditable(enable);
        moTextPayPayersBank.setEditable(enable);
        moTextPayPayersBankFiscalId.setEditable(enable);
        moTextPayPayersAccount.setEditable(enable);
        moTextPayRecipientsBankFiscalId.setEditable(enable);
        moTextPayRecipientsAccount.setEditable(enable);
    }
    
    private void enableFieldsPaymentDocs(final boolean enable) {
        moTextDocSeries.setEditable(enable);
        moIntDocNumber.setEditable(enable);
        moTextDocUuid.setEditable(enable);
        jbDocPick.setEnabled(enable);
        moKeyDocCurrency.setEnabled(enable);
        boolean enableXrt = enable && moKeyPayCurrency.getSelectedIndex() > 0 && moKeyDocCurrency.getSelectedIndex() > 0 && moKeyPayCurrency.getSelectedItem().getCode().equals(moKeyDocCurrency.getSelectedItem().getCode());
        moDecDocExchangeRate.setEnabled(enableXrt); // enable or disable
        jbDocExchangeRatePick.setEnabled(/*enableXrt*/false); // should be enabled when needed, but until implemented!
        jbDocExchangeRateInvert.setEnabled(enableXrt);
        moIntDocInstallment.setEditable(enable);
        moCurDocBalancePrevDoc.getField().setEditable(enable);
        moCurDocPaymentDoc.getField().setEditable(enable);
    }
    
    private void enableButtonsPaymentsEdition(final boolean enable) {
        jbPayAdd.setEnabled(enable);
        jbPayModify.setEnabled(enable);
        jbPayDelete.setEnabled(enable);
    }
    
    private void enableButtonsPaymentsOkCancel(final boolean enable) {
        jbPayOk.setEnabled(enable);
        jbPayCancel.setEnabled(enable);
    }
    
    private void enableButtonsPaymentDocsEdition(final boolean enable) {
        jbDocAdd.setEnabled(enable);
        jbDocModify.setEnabled(enable);
        jbDocDelete.setEnabled(enable);
    }
    
    private void enableButtonsPaymentDocsOkCancel(final boolean enable) {
        jbDocOk.setEnabled(enable);
        jbDocCancel.setEnabled(enable);
    }
    
    private boolean validateFieldsCfd() {
        ArrayList<DGuiField> fields = new ArrayList<>();
        fields.add(moKeyCfdReceptor);
        fields.add(moDateCfdDate);
        fields.add(moTextCfdConfirmation);
        fields.add(moKeyCfdUsage);
        fields.add(moKeyCfdTaxRegime);
        fields.add(moTextCfdRelated);
        
        DGuiValidation validation;
        for (DGuiField field : fields) {
            validation = field.validateField();
            if (!validation.isValid()) {
                DGuiUtils.computeValidation(miClient, validation);
                return false;
            }
        }
        
        return true;
    }

    private boolean validateFieldsPayments() {
        ArrayList<DGuiField> fields = new ArrayList<>();
        fields.add(moDatePayDate);
        fields.add(moTextPayTime);
        fields.add(moKeyPayModeOfPaymentType);
        fields.add(moKeyPayCurrency);
        fields.add(moDecPayExchangeRate);
        fields.add(moCurPayAmountPay.getField());
        fields.add(moTextPayOperation);
        fields.add(moTextPayPayersBank);
        fields.add(moTextPayPayersBankFiscalId);
        fields.add(moTextPayPayersAccount);
        fields.add(moTextPayRecipientsBankFiscalId);
        fields.add(moTextPayRecipientsAccount);
        
        DGuiValidation validation = null;
        for (DGuiField field : fields) {
            validation = field.validateField();
            if (!validation.isValid()) {
                break;
            }
        }
        
        if (validation != null) {
            if (validation.isValid()) {
                if (moKeyPayModeOfPaymentType.getSelectedItem().getCode().equals(DCfdi33Catalogs.FDP_POR_DEF)) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + moKeyPayModeOfPaymentType.getFieldName() + "'.");
                    validation.setComponent(moKeyPayModeOfPaymentType);
                }
            }
            
            if (!validation.isValid()) {
                DGuiUtils.computeValidation(miClient, validation);
                return false;
            }
        }
        
        try {
            composePayDatetime();
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
            return false;
        }
        
        return true;
    }

    private boolean validateFieldsPaymentDocs() {
        ArrayList<DGuiField> fields = new ArrayList<>();
        fields.add(moTextDocSeries);
        fields.add(moIntDocNumber);
        fields.add(moTextDocUuid);
        fields.add(moKeyDocCurrency);
        fields.add(moDecDocExchangeRate);
        fields.add(moIntDocInstallment);
        fields.add(moCurDocBalancePrevDoc.getField());
        fields.add(moCurDocPaymentDoc.getField());
        
        DGuiValidation validation;
        for (DGuiField field : fields) {
            validation = field.validateField();
            if (!validation.isValid() && field.isEnabled()) {
                DGuiUtils.computeValidation(miClient, validation);
                return false;
            }
        }
        
        if (moDoc != null) {
            validation = new DGuiValidation();
            if (!moTextDocSeries.getValue().equals(moDoc.getSeries())) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moTextDocSeries.getFieldName() + "'" + DGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + "'" + moDoc.getSeries() + "'");
                validation.setComponent(moTextDocSeries);
            }
            else if (moIntDocNumber.getValue() != moDoc.getNumber()) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moIntDocNumber.getFieldName() + "'" + DGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + "'" + moDoc.getNumber()+ "'");
                validation.setComponent(moIntDocNumber);
            }
            else if (moDoc.getChildDfr() != null && !moTextDocUuid.getValue().equals(moDoc.getChildDfr().getUuid())) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moTextDocUuid.getFieldName() + "'" + DGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + "'" + moDoc.getChildDfr().getUuid()+ "'");
                validation.setComponent(moTextDocUuid);
            }
            else if (moKeyDocCurrency.getValue()[0] != moDoc.getFkCurrencyId()) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moKeyDocCurrency.getFieldName() + "'" + DGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + "'" + miClient.getSession().getSessionCustom().getCurrency(new int[] { moDoc.getFkCurrencyId() }) + "'");
                validation.setComponent(moKeyDocCurrency);
            }
            
            if (!validation.isValid()) {
                DGuiUtils.computeValidation(miClient, validation);
                return false;
            }
        }
        
        return true;
    }
    
    private void renderPayment(final DGridRow row) {
        mdDocTotalPayment = 0;
        Vector<DGridRow> paymentDocs = new Vector<>();
        
        if (row == null) {
            moDatePayDate.resetField();
            moTextPayTime.resetField();
            moKeyPayModeOfPaymentType.resetField();
            moKeyPayCurrency.resetField();
            moDecPayExchangeRate.resetField();
            moCurPayAmountPay.getField().resetField();
            moTextPayOperation.resetField();
            moTextPayPayersBank.resetField();
            moTextPayPayersBankFiscalId.resetField();
            moTextPayPayersAccount.resetField();
            moTextPayRecipientsBankFiscalId.resetField();
            moTextPayRecipientsAccount.resetField();
        }
        else {
            DElementPagosPago pago = ((DRowDfrPayment) row).getPago();
            moDatePayDate.setValue(pago.getAttFechaPago().getDatetime());
            moTextPayTime.setValue(DLibUtils.DateFormatTime.format(pago.getAttFechaPago().getDatetime()));
            moKeyPayModeOfPaymentType.setValue(new int[] { moXmlCatalogModeOfPayment.getId(pago.getAttFormaDePagoP().getString()) });
            moKeyPayCurrency.setValue(new int[] { moXmlCatalogCurrency.getId(pago.getAttMonedaP().getString()) });
            double xrt = pago.getAttTipoCambioP().getDouble();
            moDecPayExchangeRate.setValue(xrt == 0 ? 1d : xrt);
            moCurPayAmountPay.getField().setValue(pago.getAttMonto().getDouble());
            moTextPayOperation.setValue(pago.getAttNumOperacion().getString());
            moTextPayPayersBank.setValue(pago.getAttNomBancoOrdExt().getString());
            moTextPayPayersBankFiscalId.setValue(pago.getAttRfcEmisorCtaOrd().getString());
            moTextPayPayersAccount.setValue(pago.getAttCtaOrdenante().getString());
            moTextPayRecipientsBankFiscalId.setValue(pago.getAttRfcEmisorCtaBen().getString());
            moTextPayRecipientsAccount.setValue(pago.getAttCtaBeneficiario().getString());
            
            for (DElementDoctoRelacionado doctoRelacionado : pago.getEltDoctoRelacionados()) {
                double xrtDoc = doctoRelacionado.getAttTipoCambioDR().getDouble(); // 0 means that currency of payment and payed document is the same

                mdDocTotalPayment = DLibUtils.roundAmount(mdDocTotalPayment + 
                        (doctoRelacionado.getAttImpPagado().getDouble() / (xrtDoc == 0 ? 1d : xrtDoc)));
                paymentDocs.add(new DRowDfrPaymentDoc(doctoRelacionado));
            }
        }
        
        moGridPaymentDocs.populateGrid(paymentDocs, this);
        if (paymentDocs.isEmpty()) {
            renderPaymentDoc(null);
        }
        
        computeTotalPayment();
    }
    
    private void renderPaymentDoc(final DGridRow row) {
        if (row == null) {
            moTextDocSeries.resetField();
            moIntDocNumber.resetField();
            moTextDocUuid.resetField();
            moKeyDocCurrency.resetField();
            moDecDocExchangeRate.resetField();
            moIntDocInstallment.resetField();
            moCurDocBalancePrevDoc.getField().resetField();
            moCurDocPaymentDoc.getField().resetField();
            moCurDocBalancePendDoc.getField().resetField();
            
            moDoc = null;
        }
        else {
            DElementDoctoRelacionado doctoRelacionado = ((DRowDfrPaymentDoc) row).getDoctoRelacionado();
            moTextDocSeries.setValue(doctoRelacionado.getAttSerie().getString());
            moIntDocNumber.setValue(DLibUtils.parseInt(doctoRelacionado.getAttFolio().getString()));
            moTextDocUuid.setValue(doctoRelacionado.getAttIdDocumento().getString());
            moKeyDocCurrency.setValue(new int[] { moXmlCatalogCurrency.getId(doctoRelacionado.getAttMonedaDR().getString()) });
            double xrt = doctoRelacionado.getAttTipoCambioDR().getDouble();
            moDecDocExchangeRate.setValue(xrt == 0 ? 1 : xrt);
            moIntDocInstallment.setValue(doctoRelacionado.getAttNumParcialidad().getInteger());
            moCurDocBalancePrevDoc.getField().setValue(doctoRelacionado.getAttImpSaldoAnt().getDouble());
            moCurDocPaymentDoc.getField().setValue(doctoRelacionado.getAttImpPagado().getDouble());
            moCurDocBalancePendDoc.getField().setValue(doctoRelacionado.getAttImpSaldoInsoluto().getDouble());
            
            try {
                moDoc = DTrnUtils.getDpsByUuid(miClient.getSession(), moTextDocUuid.getText());
            }
            catch (Exception e) {
                // do not show exception, maybe CFDI belogs to thir parties
            }
        }
    }
    
    private void renderDoc() {
        if (moDoc == null) {
            moTextDocSeries.resetField();
            moIntDocNumber.resetField();
            moTextDocUuid.resetField();
            moKeyDocCurrency.resetField();
            moIntDocInstallment.resetField();
            moCurDocBalancePrevDoc.getField().resetField();
            moCurDocPaymentDoc.getField().resetField();
        }
        else {
            moTextDocSeries.setValue(moDoc.getSeries());
            moIntDocNumber.setValue(moDoc.getNumber());
            moTextDocUuid.setValue(moDoc.getChildDfr() == null ? "" : moDoc.getChildDfr().getUuid());
            moKeyDocCurrency.setValue(new int[] { moDoc.getFkCurrencyId() });
            
            int installment = 0;
            try {
                installment = DTrnUtils.getDpsPaymentsCount(miClient.getSession(), DModSysConsts.BS_BPR_CL_CUS, moDoc.getPkDpsId(), moRegistry.getBookkeepingNumberKey_n());
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
            }
            moIntDocInstallment.setValue(installment + 1);
            
            DTrnAmount amount = DTrnUtils.getBalanceForDps(miClient.getSession(), miClient.getSession().getSystemYear(), moDoc.getPrimaryKey());
            moCurDocBalancePrevDoc.getField().setValue(amount.getAmountCy());
            
            if (DLibUtils.compareKeys(moKeyPayCurrency.getValue(), moKeyDocCurrency.getValue())) {
                double remanent = moCurPayAmountPay.getField().getValue() - mdDocTotalPayment;
                moCurDocPaymentDoc.getField().setValue(remanent <= 0 ? 0 : (remanent > amount.getAmountCy() ? amount.getAmountCy() : remanent));
            }
            else {
                moCurDocPaymentDoc.getField().setValue(0d);
            }
        }
        
        computePaymentDocPend();
    }
    
    private void activateInputPayment(int mode) {
        mnModePayment = mode;
        
        switch (mnModePayment) {
            case 0:
                enableFieldsPayments(false);
                enableButtonsPaymentsEdition(true);
                enableButtonsPaymentsOkCancel(false);
                moGridPayments.getTable().setEnabled(true);

                enableButtonsPaymentDocsEdition(true);
                moGridPaymentDocs.getTable().setEnabled(true);

                jbPayAdd.requestFocusInWindow();
                break;
                
            case MODE_ADD:
            case MODE_MODIFY:
                enableFieldsPayments(true);
                enableButtonsPaymentsEdition(false);
                enableButtonsPaymentsOkCancel(true);
                moGridPayments.getTable().setEnabled(false);

                enableButtonsPaymentDocsEdition(false);
                moGridPaymentDocs.getTable().setEnabled(false);

                moDatePayDate.requestFocusInWindow();
                break;
                
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    private void activateInputPaymentDoc(int mode) {
        mnModePaymentDoc = mode;
        
        switch (mnModePaymentDoc) {
            case 0:
                enableButtonsPaymentsEdition(true);
                moGridPayments.getTable().setEnabled(true);

                enableFieldsPaymentDocs(false);
                enableButtonsPaymentDocsEdition(true);
                enableButtonsPaymentDocsOkCancel(false);
                moGridPaymentDocs.getTable().setEnabled(true);
                
                moDoctoRelacionado = null;

                jbDocAdd.requestFocusInWindow();
                break;
                
            case MODE_ADD:
            case MODE_MODIFY:
                enableButtonsPaymentsEdition(false);
                moGridPayments.getTable().setEnabled(false);

                enableFieldsPaymentDocs(true);
                enableButtonsPaymentDocsEdition(false);
                enableButtonsPaymentDocsOkCancel(true);
                moGridPaymentDocs.getTable().setEnabled(false);
                
                if (mnModePaymentDoc == MODE_ADD) {
                    moDoctoRelacionado = null;

                    jbDocPick.doClick();
                }
                else {
                    moDoctoRelacionado = ((DRowDfrPaymentDoc) moGridPaymentDocs.getSelectedGridRow()).getDoctoRelacionado();

                    moTextDocSeries.requestFocusInWindow();
                }
                break;
                
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    private void computeTotalCfd() {
        double paymentPay = 0; // payment currency
        double paymentLoc = 0; // local currency
        HashMap<Integer, String> currencies = new HashMap<>();
        
        for (DGridRow row : moGridPayments.getModel().getGridRows()) {
            DElementPagosPago pago = ((DRowDfrPayment) row).getPago();
            double xrt = pago.getAttTipoCambioP().getDouble(); // 0 means that currency of payment is local currency
            
            int currency = moXmlCatalogCurrency.getId(pago.getAttMonedaP().getString());
            currencies.put(currency, pago.getAttMonedaP().getString());
            
            paymentPay = DLibUtils.roundAmount(paymentPay + 
                    pago.getAttMonto().getDouble());
            paymentLoc = DLibUtils.roundAmount(paymentLoc + 
                    (miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { currency }) ? pago.getAttMonto().getDouble() : DLibUtils.roundAmount(pago.getAttMonto().getDouble() * (xrt == 0d ? 1d : xrt))));
        }
        
        moCurTotalCfdLoc.getField().setValue(paymentLoc);
        
        if (currencies.size() == 1) {
            moCurTotalCfdPay.getField().setValue(paymentPay);
            moCurTotalCfdPay.setCompoundText(currencies.values().toArray()[0].toString());
        }
        else {
            moCurTotalCfdPay.getField().setValue(Double.NaN);
            moCurTotalCfdPay.setCompoundText("");
        }
    }
    
    private void computeTotalPayment() {
        mdDocTotalPayment = 0;
        double paymentLoc = 0; // local currency
        double xrtPay = 0;
        
        if (moGridPayments.getSelectedGridRow() != null) {
            xrtPay = ((DRowDfrPayment) moGridPayments.getSelectedGridRow()).getPago().getAttTipoCambioP().getDouble();
        }
        
        for (DGridRow row : moGridPaymentDocs.getModel().getGridRows()) {
            DElementDoctoRelacionado doctoRelacionado = ((DRowDfrPaymentDoc) row).getDoctoRelacionado();
            double xrtDoc = doctoRelacionado.getAttTipoCambioDR().getDouble(); // 0 means that currency of payment and payed document is the same
            
            mdDocTotalPayment = DLibUtils.roundAmount(mdDocTotalPayment + 
                    (doctoRelacionado.getAttImpPagado().getDouble() / (xrtDoc == 0 ? 1d : xrtDoc)));
            paymentLoc = DLibUtils.roundAmount(paymentLoc + 
                    (doctoRelacionado.getAttImpPagado().getDouble() / (xrtDoc == 0 ? 1d : xrtDoc)) * (xrtPay == 0d ? 1d : xrtPay));
        }
        
        moCurTotalPaymentPay.getField().setValue(mdDocTotalPayment);
        moCurTotalPaymentLoc.getField().setValue(paymentLoc);
    }
    
    /*
     * Action-performed-event handlers
     */

    private void actionPerformedCfdReceptorPick() {
        moDialogFindBizPartner.resetForm();
        moDialogFindBizPartner.initForm();
        moDialogFindBizPartner.setVisible(true);

        if (moDialogFindBizPartner.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
            if (moDialogFindBizPartner.getNewRegistries()) {
                miClient.getSession().populateCatalogue(moKeyCfdReceptor, DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, null);
            }
            moKeyCfdReceptor.setValue(moDialogFindBizPartner.getValue(DModConsts.BU_BPR));
            moKeyCfdReceptor.requestFocus();
        }
    }

    private void actionPerformedCfdReceptorEdit() {
        if (jbCfdReceptorEdit.isEnabled()) {
            if (moKeyCfdReceptor.getSelectedIndex() <= 0) {
                miClient.showMsgBoxInformation(DGuiConsts.MSG_GUI_SELECT_OPTION);
            }
            else {
                int[] key = moKeyCfdReceptor.getValue();
                miClient.getSession().showForm(DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, new DGuiParams(key));

                // XXX Improve this: form must be updated unless user select "Ok" when closing business partner form.
                miClient.getSession().populateCatalogue(moKeyCfdReceptor, DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, null);
                moKeyCfdReceptor.setValue(key);
                moKeyCfdReceptor.requestFocus();
            }
        }
    }

    private void actionPerformedCfdRelatedPick() {

    }

    private void actionPerformedPayExchangeRatePick() {

    }
    
    private void actionPerformedPayAdd() {
        renderPayment(null);
        initFieldsPayment();
        activateInputPayment(MODE_ADD);
    }

    private void actionPerformedPayModify() {
        if (moGridPayments.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            activateInputPayment(MODE_MODIFY);
        }
    }

    private void actionPerformedPayDelete() {
        if (moGridPayments.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(DGridConsts.MSG_SELECT_ROW);
        }
        else if (miClient.showMsgBoxConfirm(DGridConsts.MSG_CONFIRM_REG_DEL) == JOptionPane.YES_OPTION) {
            // update form grid:
            int index = moGridPayments.getTable().getSelectedRow();
            moGridPayments.removeGridRow(index);
            moGridPayments.renderGridRows();
            moGridPayments.setSelectedGridRow(index < moGridPayments.getTable().getRowCount() ? index : index - 1);
            
            // update GUI totals:
            computeTotalCfd();
            
            // update GUI:
            updateEnabledFieldsCfd();
        }
    }

    private void actionPerformedPayOk() {
        if (validateFieldsCfd() && validateFieldsPayments()) {
            Date payDatetime = null;
            try {
                payDatetime = composePayDatetime();
            }
            catch (Exception e) {
                // no exception should be thrown!
            }
            
            DElementPagosPago pago = new DElementPagosPago();
            pago.getAttFechaPago().setDatetime(payDatetime);
            pago.getAttFormaDePagoP().setString(moKeyPayModeOfPaymentType.getSelectedItem().getCode());
            pago.getAttMonedaP().setString(moKeyPayCurrency.getSelectedItem().getCode());
            pago.getAttTipoCambioP().setDouble(miClient.getSession().getSessionCustom().isLocalCurrency(moKeyPayCurrency.getValue()) ? 0d : moDecPayExchangeRate.getValue());
            pago.getAttMonto().setDouble(moCurPayAmountPay.getField().getValue());
            pago.getAttNumOperacion().setString(moTextPayOperation.getValue());
            pago.getAttRfcEmisorCtaOrd().setString(moTextPayPayersBankFiscalId.getValue());
            pago.getAttNomBancoOrdExt().setString(moTextPayPayersBank.getValue());
            pago.getAttCtaOrdenante().setString(moTextPayPayersAccount.getValue());
            pago.getAttRfcEmisorCtaBen().setString(moTextPayRecipientsBankFiscalId.getValue());
            pago.getAttCtaBeneficiario().setString(moTextPayRecipientsAccount.getValue());
            //pago.getAttTipoCadPago().setString(...);
            //pago.getAttCertPago().setString(...);
            //pago.getAttCadPago().setString(...);
            //pago.getAttSelloPago().setString(...);
            
            DRowDfrPayment row = new DRowDfrPayment(pago);
            
            // update form grid:
            switch (mnModePayment) {
                case MODE_ADD:
                    moGridPayments.addGridRow(row);
                    moGridPayments.renderGridRows();
                    moGridPayments.setSelectedGridRow(moGridPayments.getTable().getRowCount() - 1);
                    break;
                    
                case MODE_MODIFY:
                    int index = moGridPayments.getTable().getSelectedRow();
                    moGridPayments.setGridRow(row, index);
                    moGridPayments.renderGridRows();
                    moGridPayments.setSelectedGridRow(index);
                    break;
                    
                default:
                    miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
            }
            
            // update GUI totals:
            computeTotalCfd();
            
            // update GUI:
            activateInputPayment(0);
            updateEnabledFieldsCfd();
            jbDocAdd.requestFocusInWindow();
        }
    }

    private void actionPerformedPayCancel() {
        renderPayment(moGridPayments.getSelectedGridRow());
        activateInputPayment(0);
    }

    private void actionPerformedDocPick() {
        moDialogDpsInvoicePicker.resetForm();
        moDialogDpsInvoicePicker.setValue(DModConsts.BU_BPR, moBizPartner.getPkBizPartnerId());
        moDialogDpsInvoicePicker.setVisible(true);
        if (moDialogDpsInvoicePicker.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
            try {
                moDoc = moDialogDpsInvoicePicker.getRegistry();
                renderDoc();
                moIntDocInstallment.requestFocusInWindow();
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
            }
        }
    }

    private void actionPerformedDocExchangeRatePick() {

    }

    private void actionPerformedDocExchangeRateInvert() {
        moDecDocExchangeRate.setValue(moDecDocExchangeRate.getValue() == 0 ? 0 : 1d / moDecDocExchangeRate.getValue());
        moDecDocExchangeRate.requestFocusInWindow();
    }
    
    private void actionPerformedDocAdd() {
        renderPaymentDoc(null);
        activateInputPaymentDoc(MODE_ADD);
    }

    private void actionPerformedDocModify() {
        if (moGridPaymentDocs.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            activateInputPaymentDoc(MODE_MODIFY);
        }
    }

    private void actionPerformedDocDelete() {
        if (moGridPaymentDocs.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning(DGridConsts.MSG_SELECT_ROW);
        }
        else if (miClient.showMsgBoxConfirm(DGridConsts.MSG_CONFIRM_REG_DEL) == JOptionPane.YES_OPTION) {
            // update form grid:
            int index = moGridPaymentDocs.getTable().getSelectedRow();
            DGridRow removedRow = moGridPaymentDocs.removeGridRow(index);
            moGridPaymentDocs.renderGridRows();
            moGridPaymentDocs.setSelectedGridRow(index < moGridPaymentDocs.getTable().getRowCount() ? index : index - 1);
            
            // update array of DoctoRelacionados of current payment:
            ((DRowDfrPayment) moGridPayments.getSelectedGridRow()).getPago().getEltDoctoRelacionados().remove(((DRowDfrPaymentDoc) removedRow).getDoctoRelacionado());
            
            // update GUI totals:
            computeTotalPayment();
        }
    }

    private void actionPerformedDocOk() {
        if (validateFieldsPaymentDocs()) {
            DElementDoctoRelacionado doctoRelacionado = new DElementDoctoRelacionado();
            
            doctoRelacionado.getAttIdDocumento().setString(moTextDocUuid.getValue());
            doctoRelacionado.getAttSerie().setString(moTextDocSeries.getValue());
            doctoRelacionado.getAttFolio().setString(moIntDocNumber.getValue().toString());
            doctoRelacionado.getAttMonedaDR().setString(moKeyDocCurrency.getSelectedItem().getCode());
            doctoRelacionado.getAttTipoCambioDR().setDouble(miClient.getSession().getSessionCustom().isLocalCurrency(moKeyDocCurrency.getValue()) ? 0d : moDecDocExchangeRate.getValue());
            doctoRelacionado.getAttMetodoDePagoDR().setString(DCfdi33Catalogs.MDP_PPD);
            doctoRelacionado.getAttNumParcialidad().setInteger(moIntDocInstallment.getValue());
            doctoRelacionado.getAttImpSaldoAnt().setDouble(moCurDocBalancePrevDoc.getField().getValue());
            doctoRelacionado.getAttImpPagado().setDouble(moCurDocPaymentDoc.getField().getValue());
            doctoRelacionado.getAttImpSaldoInsoluto().setDouble(moCurDocBalancePendDoc.getField().getValue());
            
            DRowDfrPaymentDoc row = new DRowDfrPaymentDoc(doctoRelacionado);
            
            // update form grid:
            switch (mnModePaymentDoc) {
                case MODE_ADD:
                    moGridPaymentDocs.addGridRow(row);
                    moGridPaymentDocs.renderGridRows();
                    moGridPaymentDocs.setSelectedGridRow(moGridPaymentDocs.getTable().getRowCount() - 1);
                    
                    // update array of DoctoRelacionados of current payment:
                    ((DRowDfrPayment) moGridPayments.getSelectedGridRow()).getPago().getEltDoctoRelacionados().add(doctoRelacionado);
                    break;
                    
                case MODE_MODIFY:
                    int index = moGridPaymentDocs.getTable().getSelectedRow();
                    moGridPaymentDocs.setGridRow(row, index);
                    moGridPaymentDocs.renderGridRows();
                    moGridPaymentDocs.setSelectedGridRow(index);
                    
                    // update array of DoctoRelacionados of current payment:
                    int indexToReplace = ((DRowDfrPayment) moGridPayments.getSelectedGridRow()).getPago().getEltDoctoRelacionados().indexOf(moDoctoRelacionado);
                    ((DRowDfrPayment) moGridPayments.getSelectedGridRow()).getPago().getEltDoctoRelacionados().set(indexToReplace, doctoRelacionado);
                    break;
                    
                default:
                    miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
            }
            
            // update GUI totals:
            computeTotalPayment();
            
            // update GUI:
            activateInputPaymentDoc(0);
        }
    }

    private void actionPerformedDocCancel() {
        renderPaymentDoc(moGridPaymentDocs.getSelectedGridRow());
        activateInputPaymentDoc(0);
    }

    private void actionPerformedLaunchCalc() {
        DLibUtils.launchCalculator();
    }

    /*
     * Focus-event handlers
     */

    private void focusLostCfdRelated() {
        updateFieldCfdRelationType();
    }
    
    private void focusLostDocUuid() {
        if (moTextDocUuid.getText().length() == DCfdVer3Consts.LEN_UUID) {
            try {
                moDoc = DTrnUtils.getDpsByUuid(miClient.getSession(), moTextDocUuid.getText());
                renderDoc();
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
            }
        }
    }
    
    private void computePayment() {
        moCurPayAmountLoc.getField().setValue(DLibUtils.roundAmount(moCurPayAmountPay.getField().getValue() * moDecPayExchangeRate.getValue()));
    }
    
    private void computePaymentDoc() {
        if (moDecDocExchangeRate.getValue() == 0) {
            moCurDocBalancePendPay.getField().setValue(0d);
            moCurDocPaymentPay.getField().setValue(0d);
            moCurDocBalancePrevPay.getField().setValue(0d);
        }
        else {
            moCurDocBalancePendPay.getField().setValue(DLibUtils.roundAmount(moCurDocBalancePendDoc.getField().getValue() / moDecDocExchangeRate.getValue()));
            moCurDocPaymentPay.getField().setValue(DLibUtils.roundAmount(moCurDocPaymentDoc.getField().getValue() / moDecDocExchangeRate.getValue()));
            moCurDocBalancePrevPay.getField().setValue(DLibUtils.roundAmount(moCurDocBalancePrevDoc.getField().getValue() / moDecDocExchangeRate.getValue()));
        }
    }
    
    private void computePaymentDocPend() {
        moCurDocBalancePendDoc.getField().setValue(DLibUtils.roundAmount(moCurDocBalancePrevDoc.getField().getValue() - moCurDocPaymentDoc.getField().getValue()));
        computePaymentDoc();
    }
    
    /*
     * Item-state-changed-event handlers
     */

    private void itemStateChangedCfdReceptor() {
        if (moKeyCfdReceptor.getSelectedIndex() <= 0) {
            moBizPartner = null;
            moBizPartnerConfig = null;
            moBizPartnerBranch = null;
            moBizPartnerBranchAddress = null;

            jtaHeadquartersAddress.setText("");
            
            enableFieldsCfd(false);
            clearFieldsCfd();
            
            enableFieldsPayments(false);
            enableButtonsPaymentsEdition(false);
            enableButtonsPaymentsOkCancel(false);
        }
        else {
            moBizPartner = (DDbBizPartner) miClient.getSession().readRegistry(DModConsts.BU_BPR, moKeyCfdReceptor.getValue());
            moBizPartnerConfig = moBizPartner.getChildConfig(DModSysConsts.BS_BPR_CL_CUS);
            moBizPartnerBranch = moBizPartner.getChildBranches().get(0);
            moBizPartnerBranchAddress = moBizPartnerBranch.getChildAddresses().get(0);

            String address = moBizPartnerBranch.getChildAddresses().get(0).composeAddress(miClient.getSession(), moBizPartnerBranch.getActualFkAddressFormatTypeId(miClient.getSession()));
            jtaHeadquartersAddress.setText(moBizPartner.getFiscalId() + "\n" + address);
            jtaHeadquartersAddress.setCaretPosition(0);
            jspHeadquartersAddress.getVerticalScrollBar().setValue(0);
            
            enableFieldsCfd(true);
            initFieldsCfd();
            
            enableFieldsPayments(false);
            enableButtonsPaymentsEdition(true);
            enableButtonsPaymentsOkCancel(false);
        }
        
        enableFieldsPaymentDocs(false);
        enableButtonsPaymentDocsEdition(false);
        enableButtonsPaymentDocsOkCancel(false);
        
        renderPayment(null);
    }

    private void itemStateChangedPayCurrency() {
        String codePay;
        
        if (moKeyPayCurrency.getSelectedIndex() <= 0) {
            codePay = "";
            
            moDecPayExchangeRate.resetField();
            moDecPayExchangeRate.setEnabled(false);
            jbPayExchangeRatePick.setEnabled(false);
        }
        else {
            codePay = moKeyPayCurrency.getSelectedItem().getCode();
            
            if (miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { moXmlCatalogCurrency.getId(codePay) })) {
                moDecPayExchangeRate.setValue(1d);
                moDecPayExchangeRate.setEnabled(false);
                jbPayExchangeRatePick.setEnabled(false);
            }
            else {
                moDecPayExchangeRate.resetField();
                moDecPayExchangeRate.setEnabled(mnModePayment != 0);
                jbPayExchangeRatePick.setEnabled(/*mnModePayment != 0*/false); // should be enabled when needed, but until implemented!
            }
        }
        
        moCurPayAmountPay.setCompoundText(codePay);
        
        moCurDocBalancePrevPay.setCompoundText(codePay);
        moCurDocPaymentPay.setCompoundText(codePay);
        moCurDocBalancePendPay.setCompoundText(codePay);
        
        moCurTotalPaymentPay.setCompoundText(codePay);
        
        computePayment();
    }

    private void itemStateChangedDocCurrency() {
        String codeDoc;
        
        if (moKeyDocCurrency.getSelectedIndex() <= 0) {
            codeDoc = "";
            
            moDecDocExchangeRate.resetField();
            moDecDocExchangeRate.setEnabled(false);
            jbDocExchangeRatePick.setEnabled(false);
            jbDocExchangeRateInvert.setEnabled(false);
        }
        else {
            String codePay = moKeyPayCurrency.getSelectedItem().getCode();
            codeDoc = moKeyDocCurrency.getSelectedItem().getCode();
            
            if (codePay.equals(codeDoc)) {
                moDecDocExchangeRate.setValue(0d);
                moDecDocExchangeRate.setEnabled(false);
                jbDocExchangeRatePick.setEnabled(false);
                jbDocExchangeRateInvert.setEnabled(false);
            }
            else {
                moDecDocExchangeRate.resetField();
                moDecDocExchangeRate.setEnabled(mnModePaymentDoc != 0);
                jbDocExchangeRatePick.setEnabled(/*mnModePaymentDoc != 0*/false); // should be enabled when needed, but until implemented!
                jbDocExchangeRateInvert.setEnabled(mnModePaymentDoc != 0);
            }
        }
        
        moCurDocBalancePrevDoc.setCompoundText(codeDoc);
        moCurDocPaymentDoc.setCompoundText(codeDoc);
        moCurDocBalancePendDoc.setCompoundText(codeDoc);
        
        computePaymentDocPend();
        
        if (moKeyPayCurrency.getSelectedIndex() <= 0 || moKeyDocCurrency.getSelectedIndex() <= 0) {
            jtfDocExchangeRate.setText("");
        }
        else {
            String codePay = moKeyPayCurrency.getSelectedItem().getCode();
            if (codePay.equals(codeDoc)) {
                jtfDocExchangeRate.setText("");
            }
            else {
                jtfDocExchangeRate.setText(codeDoc + "/" + codePay);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgMode;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel49;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel55;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCfdReceptorEdit;
    private javax.swing.JButton jbCfdReceptorPick;
    private javax.swing.JButton jbCfdRelatedPick;
    private javax.swing.JButton jbDocAdd;
    private javax.swing.JButton jbDocCancel;
    private javax.swing.JButton jbDocDelete;
    private javax.swing.JButton jbDocExchangeRateInvert;
    private javax.swing.JButton jbDocExchangeRatePick;
    private javax.swing.JButton jbDocModify;
    private javax.swing.JButton jbDocOk;
    private javax.swing.JButton jbDocPick;
    private javax.swing.JButton jbPayAdd;
    private javax.swing.JButton jbPayCancel;
    private javax.swing.JButton jbPayDelete;
    private javax.swing.JButton jbPayExchangeRatePick;
    private javax.swing.JButton jbPayModify;
    private javax.swing.JButton jbPayOk;
    private javax.swing.JLabel jlCfdConfirmation;
    private javax.swing.JLabel jlCfdRelated;
    private javax.swing.JLabel jlCfdTaxRegime;
    private javax.swing.JLabel jlCfdUsage;
    private javax.swing.JLabel jlDateCfdDate;
    private javax.swing.JLabel jlDocBalancePend;
    private javax.swing.JLabel jlDocBalancePrev;
    private javax.swing.JLabel jlDocCurrency;
    private javax.swing.JLabel jlDocExchangeRate;
    private javax.swing.JLabel jlDocInstallment;
    private javax.swing.JLabel jlDocNumber;
    private javax.swing.JLabel jlDocPayment;
    private javax.swing.JLabel jlMode;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPayAmountLoc;
    private javax.swing.JLabel jlPayAmountPay;
    private javax.swing.JLabel jlPayCurrency;
    private javax.swing.JLabel jlPayDatetime;
    private javax.swing.JLabel jlPayExchangeRate;
    private javax.swing.JLabel jlPayModeOfPaymentType;
    private javax.swing.JLabel jlPayOperation;
    private javax.swing.JLabel jlPayPayersAccount;
    private javax.swing.JLabel jlPayPayersBank;
    private javax.swing.JLabel jlPayPayersBankFiscalId;
    private javax.swing.JLabel jlPayRecipientsAccount;
    private javax.swing.JLabel jlPayRecipientsBankFiscalId;
    private javax.swing.JLabel jlTotalCfd;
    private javax.swing.JLabel jlTotalPayment;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpDfr;
    private javax.swing.JPanel jpDfr1;
    private javax.swing.JPanel jpDfr2;
    private javax.swing.JPanel jpDfr3;
    private javax.swing.JPanel jpDfrRows;
    private javax.swing.JPanel jpPaymentDocs;
    private javax.swing.JPanel jpPaymentDocs1;
    private javax.swing.JPanel jpPayments;
    private javax.swing.JPanel jpPayments1;
    private javax.swing.JScrollPane jspHeadquartersAddress;
    private javax.swing.JTextArea jtaHeadquartersAddress;
    private javax.swing.JTextField jtfBranchCash;
    private javax.swing.JTextField jtfCfdDatetime;
    private javax.swing.JTextField jtfCfdDocStatus;
    private javax.swing.JTextField jtfCfdDocType;
    private javax.swing.JTextField jtfCfdRelationType;
    private javax.swing.JTextField jtfCfdType;
    private javax.swing.JTextField jtfCfdUuid;
    private javax.swing.JTextField jtfDocExchangeRate;
    private javax.swing.JTextField jtfOwnBranch;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurDocBalancePendDoc;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurDocBalancePendPay;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurDocBalancePrevDoc;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurDocBalancePrevPay;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurDocPaymentDoc;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurDocPaymentPay;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurPayAmountLoc;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurPayAmountPay;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotalCfdLoc;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotalCfdPay;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotalPaymentLoc;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotalPaymentPay;
    private sba.lib.gui.bean.DBeanFieldDate moDateCfdDate;
    private sba.lib.gui.bean.DBeanFieldDate moDatePayDate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecDocExchangeRate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPayExchangeRate;
    private sba.lib.gui.bean.DBeanFieldInteger moIntCfdNumber;
    private sba.lib.gui.bean.DBeanFieldInteger moIntDocInstallment;
    private sba.lib.gui.bean.DBeanFieldInteger moIntDocNumber;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCfdReceptor;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCfdTaxRegime;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCfdUsage;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDocCurrency;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPayCurrency;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPayModeOfPaymentType;
    private sba.lib.gui.bean.DBeanFieldRadio moRadModeEmit;
    private sba.lib.gui.bean.DBeanFieldRadio moRadModeEmitPay;
    private sba.lib.gui.bean.DBeanFieldText moTextCfdConfirmation;
    private sba.lib.gui.bean.DBeanFieldText moTextCfdRelated;
    private sba.lib.gui.bean.DBeanFieldText moTextCfdSeries;
    private sba.lib.gui.bean.DBeanFieldText moTextDocSeries;
    private sba.lib.gui.bean.DBeanFieldText moTextDocUuid;
    private sba.lib.gui.bean.DBeanFieldText moTextPayOperation;
    private sba.lib.gui.bean.DBeanFieldText moTextPayPayersAccount;
    private sba.lib.gui.bean.DBeanFieldText moTextPayPayersBank;
    private sba.lib.gui.bean.DBeanFieldText moTextPayPayersBankFiscalId;
    private sba.lib.gui.bean.DBeanFieldText moTextPayRecipientsAccount;
    private sba.lib.gui.bean.DBeanFieldText moTextPayRecipientsBankFiscalId;
    private sba.lib.gui.bean.DBeanFieldText moTextPayTime;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jbCfdReceptorPick.addActionListener(this);
        jbCfdReceptorEdit.addActionListener(this);
        jbCfdRelatedPick.addActionListener(this);
        jbPayExchangeRatePick.addActionListener(this);
        jbPayAdd.addActionListener(this);
        jbPayModify.addActionListener(this);
        jbPayDelete.addActionListener(this);
        jbPayOk.addActionListener(this);
        jbPayCancel.addActionListener(this);
        jbDocPick.addActionListener(this);
        jbDocExchangeRatePick.addActionListener(this);
        jbDocExchangeRateInvert.addActionListener(this);
        jbDocAdd.addActionListener(this);
        jbDocModify.addActionListener(this);
        jbDocDelete.addActionListener(this);
        jbDocOk.addActionListener(this);
        jbDocCancel.addActionListener(this);
        mjButtonLaunchCalc.addActionListener(this);
        
        moTextCfdRelated.addFocusListener(this);
        moDecPayExchangeRate.addFocusListener(this);
        moCurPayAmountPay.getField().getComponent().addFocusListener(this);
        moTextDocUuid.addFocusListener(this);
        moDecDocExchangeRate.addFocusListener(this);
        moCurDocBalancePrevDoc.getField().getComponent().addFocusListener(this);
        moCurDocPaymentDoc.getField().getComponent().addFocusListener(this);
        
        moKeyCfdReceptor.addItemListener(this);
        moKeyPayCurrency.addItemListener(this);
        moKeyDocCurrency.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbCfdReceptorPick.removeActionListener(this);
        jbCfdReceptorEdit.removeActionListener(this);
        jbCfdRelatedPick.removeActionListener(this);
        jbPayExchangeRatePick.removeActionListener(this);
        jbPayAdd.removeActionListener(this);
        jbPayModify.removeActionListener(this);
        jbPayDelete.removeActionListener(this);
        jbPayOk.removeActionListener(this);
        jbPayCancel.removeActionListener(this);
        jbDocPick.removeActionListener(this);
        jbDocExchangeRatePick.removeActionListener(this);
        jbDocExchangeRateInvert.removeActionListener(this);
        jbDocAdd.removeActionListener(this);
        jbDocModify.removeActionListener(this);
        jbDocDelete.removeActionListener(this);
        jbDocOk.removeActionListener(this);
        jbDocCancel.removeActionListener(this);
        mjButtonLaunchCalc.removeActionListener(this);
        
        moTextCfdRelated.removeFocusListener(this);
        moDecPayExchangeRate.removeFocusListener(this);
        moCurPayAmountPay.getField().getComponent().removeFocusListener(this);
        moTextDocUuid.addFocusListener(this);
        moDecDocExchangeRate.removeFocusListener(this);
        moCurDocBalancePrevDoc.getField().getComponent().removeFocusListener(this);
        moCurDocPaymentDoc.getField().getComponent().removeFocusListener(this);
        
        moKeyCfdReceptor.removeItemListener(this);
        moKeyPayCurrency.removeItemListener(this);
        moKeyDocCurrency.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyCfdReceptor, DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, null);
        miClient.getSession().populateCatalogue(moKeyCfdTaxRegime, DModConsts.CS_TAX_REG, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbDfr) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        // Set registry:

        removeAllListeners();
        reloadCatalogues();

        jbSave.setEnabled(false);
        
        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            
            moConfigCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();
            moConfigBranch = (DDbConfigBranch) miClient.getSession().getConfigBranch();

            DGuiClientSessionCustom sessionCustom = (DGuiClientSessionCustom) miClient.getSession().getSessionCustom();
            if (sessionCustom.getBranchKey() == null) {
                mbCanShowForm = false;
                msCanShowFormMessage = DUtilConsts.ERR_MSG_USR_SES_BRA;
                return;
            }
            else if (sessionCustom.getBranchCashKey() == null) {
                mbCanShowForm = false;
                msCanShowFormMessage = DUtilConsts.ERR_MSG_USR_SES_BRA_CSH;
                return;
            }
            else {
                moBranchCash = (DDbBranchCash) miClient.getSession().readRegistry(DModConsts.CU_CSH, sessionCustom.getBranchCashKey());
            }
            
            jtfRegistryKey.setText("");
            moRegistryLock = null;
        }
        else {
            moConfigCompany = (DDbConfigCompany) miClient.getSession().readRegistry(DModConsts.CU_CFG_CO, moRegistry.getCompanyKey());
            moConfigBranch = (DDbConfigBranch) miClient.getSession().readRegistry(DModConsts.CU_CFG_BRA, moRegistry.getCompanyBranchKey());
            moBranchCash = (DDbBranchCash) miClient.getSession().readRegistry(DModConsts.CU_CSH, moRegistry.getBranchCashKey_n());

            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
            moRegistryLock = DLockUtils.createLock(miClient.getSession(), moRegistry.getRegistryType(), moRegistry.getPkDfrId(), DDbDps.TIMEOUT);
        }
        
        jtfOwnBranch.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, moConfigBranch.getPrimaryKey(), DDbRegistry.FIELD_CODE));
        jtfBranchCash.setText((String) miClient.getSession().readField(DModConsts.CU_CSH, moBranchCash.getPrimaryKey(), DDbRegistry.FIELD_CODE));
        
        DElementComprobante comprobante33 = moRegistry.getElementComprobante33();
        
        mtOriginalDate = miClient.getSession().getWorkingDate();
        mnOriginalYear = DLibTimeUtils.digestYear(mtOriginalDate)[0];

        setFormEditable(true);  // enable all controls before setting form values

        moKeyCfdReceptor.setValue(new int[] { moRegistry.getFkBizPartnerId() });
        itemStateChangedCfdReceptor();
        
        moTextCfdSeries.setValue(moRegistry.getSeries());
        moIntCfdNumber.setValue(moRegistry.getNumber());
        jtfCfdUuid.setText(moRegistry.getUuid());
        jtfCfdType.setText(moRegistry.getFkXmlTypeId() == 0 ? "" : miClient.getSession().readField(DModConsts.TS_XML_TP, new int[] { moRegistry.getFkXmlTypeId() }, DDbRegistry.FIELD_NAME).toString());
        moDateCfdDate.setValue(moRegistry.getDocTs());
        jtfCfdDatetime.setText(moRegistry.getDocTs() == null ? "" : DLibUtils.DateFormatDatetime.format(moRegistry.getDocTs()));
        jtfCfdDocType.setText(moRegistry.getFkXmlSubtypeId() == 0 ? "" : miClient.getSession().readField(DModConsts.TS_XML_STP, new int[] { moRegistry.getFkXmlSubtypeId() }, DDbRegistry.FIELD_NAME).toString());
        jtfCfdDocStatus.setText(moRegistry.getFkXmlStatusId() == 0 ? "" : miClient.getSession().readField(DModConsts.TS_XML_ST, new int[] { moRegistry.getFkXmlStatusId() }, DDbRegistry.FIELD_NAME).toString());
        if (moRegistry.isBookeept()) {
            moRadModeEmitPay.setSelected(true);
        }
        else {
            moRadModeEmit.setSelected(true);
        }
        
        if (comprobante33 == null) {
            moTextCfdConfirmation.setValue("");
            moKeyCfdUsage.setValue(new int[] { 0 });
            moKeyCfdTaxRegime.setValue(new int[] { 0 });
            
            moTextCfdRelated.setText("");
            jtfCfdRelationType.setText("");
        }
        else {
            moTextCfdConfirmation.setValue(comprobante33.getAttConfirmacion().getString());
            moKeyCfdUsage.setValue(new int[] { moXmlCatalogCfdUsage.getId(comprobante33.getEltReceptor().getAttUsoCFDI().getString()) });
            moKeyCfdTaxRegime.setValue(new int[] { DLibUtils.parseInt(comprobante33.getEltEmisor().getAttRegimenFiscal().getString()) });
            
            DElementCfdiRelacionados cfdiRelacionados = comprobante33.getEltOpcCfdiRelacionados();
            if (cfdiRelacionados == null) {
                moTextCfdRelated.setText("");
                jtfCfdRelationType.setText("");
            }
            else {
                moTextCfdRelated.setText(cfdiRelacionados.getEltCfdiRelacionados().get(0).getAttUuid().getString());
                jtfCfdRelationType.setText(cfdiRelacionados.getAttTipoRelacion().getString());
            }
        }
        
        Vector<DGridRow> payments = new Vector<>();
        if (comprobante33 != null) {
            if (comprobante33.getEltOpcComplemento() != null) {
                for (DElement element : comprobante33.getEltOpcComplemento().getElements()) {
                    if (element instanceof DElementPagos) {
                        DElementPagos pagos = (DElementPagos) element;
                        for (DElementPagosPago pago : pagos.getEltPagos()) {
                            payments.add(new DRowDfrPayment(pago));
                        }
                        break;
                    }
                }
            }
        }
        
        moGridPayments.populateGrid(payments, this);
        if (payments.isEmpty()) {
            renderPayment(null);
        }
        else {
            activateInputPayment(0);
        }
        
        updateEnabledFieldsCfd();
        itemStateChangedPayCurrency();
        itemStateChangedDocCurrency();
        
        computeTotalCfd();
        computeTotalPayment();
        
        moDialogFindBizPartner.initForm();
        
        if (moRegistry.isRegistryNew()) {
            jbSave.setEnabled(true);
        }
        else {
            jbSave.setEnabled(!moRegistry.isSystem() && moRegistry.getFkXmlStatusId() != DModSysConsts.TS_XML_ST_ISS);
        }

        addAllListeners();
    }

    @Override
    public DDbDfr getRegistry() throws Exception {
        DDbDfr registry = moRegistry.clone();
        
        //registry.setPkDfrId();
        
        if (registry.isRegistryNew()) {
            registry.setSeries(moConfigBranch.getEdsCrpSeries());
        }
        else {
            registry.setAuxLock(moRegistryLock);
        }

        /* will be set in method DDbDfr.prepareDfr()
        //registry.setNumber();
        registry.setCertificateNumber();
        registry.setSignedText();
        registry.setSignature();
        registry.setUuid();
        */
        registry.setDocTs(moDateCfdDate.getValue());
        /*
        registry.setDocXml();
        registry.setDocXmlRaw();
        registry.setDocXmlAddenda();
        registry.setDocXmlName();
        registry.setCancelStatus();
        registry.setCancelXml();
        registry.setCancelPdf_n();
        */
        registry.setBookeept(moRadModeEmitPay.isSelected());
        /*
        registry.setDeleted();
        registry.setSystem();
        */
        registry.setFkXmlTypeId(DModSysConsts.TS_XML_TP_CFDI_33);
        registry.setFkXmlSubtypeId(DModSysConsts.TS_XML_STP_CFDI_CRP); // essencial for generation of CRP 1.0 when registry is saved
        /*
        registry.setFkXmlStatusId();
        registry.setFkXmlAddendaTypeId();
        registry.setFkXmlSignatureProviderId();
        registry.setFkCertificateId();
        */
        registry.setFkOwnerBizPartnerId(moConfigBranch.getCompanyId());
        registry.setFkOwnerBranchId(moConfigBranch.getBranchId());
        registry.setFkBizPartnerId(moBizPartner.getPkBizPartnerId());
        /*
        registry.setFkDpsId_n();
        */
        registry.setFkCashBizPartnerId_n(moBranchCash.getPkBizPartnerId());
        registry.setFkCashBranchId_n(moBranchCash.getPkBranchId());
        registry.setFkCashCashId_n(moBranchCash.getPkCashId());
        /*
        registry.setFkBookkeepingYearId_n();
        registry.setFkBookkeepingNumberId_n();
        registry.setFkUserIssuedId();
        registry.setFkUserAnnulledId();
        registry.setFkUserInsertId();
        registry.setFkUserUpdateId();
        registry.setTsUserIssued();
        registry.setTsUserAnnulled();
        registry.setTsUserInsert();
        registry.setTsUserUpdate();
        */
        
        /*
        registry.setAuxJustIssued();
        registry.setAuxJustAnnulled();
        */
        registry.setAuxComputeBookkeeping(true);
        /*
        registry.setAuxRewriteXmlOnSave();
        registry.setAuxRegenerateXmlOnSave();
        registry.setAuxXmlSignatureRequestKey();
        */
        
        registry.setDfrConfirmacion(moTextCfdConfirmation.getValue());
        registry.setDfrCfdiRelacionado(moTextCfdRelated.getValue());
        registry.setDfrTaxRegime("" + moKeyCfdTaxRegime.getValue()[0]);
        registry.setDfrCfdUsage(moKeyCfdUsage.getSelectedItem().getCode());
        
        // add DFR complement:
        
        DElementPagos pagos = new DElementPagos();
        for (DGridRow row : moGridPayments.getModel().getGridRows()) {
            pagos.getEltPagos().add(((DRowDfrPayment) row).getPago());
        }
        
        registry.setDfrPagos(pagos);
                
        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (DLibTimeUtils.digestYear(moDateCfdDate.getValue())[0] != mnOriginalYear) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + DGuiUtils.getLabelName(jlDateCfdDate.getText()) + "'" +
                        DGuiConsts.ERR_MSG_FIELD_DATE_YEAR + DLibUtils.DecimalFormatCalendarYear.format(mnOriginalYear) + ".");
                validation.setComponent(moDateCfdDate);
            }
            else if (moGridPayments.getTable().getRowCount() == 0) {
                validation.setMessage(DUtilConsts.ERR_MSG_DOC_NO_ROWS);
                validation.setComponent(jbPayAdd);
            }
            else {
                // validate payments vs. payments applied to documents:
                for (DGridRow row : moGridPayments.getModel().getGridRows()) {
                    DElementPagosPago pago = ((DRowDfrPayment) row).getPago();
                    double payment = DLibUtils.roundAmount(pago.getAttMonto().getDouble());
                    double paymentDocs = 0;
                    
                    for (DElementDoctoRelacionado doctoRelacionado : pago.getEltDoctoRelacionados()) {
                        double xrt = doctoRelacionado.getAttTipoCambioDR().getDouble();
                        double paymentDoc = doctoRelacionado.getAttImpPagado().getDouble();
                        paymentDocs = DLibUtils.roundAmount(paymentDocs + (xrt == 0 ? paymentDoc : DLibUtils.roundAmount(paymentDoc / xrt)));
                    }
                    
                    if ((paymentDocs - payment) > 0d) {
                        moGridPayments.setSelectedGridRow(moGridPayments.getModel().getGridRows().indexOf(row));
                        
                        validation.setMessage("La suma de pagos aplicados $ " + DLibUtils.getDecimalFormatAmount().format(paymentDocs) + " " + pago.getAttMonedaP().getString() + " "
                                + "es mayor al monto del pago $ " + DLibUtils.getDecimalFormatAmount().format(payment) + " " + pago.getAttMonedaP().getString() + ".");
                        break;
                    }
                    else if ((paymentDocs - payment) < 0d) {
                        moGridPayments.setSelectedGridRow(moGridPayments.getModel().getGridRows().indexOf(row));
                        
                        if (miClient.showMsgBoxConfirm("La suma de pagos aplicados $ " + DLibUtils.getDecimalFormatAmount().format(paymentDocs) + " " + pago.getAttMonedaP().getString() + " "
                                + "es menor al monto del pago $ " + DLibUtils.getDecimalFormatAmount().format(payment) + " " + pago.getAttMonedaP().getString() + ".\n"
                                + DGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage("Corregir el monto de los pagos aplicados.");
                            break;
                        }
                    }
                }
            }
        }
        
        if (validation.isValid()) {
            if (moRadModeEmit.isSelected() && miClient.showMsgBoxConfirm("¿Sólo emitir CFDI sin aplicar pagos?") != JOptionPane.YES_OPTION) {
                validation.setMessage("Indicar que se desea emitir CFDI y aplicar pagos.");
                validation.setComponent(moRadModeEmitPay);
            }
        }

        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionCancel() {
        boolean cancel = true;

        if (mnFormStatus == DGuiConsts.FORM_STATUS_EDIT && jbSave.isEnabled()) {
            cancel = miClient.showMsgBoxConfirm(DGuiConsts.MSG_CNF_FORM_CLS) == JOptionPane.YES_OPTION;
        }

        if (cancel) {
            freeLockByCancel();
            super.actionCancel();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbCfdReceptorPick) {
                actionPerformedCfdReceptorPick();
            }
            else if (button == jbCfdReceptorEdit) {
                actionPerformedCfdReceptorEdit();
            }
            else if (button == jbCfdRelatedPick) {
                actionPerformedCfdRelatedPick();
            }
            else if (button == jbPayExchangeRatePick) {
                actionPerformedPayExchangeRatePick();
            }
            else if (button == jbPayAdd) {
                actionPerformedPayAdd();
            }
            else if (button == jbPayModify) {
                actionPerformedPayModify();
            }
            else if (button == jbPayDelete) {
                actionPerformedPayDelete();
            }
            else if (button == jbPayOk) {
                actionPerformedPayOk();
            }
            else if (button == jbPayCancel) {
                actionPerformedPayCancel();
            }
            else if (button == jbDocPick) {
                actionPerformedDocPick();
            }
            else if (button == jbDocExchangeRatePick) {
                actionPerformedDocExchangeRatePick();
            }
            else if (button == jbDocExchangeRateInvert) {
                actionPerformedDocExchangeRateInvert();
            }
            else if (button == jbDocAdd) {
                actionPerformedDocAdd();
            }
            else if (button == jbDocModify) {
                actionPerformedDocModify();
            }
            else if (button == jbDocDelete) {
                actionPerformedDocDelete();
            }
            else if (button == jbDocOk) {
                actionPerformedDocOk();
            }
            else if (button == jbDocCancel) {
                actionPerformedDocCancel();
            }
            else if (button == mjButtonLaunchCalc) {
                actionPerformedLaunchCalc();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldText) {
            DBeanFieldText field = (DBeanFieldText) e.getSource();

            if (field == moTextCfdRelated) {
                focusLostCfdRelated();
            }
            else if (field == moTextDocUuid) {
                focusLostDocUuid();
            }
        }
        else if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();

            if (field == moDecPayExchangeRate) {
                computePayment();
            }
            else if (field == moCurPayAmountPay.getField()) {
                computePayment();
            }
            else if (field == moDecDocExchangeRate) {
                computePaymentDoc();
            }
            else if (field == moCurDocBalancePrevDoc.getField()) {
                computePaymentDocPend();
            }
            else if (field == moCurDocPaymentDoc.getField()) {
                computePaymentDocPend();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyCfdReceptor) {
                    itemStateChangedCfdReceptor();
                }
                else if (field == moKeyPayCurrency) {
                    itemStateChangedPayCurrency();
                }
                else if (field == moKeyDocCurrency) {
                    itemStateChangedDocCurrency();
                }
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() instanceof ListSelectionModel) {
            ListSelectionModel model = (ListSelectionModel) e.getSource();
            
            if (model == moGridPayments.getTable().getSelectionModel()) {
                renderPayment(moGridPayments.getSelectedGridRow());
            }
            else if (model == moGridPaymentDocs.getTable().getSelectionModel()) {
                renderPaymentDoc(moGridPaymentDocs.getSelectedGridRow());
            }
        }
    }
}
