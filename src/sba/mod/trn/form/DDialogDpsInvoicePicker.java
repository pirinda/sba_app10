/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.trn.form;

import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import sa.lib.SLibConsts;
import sba.gui.mygrid.DMyGridRow;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.bpr.db.DBprUtils;
import sba.mod.bpr.db.DDbBizPartner;
import sba.mod.fin.db.DFinUtils;
import sba.mod.trn.db.DDbDps;

/**
 *
 * @author Sergio Flores
 */
public class DDialogDpsInvoicePicker extends DBeanFormDialog implements DGridPaneFormOwner {
    
    private int mnBizPartner;
    private DGridPaneForm moGridDps;

    /**
     * Creates new form DDialogDpsInvoicePicker
     * @param client GUI client.
     */
    public DDialogDpsInvoicePicker(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, 0, 0, "Facturas con saldo");
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgDocs = new javax.swing.ButtonGroup();
        jpDps = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        jtfBizPartnerRo = new javax.swing.JTextField();
        jlBizPartnerCode = new javax.swing.JLabel();
        jtfBizPartnerCodeRo = new javax.swing.JTextField();
        jlYear = new javax.swing.JLabel();
        jtfYearRo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jrDocsPending = new javax.swing.JRadioButton();
        jrDocsAll = new javax.swing.JRadioButton();

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Facturas con saldo:"));
        jpDps.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlBizPartner.setText("Cliente:");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel1.add(jlBizPartner);

        jtfBizPartnerRo.setEditable(false);
        jtfBizPartnerRo.setText("2000");
        jtfBizPartnerRo.setFocusable(false);
        jtfBizPartnerRo.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel1.add(jtfBizPartnerRo);

        jlBizPartnerCode.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlBizPartnerCode.setText("Código:");
        jlBizPartnerCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel1.add(jlBizPartnerCode);

        jtfBizPartnerCodeRo.setEditable(false);
        jtfBizPartnerCodeRo.setText("2000");
        jtfBizPartnerCodeRo.setFocusable(false);
        jtfBizPartnerCodeRo.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel1.add(jtfBizPartnerCodeRo);

        jlYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlYear.setText("Ejercicio:");
        jlYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel1.add(jlYear);

        jtfYearRo.setEditable(false);
        jtfYearRo.setText("2000");
        jtfYearRo.setFocusable(false);
        jtfYearRo.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel1.add(jtfYearRo);

        jLabel1.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel1.add(jLabel1);

        bgDocs.add(jrDocsPending);
        jrDocsPending.setSelected(true);
        jrDocsPending.setText("Facturas con saldo");
        jrDocsPending.setPreferredSize(new java.awt.Dimension(125, 23));
        jrDocsPending.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrDocsPendingItemStateChanged(evt);
            }
        });
        jPanel1.add(jrDocsPending);

        bgDocs.add(jrDocsAll);
        jrDocsAll.setText("Todas las facturas");
        jrDocsAll.setPreferredSize(new java.awt.Dimension(125, 23));
        jrDocsAll.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrDocsAllItemStateChanged(evt);
            }
        });
        jPanel1.add(jrDocsAll);

        jpDps.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jrDocsPendingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrDocsPendingItemStateChanged
        itemStateChanged(evt);
    }//GEN-LAST:event_jrDocsPendingItemStateChanged

    private void jrDocsAllItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrDocsAllItemStateChanged
        itemStateChanged(evt);
    }//GEN-LAST:event_jrDocsAllItemStateChanged

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 960, 600);
        
        jtfYearRo.setText("" + miClient.getSession().getSystemYear());
        
        moGridDps = new DGridPaneForm(miClient, DModConsts.TX_DFR_INV, 0, true, getTitle()) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, false);
            }
            
            @Override
            public void createGridColumns() {
                String category = DBprUtils.getBizPartnerClassNameSng(DModSysConsts.BS_BPR_CL_CUS).toLowerCase();
                
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[15];
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DGridConsts.COL_TITLE_TYPE + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_REG_NUM, DGridConsts.COL_TITLE_NUM + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DATE, DGridConsts.COL_TITLE_DATE + " docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_2B, "Días crédito");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DATE, "Fecha venc.");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CO, DUtilConsts.TXT_BRANCH + " empresa");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, DUtilConsts.TXT_BRANCH + " " + category);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Total $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Saldo SBC $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Saldo $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "UUID");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Tipo XML");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Subtipo XML");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Estatus XML");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };
        
        moGridDps.setForm(null);
        moGridDps.setPaneFormOwner(this);
        jpDps.add(moGridDps, BorderLayout.CENTER);

        mvFormGrids.add(moGridDps);
    }
    
    private void itemStateChanged(ItemEvent evt) {
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            populateGrid();
            moGridDps.getTable().requestFocusInWindow();
        }
    }
    
    private void renderBizPartner() {
        DDbBizPartner customer = (DDbBizPartner) miClient.getSession().readRegistry(DModConsts.BU_BPR, new int[] { mnBizPartner });
        jtfBizPartnerRo.setText(customer.getName());
        jtfBizPartnerCodeRo.setText(customer.getChildConfig(DModSysConsts.BS_BPR_CL_CUS).getCode());
        jtfBizPartnerRo.setCaretPosition(0);
        jtfBizPartnerCodeRo.setCaretPosition(0);
    }
    
    private void populateGrid() {
        try {
            String sql = "SELECT " +
                    "d.id_dps, CONCAT(d.ser, IF(LENGTH(d.ser) = 0, '', '-'), d.num) AS f_num, " +
                    "d.dt, d.cdt_day, ADDDATE(d.dt_cdt, d.cdt_day) AS f_dt_mat, " +
                    "d.tot_cy_r, dt.code, b.id_bpr, b.name, bc.code, bb.name, cb.code, c.code, " +
                    "SUM(bkk.dbt - bkk.cdt) AS f_bal_stc, " +
                    "SUM(IF(bkk.b_avl = 0, 0, bkk.dbt - bkk.cdt)) AS f_bal, " +
                    "dfr.uid, xtp.code, xtp.name, xstp.code, xstp.name, xst.code, xst.name " +
                    "FROM " + DModConsts.TablesMap.get(DModConsts.F_BKK) + " AS bkk " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.T_DPS) + " AS d ON " +
                    "bkk.fk_dps_inv_n = d.id_dps AND bkk.id_yer = " + miClient.getSession().getSystemYear() + " AND bkk.b_del = 0 AND " +
                    "bkk.fk_sys_acc_tp = " + DFinUtils.getSysAccountTypeForBizPartnerClass(DModSysConsts.BS_BPR_CL_CUS) + " AND d.fk_bpr_bpr = " + mnBizPartner + " " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.TS_DPS_TP) + " AS dt ON " +
                    "d.fk_dps_ct = dt.id_dps_ct AND d.fk_dps_cl = dt.id_dps_cl AND d.fk_dps_tp = dt.id_dps_tp " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BPR) + " AS b ON " +
                    "d.fk_bpr_bpr = b.id_bpr " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BPR_CFG) + " AS bc ON " +
                    "d.fk_bpr_bpr = bc.id_bpr AND bc.id_bpr_cl = " + DModSysConsts.BS_BPR_CL_CUS + " " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BRA) + " AS bb ON " +
                    "d.fk_bpr_bpr = bb.id_bpr AND d.fk_bpr_bra = bb.id_bra " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.BU_BRA) + " AS cb ON " +
                    "d.fk_own_bpr = cb.id_bpr AND d.fk_own_bra = cb.id_bra " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.CS_CUR) + " AS c ON " +
                    "d.fk_cur = c.id_cur " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.T_DFR) + " AS dfr ON " +
                    "d.id_dps = dfr.fk_dps_n " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.TS_XML_TP) + " AS xtp ON " +
                    "dfr.fk_xml_tp = xtp.id_xml_tp " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.TS_XML_STP) + " AS xstp ON " +
                    "dfr.fk_xml_stp = xstp.id_xml_stp " +
                    "LEFT OUTER JOIN " + DModConsts.TablesMap.get(DModConsts.TS_XML_ST) + " AS xst ON " +
                    "dfr.fk_xml_st = xst.id_xml_st " +
                    "GROUP BY d.id_dps, d.ser, d.num, d.dt, d.tot_r, d.tot_cy_r, dt.code, b.id_bpr, b.name, bc.code, bb.name, cb.code, c.code " +
                    (jrDocsPending.isSelected() ? "HAVING NOT f_bal = 0 " : "") +
                    "ORDER BY dt.code, d.fk_dps_ct, d.fk_dps_cl, d.fk_dps_tp, d.ser, d.num DESC, d.id_dps ";
            Vector<DGridRow> rows = new Vector<>();
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                int[] key = new int[] { resultSet.getInt("d.id_dps") };
                ArrayList<Object> data = new ArrayList<>();

                data.add(resultSet.getString("dt.code"));
                data.add(resultSet.getString("f_num"));
                data.add(resultSet.getDate("d.dt"));
                data.add(resultSet.getInt("d.cdt_day"));
                data.add(resultSet.getDate("f_dt_mat"));
                data.add(resultSet.getString("cb.code"));
                data.add(resultSet.getString("bb.name"));
                data.add(resultSet.getDouble("d.tot_cy_r"));
                data.add(resultSet.getDouble("f_bal_stc"));
                data.add(resultSet.getDouble("f_bal"));
                data.add(resultSet.getString("c.code"));
                data.add(resultSet.getString("dfr.uid"));
                data.add(resultSet.getString("xtp.name"));
                data.add(resultSet.getString("xstp.name"));
                data.add(resultSet.getString("xst.name"));

                rows.add(new DMyGridRow(key, data));
            }

            moGridDps.populateGrid(rows);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgDocs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlBizPartnerCode;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpDps;
    private javax.swing.JRadioButton jrDocsAll;
    private javax.swing.JRadioButton jrDocsPending;
    private javax.swing.JTextField jtfBizPartnerCodeRo;
    private javax.swing.JTextField jtfBizPartnerRo;
    private javax.swing.JTextField jtfYearRo;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            moGridDps.getTable().requestFocusInWindow();
        }
    }
    
    @Override
    public void resetForm() {
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModConsts.BU_BPR:
                mnBizPartner = (Integer) value;
                renderBizPartner();
                populateGrid();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }
    
    @Override
    public void addAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public DDbDps getRegistry() throws Exception {
        DDbDps dps = null;
        
        DMyGridRow row = (DMyGridRow) moGridDps.getSelectedGridRow();
        if (row != null) {
            dps = (DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, row.getRowPrimaryKey());
        }
        
        return dps;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = new DGuiValidation();
        
        if (moGridDps.getSelectedGridRow() == null) {
            validation.setMessage(DGridConsts.MSG_SELECT_ROW);
            validation.setComponent(moGridDps.getTable());
        }
        
        return validation;
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
