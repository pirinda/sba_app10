/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormDpsSeries.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.trn.form;

import java.awt.BorderLayout;
import java.util.Vector;
import sba.gui.DGuiClientSessionCustom;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFieldKeyGroup;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.bpr.db.DDbBranch;
import sba.mod.trn.db.DDbDpsSeries;
import sba.mod.trn.db.DDbDpsSeriesBranch;

/**
 *
 * @author Sergio Flores
 */
public class DFormDpsSeries extends DBeanForm {

    private DDbDpsSeries moRegistry;
    private DGuiFieldKeyGroup moFieldKeyGroup;
    private DGridPaneForm moGridDpsSeriesBranches;
    private Vector<DDbBranch> mvBranches;

    /** Creates new form DFormDpsSeries */
    public DFormDpsSeries(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.TU_SER, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jpRegistry = new javax.swing.JPanel();
        jpRegistry01 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlDpsCategory = new javax.swing.JLabel();
        moKeyDpsCategory = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel2 = new javax.swing.JPanel();
        jlDpsClass = new javax.swing.JLabel();
        moKeyDpsClass = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jlDpsType = new javax.swing.JLabel();
        moKeyDpsType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlSeries = new javax.swing.JLabel();
        moTextSeries = new sba.lib.gui.bean.DBeanFieldText();
        jpRegistry02 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlRowMaximum = new javax.swing.JLabel();
        moIntRowMaximum = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel6 = new javax.swing.JPanel();
        moBoolTaxImprovement = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jpBranches = new javax.swing.JPanel();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        jpRegistry01.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsCategory.setForeground(java.awt.Color.blue);
        jlDpsCategory.setText("Categoría docto.:*");
        jlDpsCategory.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlDpsCategory);

        moKeyDpsCategory.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel1.add(moKeyDpsCategory);

        jpRegistry01.add(jPanel1);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsClass.setForeground(java.awt.Color.blue);
        jlDpsClass.setText("Clase docto.:*");
        jlDpsClass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlDpsClass);

        moKeyDpsClass.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel2.add(moKeyDpsClass);

        jpRegistry01.add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsType.setForeground(java.awt.Color.blue);
        jlDpsType.setText("Tipo docto.:*");
        jlDpsType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDpsType);

        moKeyDpsType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel3.add(moKeyDpsType);

        jpRegistry01.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeries.setText("Serie docto.:");
        jlSeries.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlSeries);
        jPanel4.add(moTextSeries);

        jpRegistry01.add(jPanel4);

        jpRegistry.add(jpRegistry01);

        jpRegistry02.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRowMaximum.setText("Máx. renglones:");
        jlRowMaximum.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlRowMaximum);

        moIntRowMaximum.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(moIntRowMaximum);

        jpRegistry02.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolTaxImprovement.setText("Impuestos netos");
        moBoolTaxImprovement.setPreferredSize(new java.awt.Dimension(180, 23));
        jPanel6.add(moBoolTaxImprovement);

        jpRegistry02.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpRegistry02.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpRegistry02.add(jPanel8);

        jpRegistry.add(jpRegistry02);

        jpContainer.add(jpRegistry, java.awt.BorderLayout.NORTH);

        jpBranches.setBorder(javax.swing.BorderFactory.createTitledBorder("Sucursales de la empresa asignadas:"));
        jpBranches.setLayout(new java.awt.BorderLayout());
        jpContainer.add(jpBranches, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 720, 450);

        moFieldKeyGroup = new DGuiFieldKeyGroup(miClient);

        moKeyDpsCategory.setKeySettings(miClient, DGuiUtils.getLabelName(jlDpsCategory.getText()), true);
        moKeyDpsClass.setKeySettings(miClient, DGuiUtils.getLabelName(jlDpsClass.getText()), true);
        moKeyDpsType.setKeySettings(miClient, DGuiUtils.getLabelName(jlDpsType.getText()), true);
        moTextSeries.setTextSettings(DGuiUtils.getLabelName(jlSeries.getText()), 10, 0);
        moIntRowMaximum.setIntegerSettings(DGuiUtils.getLabelName(jlRowMaximum.getText()), DGuiConsts.GUI_TYPE_INT, false);
        moBoolTaxImprovement.setBooleanSettings(DGuiUtils.getLabelName(moBoolTaxImprovement.getText()), false);

        moFields.addField(moKeyDpsCategory);
        moFields.addField(moKeyDpsClass);
        moFields.addField(moKeyDpsType);
        moFields.addField(moTextSeries);
        moFields.addField(moIntRowMaximum);
        moFields.addField(moBoolTaxImprovement);

        moFields.setFormButton(jbSave);

        moGridDpsSeriesBranches = new DGridPaneForm(miClient, DModConsts.TU_SER_BRA, DLibConsts.UNDEFINED, "Sucursales") {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[3];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Sucursal");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_L, "Inhabilitado");
                columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_L, "Seleccionado");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpBranches.add(moGridDpsSeriesBranches, BorderLayout.CENTER);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridDpsSeriesBranches);
        */
    }

    private void populateBranches() {
        Vector<DGridRow> rows = new Vector<>();

        try {
            for (DDbBranch branch : mvBranches) {
                DDbDpsSeriesBranch seriesBranch = new DDbDpsSeriesBranch();
                seriesBranch.setPkBizPartnerId(branch.getPkBizPartnerId());
                seriesBranch.setPkBranchId(branch.getPkBranchId());
                seriesBranch.setXtaBranchName(branch.getName());
                seriesBranch.setXtaDisabled(branch.isDisabled());
                rows.add(seriesBranch);
            }

            moGridDpsSeriesBranches.populateGrid(rows);
            moGridDpsSeriesBranches.setSelectedGridRow(0);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jlDpsCategory;
    private javax.swing.JLabel jlDpsClass;
    private javax.swing.JLabel jlDpsType;
    private javax.swing.JLabel jlRowMaximum;
    private javax.swing.JLabel jlSeries;
    private javax.swing.JPanel jpBranches;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpRegistry01;
    private javax.swing.JPanel jpRegistry02;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolTaxImprovement;
    private sba.lib.gui.bean.DBeanFieldInteger moIntRowMaximum;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDpsCategory;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDpsClass;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDpsType;
    private sba.lib.gui.bean.DBeanFieldText moTextSeries;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        moFieldKeyGroup.initGroup();
        moFieldKeyGroup.addFieldKey(moKeyDpsCategory, DModConsts.TS_DPS_CT, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyDpsClass, DModConsts.TS_DPS_CL, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyDpsType, DModConsts.TS_DPS_TP, DLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();

        mvBranches = ((DGuiClientSessionCustom) miClient.getSession().getSessionCustom()).getAllBranches();
        populateBranches();
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbDpsSeries) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyDpsCategory.setValue(new int[] { moRegistry.getFkDpsCategoryId() });
        moKeyDpsClass.setValue(new int[] { moRegistry.getFkDpsCategoryId(), moRegistry.getFkDpsClassId() });
        moKeyDpsType.setValue(new int[] { moRegistry.getFkDpsCategoryId(), moRegistry.getFkDpsClassId(), moRegistry.getFkDpsTypeId() });
        moTextSeries.setValue(moRegistry.getSeries());
        moIntRowMaximum.setValue(moRegistry.getRowMaximum());
        moBoolTaxImprovement.setValue(moRegistry.isTaxImprovement());

        for (DDbDpsSeriesBranch entity : moRegistry.getChildBranches()) {
            for (DGridRow row : moGridDpsSeriesBranches.getModel().getGridRows()) {
                DDbDpsSeriesBranch gridEntity = (DDbDpsSeriesBranch) row;
                if (DLibUtils.compareKeys(entity.getBranchKey(), gridEntity.getBranchKey())) {
                    gridEntity.setXtaSelected(true);
                }
            }
        }

        moGridDpsSeriesBranches.renderGridRows();
        moGridDpsSeriesBranches.setSelectedGridRow(0);

        setFormEditable(true);

        if (moRegistry.getFkDpsCategoryId() == DLibConsts.UNDEFINED) {
            moFieldKeyGroup.resetGroup();
        }

        if (!moRegistry.isRegistryNew()) {
            moKeyDpsCategory.setEditable(false);
            moKeyDpsClass.setEditable(false);
            moKeyDpsType.setEditable(false);
        }

        addAllListeners();
    }

    @Override
    public DDbDpsSeries getRegistry() throws Exception {
        DDbDpsSeries registry = null;
        DDbDpsSeriesBranch branchRow = null;

        registry = moRegistry.clone();

        if (registry.isRegistryNew()) { } else { }

        registry.setSeries(moTextSeries.getValue());
        registry.setRowMaximum(moIntRowMaximum.getValue());
        registry.setTaxImprovement(moBoolTaxImprovement.getValue());
        registry.setFkDpsCategoryId(moKeyDpsType.getValue()[0]);
        registry.setFkDpsClassId(moKeyDpsType.getValue()[1]);
        registry.setFkDpsTypeId(moKeyDpsType.getValue()[2]);

        registry.getChildBranches().clear();

        for (DGridRow row : moGridDpsSeriesBranches.getModel().getGridRows()) {
            branchRow = (DDbDpsSeriesBranch) row;
            if (branchRow.getXtaSelected()) {
                registry.getChildBranches().add(branchRow);
            }
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        return validation;
    }
}
