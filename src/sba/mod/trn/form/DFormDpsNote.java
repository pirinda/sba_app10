/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormDpsNote.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.trn.form;

import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.trn.db.DDbDpsNote;

/**
 *
 * @author Sergio Flores
 */
public class DFormDpsNote extends DBeanForm {

    public static final int MAX_LENGTH = 255;

    private DDbDpsNote moRegistry;

    /** Creates new form DFormDpsNote */
    public DFormDpsNote(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.T_DPS_NOT, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        moBoolPrintable = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jlLengthMax = new javax.swing.JLabel();
        jtfLengthMax = new javax.swing.JTextField();
        jlLength = new javax.swing.JLabel();
        jtfLength = new javax.swing.JTextField();
        jspNote = new javax.swing.JScrollPane();
        jtaNote = new javax.swing.JTextArea();

        jpContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolPrintable.setText("Para impresión");
        moBoolPrintable.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel3.add(moBoolPrintable);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Nota:");
        jlNote.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlNote);

        jPanel5.add(jPanel2, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLengthMax.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlLengthMax.setText("Máx. caracteres:");
        jlLengthMax.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlLengthMax);

        jtfLengthMax.setEditable(false);
        jtfLengthMax.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfLengthMax.setText("0");
        jtfLengthMax.setFocusable(false);
        jtfLengthMax.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel6.add(jtfLengthMax);

        jlLength.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlLength.setText("Caracteres:");
        jlLength.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlLength);

        jtfLength.setEditable(false);
        jtfLength.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfLength.setText("0");
        jtfLength.setFocusable(false);
        jtfLength.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel6.add(jtfLength);

        jPanel5.add(jPanel6, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jtaNote.setColumns(20);
        jtaNote.setRows(5);
        jtaNote.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtaNoteFocusLost(evt);
            }
        });
        jtaNote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtaNoteKeyReleased(evt);
            }
        });
        jspNote.setViewportView(jtaNote);

        jPanel4.add(jspNote, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jpContainer.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jtaNoteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtaNoteFocusLost
        focusLostNote();
    }//GEN-LAST:event_jtaNoteFocusLost

    private void jtaNoteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtaNoteKeyReleased
        renderLength();
    }//GEN-LAST:event_jtaNoteKeyReleased

    private void initComponentsCustom() {
        moBoolPrintable.setBooleanSettings(moBoolPrintable.getText(), true);
        
        moFields.addField(moBoolPrintable);
        
        moFields.setFormButton(jbSave);

        jtfLengthMax.setText(DLibUtils.DecimalFormatInteger.format(MAX_LENGTH));
    }
    
    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jtaNote.requestFocus();
        }
    }

    private void renderLength() {
        jtfLength.setText(DLibUtils.DecimalFormatInteger.format(jtaNote.getText().length()));
    }

    private void focusLostNote() {
        jtaNote.setText(DLibUtils.textTrim(jtaNote.getText()).toUpperCase());
        renderLength();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel jlLength;
    private javax.swing.JLabel jlLengthMax;
    private javax.swing.JLabel jlNote;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JScrollPane jspNote;
    private javax.swing.JTextArea jtaNote;
    private javax.swing.JTextField jtfLength;
    private javax.swing.JTextField jtfLengthMax;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPrintable;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbDpsNote) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");

            moRegistry.setPrintable(true);
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        jtaNote.setText(moRegistry.getText());
        jtaNote.setCaretPosition(0);
        moBoolPrintable.setValue(moRegistry.isPrintable());

        renderLength();

        setFormEditable(true);

        addAllListeners();
    }

    @Override
    public DDbDpsNote getRegistry() {
        DDbDpsNote registry = null;

        try {
            registry = moRegistry.clone();

            if (registry.isRegistryNew()) { }

            registry.setText(jtaNote.getText());
            registry.setPrintable(moBoolPrintable.getValue());
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (jtaNote.getText().length() == 0) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlNote.getText()) + "'.");
                validation.setComponent(jtaNote);
            }
            else if (jtaNote.getText().length() > MAX_LENGTH) {
                validation.setMessage("La longitud del campo '" + DGuiUtils.getLabelName(jlNote.getText()) + "' no puede ser mayor que " + MAX_LENGTH + ".");
                validation.setComponent(jtaNote);
            }
        }

        return validation;
    }
}
