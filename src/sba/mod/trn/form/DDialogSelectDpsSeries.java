/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogSelectDpsSeries.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import java.awt.event.KeyEvent;
import java.util.Vector;
import sba.gui.DGuiClientSessionCustom;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiItem;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbUser;
import sba.mod.trn.db.DDbDpsSeriesBranch;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DDialogSelectDpsSeries extends DBeanFormDialog {

    private int[] manDpsTypeKey;
    private DDbUser moRegistry;

    /** Creates new form DDialogSelectDpsSeries
     * @param client GUI client.
     * @param type Type of DPS. Constants defined in DModConsts (TX_DPS_...).
     * @param subtype Category of DPS. Constants defined in DModSysConsts (TS_DPS_CT_...).
     */
    public DDialogSelectDpsSeries(DGuiClient client, int type, int subtype) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, type, subtype, "Series de documentos del usuario actual");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroup = new javax.swing.ButtonGroup();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlDpsSeries = new javax.swing.JLabel();
        jspDpsSeries = new javax.swing.JScrollPane();
        jltDpsSeries = new javax.swing.JList();

        jLabel2.setText("jLabel1");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Series de documentos disponibles:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 5, 0));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDpsSeries.setText("Seleccionar serie de documentos:");
        jlDpsSeries.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel1.add(jlDpsSeries);

        jPanel2.add(jPanel1, java.awt.BorderLayout.NORTH);

        jltDpsSeries.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltDpsSeries.setToolTipText(DGuiConsts.MSG_OPTION_DBL_CLICK);
        jltDpsSeries.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltDpsSeriesMouseClicked(evt);
            }
        });
        jltDpsSeries.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jltDpsSeriesKeyPressed(evt);
            }
        });
        jspDpsSeries.setViewportView(jltDpsSeries);

        jPanel2.add(jspDpsSeries, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jltDpsSeriesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jltDpsSeriesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jbSave.requestFocus();
        }
    }//GEN-LAST:event_jltDpsSeriesKeyPressed

    private void jltDpsSeriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltDpsSeriesMouseClicked
        if (evt.getClickCount() == 2) {
            actionSave();
        }
    }//GEN-LAST:event_jltDpsSeriesMouseClicked

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 320, 200);

        manDpsTypeKey = DTrnUtils.getDpsTypeByDpsXType(mnFormType, mnFormSubtype);

        jbSave.setText(DGuiConsts.TXT_BTN_OK);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jltDpsSeries.requestFocus();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup jButtonGroup;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jlDpsSeries;
    private javax.swing.JList jltDpsSeries;
    private javax.swing.JScrollPane jspDpsSeries;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    @SuppressWarnings("unchecked")
    public void setRegistry(DDbRegistry registry) throws Exception {
        Vector<DGuiItem> items = new Vector<>();
        DGuiClientSessionCustom sessionCustom = (DGuiClientSessionCustom) miClient.getSession().getSessionCustom();

        moRegistry = (DDbUser) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) { } else { }

        for (DDbDpsSeriesBranch dpsSeriesBranch : moRegistry.getAuxBranchDpsSeries(sessionCustom.getBranchKey(), manDpsTypeKey)) {
            items.add(new DGuiItem(dpsSeriesBranch.getPrimaryKey(), dpsSeriesBranch.getDbDpsTypeName() + " (" + dpsSeriesBranch.getDbSeries() + ")", dpsSeriesBranch.getDbSeries()));
        }

        jltDpsSeries.setListData(items);

        if (sessionCustom.getBranchDpsSeriesKey() != null) {
            for (int i = 0; i < jltDpsSeries.getModel().getSize(); i++) {
                if (DLibUtils.compareKeys(sessionCustom.getBranchDpsSeriesKey(), ((DGuiItem) jltDpsSeries.getModel().getElementAt(i)).getPrimaryKey())) {
                    jltDpsSeries.setSelectedIndex(i);
                    break;
                }
            }
        }

        if (jltDpsSeries.getModel().getSize() > 0 && jltDpsSeries.getSelectedIndex() == -1) {
            jltDpsSeries.setSelectedIndex(0);
        }

        if (moRegistry.isRegistryNew()) { } else { }

        addAllListeners();
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = new DGuiValidation();

        if (jltDpsSeries.getSelectedIndex() == -1) {
            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlDpsSeries.getText()) + "'.");
            validation.setComponent(jltDpsSeries);
        }

        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;

        switch (type) {
            case DModSysConsts.PARAM_SER_ID:
                value = ((DGuiItem) jltDpsSeries.getSelectedValue()).getPrimaryKey()[0];
                break;
            case DModSysConsts.PARAM_SER_SER:
                value = ((DGuiItem) jltDpsSeries.getSelectedValue()).getComplement();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return value;
    }
}
