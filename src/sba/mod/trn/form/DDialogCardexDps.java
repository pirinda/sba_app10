/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogCardexDps.java
 *
 * Created on 20/12/2011, 04:23:05 PM
 */

package sba.mod.trn.form;

import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.fin.db.DFinUtils;
import sba.mod.fin.db.DRowCardexBookkeeping;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DDialogCardexDps extends DBeanFormDialog {

    private int mnYear;
    private Date mtDateCutOff;
    private int[] manBookkeepingKey_n;
    private DDbDps moRegistry;
    private DGridPaneForm moGridMoves;

    /** Creates new form DDialogCardexDps
     * @param client GUI client.
     */
    public DDialogCardexDps(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.T_DPS_SND, DLibConsts.UNDEFINED, "Envío vía correo-e");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        moPanelDps = new sba.mod.trn.form.DPanelDps();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlDateCutOff = new javax.swing.JLabel();
        jtfDateCutOff = new javax.swing.JTextField();
        jpMoves = new javax.swing.JPanel();

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento:"));
        jPanel7.setLayout(new java.awt.BorderLayout());
        jPanel7.add(moPanelDps, java.awt.BorderLayout.WEST);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutOff.setText("Fecha corte:");
        jlDateCutOff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jlDateCutOff);

        jtfDateCutOff.setEditable(false);
        jtfDateCutOff.setText("00/00/0000");
        jtfDateCutOff.setFocusable(false);
        jtfDateCutOff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jtfDateCutOff);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel7.add(jPanel1, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel7, java.awt.BorderLayout.NORTH);

        jpMoves.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos contables:"));
        jpMoves.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpMoves, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 960, 600);

        moPanelDps.setPanelSettings(miClient);

        jbSave.setEnabled(false);
        jbSave.setText(DGuiConsts.TXT_BTN_OK);
        jbCancel.setText(DGuiConsts.TXT_BTN_CLOSE);

        moGridMoves = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle, null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[10];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_2B, "#");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DATE, DGridConsts.COL_TITLE_DATE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Referencia");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Concepto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Movimiento", 125);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Disponible");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Debe $");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Haber $");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Saldo SBC $");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Saldo $");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpMoves.add(moGridMoves, BorderLayout.CENTER);

        mvFormGrids.add(moGridMoves);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jbCancel.requestFocus();
        }
    }

    private void renderYear() {
        if (mnYear == 0) {
            mtDateCutOff = null;
            jtfDateCutOff.setText("");
        }
        else {
            mtDateCutOff = DLibTimeUtils.getEndOfYear(DLibTimeUtils.createDate(mnYear));
            jtfDateCutOff.setText(DLibUtils.DateFormatDate.format(mtDateCutOff));
        }
    }

    private void renderDps() {
        try {
            moPanelDps.setValue(DModSysConsts.PARAM_YEAR, mnYear);
            moPanelDps.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, manBookkeepingKey_n);
            moPanelDps.setRegistry(moRegistry);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlDateCutOff;
    private javax.swing.JPanel jpMoves;
    private javax.swing.JTextField jtfDateCutOff;
    private sba.mod.trn.form.DPanelDps moPanelDps;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods
     */

    public void populateCardex() {
        int move = 0;
        int bizPartnerClass = DTrnUtils.getBizPartnerClassByDpsCategory(moRegistry.getFkDpsCategoryId());
        double balSbt = 0;
        double bal = 0;
        String sql = "";
        ResultSet resultSet = null;
        DRowCardexBookkeeping row = null;
        Vector<DGridRow> gridRows = new Vector<>();

        try {
            // Opening balance:

            sql = "SELECT ";

            switch (bizPartnerClass) {
                case DModSysConsts.BS_BPR_CL_VEN:
                    sql += "SUM(bkk.cdt_cy - bkk.dbt_cy) AS f_bal_stc, SUM(IF(bkk.b_avl = 0, 0, bkk.cdt_cy - bkk.dbt_cy)) AS f_bal ";
                    break;
                case DModSysConsts.BS_BPR_CL_CUS:
                    sql += "SUM(bkk.dbt_cy - bkk.cdt_cy) AS f_bal_stc, SUM(IF(bkk.b_avl = 0, 0, bkk.dbt_cy - bkk.cdt_cy)) AS f_bal ";
                    break;
                default:
                    throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
            }

            sql += "FROM " + DModConsts.TablesMap.get(DModConsts.F_BKK) + " AS bkk " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.FS_SYS_MOV_TP) + " AS mt ON " +
                    "bkk.fk_sys_mov_cl = mt.id_sys_mov_cl AND bkk.fk_sys_mov_tp = mt.id_sys_mov_tp AND " +
                    "bkk.b_del = 0 AND bkk.id_yer = " + mnYear + " AND " +
                    "bkk.dt < '" + DLibUtils.DbmsDateFormatDate.format(DLibTimeUtils.getBeginOfYear(mtDateCutOff)) + "' AND " +
                    "bkk.fk_sys_acc_tp = " + DFinUtils.getSysAccountTypeForBizPartnerClass(bizPartnerClass) + " AND " +
                    "bkk.fk_dps_inv_n = " + moRegistry.getPkDpsId() + " ";
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                row = new DRowCardexBookkeeping();

                row.setMove(move++);
                row.setDate(DLibTimeUtils.getBeginOfYear(mtDateCutOff));
                row.setReference(moRegistry.getDpsReference(miClient.getSession()));
                row.setText(DUtilConsts.OPEN_BALANCE);
                row.setSystemMoveType("");
                row.setAvailable(false);
                row.setDebit(0);
                row.setCredit(0);

                balSbt += resultSet.getDouble("f_bal_stc");
                bal += resultSet.getDouble("f_bal");

                row.setBalanceStc(balSbt);
                row.setBalance(bal);

                gridRows.add(row);
            }

            // Accounting moves:

            sql = "SELECT bkk.id_yer, bkk.id_mov, bkk.dt, bkk.ref, bkk.txt, " +
                    "bkk.dbt_cy AS f_dbt, bkk.cdt_cy AS f_cdt, " +
                    "bkk.b_avl, mt.name " +
                    "FROM " + DModConsts.TablesMap.get(DModConsts.F_BKK) + " AS bkk " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.FS_SYS_MOV_TP) + " AS mt ON " +
                    "bkk.fk_sys_mov_cl = mt.id_sys_mov_cl AND bkk.fk_sys_mov_tp = mt.id_sys_mov_tp AND " +
                    "bkk.b_del = 0 AND bkk.id_yer = " + mnYear + " AND " +
                    "bkk.dt BETWEEN '" + DLibUtils.DbmsDateFormatDate.format(DLibTimeUtils.getBeginOfYear(mtDateCutOff)) + "' AND '" + DLibUtils.DbmsDateFormatDate.format(mtDateCutOff) + "' AND " +
                    "bkk.fk_sys_acc_tp IN (" + DFinUtils.getSysAccountTypeForBizPartnerClass(bizPartnerClass) + ") AND " +
                    "bkk.fk_dps_inv_n = " + moRegistry.getPkDpsId() + " " +
                    "ORDER BY bkk.dt, bkk.id_yer, bkk.id_mov ";
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                row = new DRowCardexBookkeeping();

                row.setMove(move++);
                row.setDate(resultSet.getDate("bkk.dt"));
                row.setReference(resultSet.getString("bkk.ref"));
                row.setText(resultSet.getString("bkk.txt"));
                row.setSystemMoveType(resultSet.getString("mt.name"));
                row.setAvailable(resultSet.getBoolean("bkk.b_avl"));
                row.setDebit(resultSet.getDouble("f_dbt"));
                row.setCredit(resultSet.getDouble("f_cdt"));

                if (bizPartnerClass == DModSysConsts.BS_BPR_CL_VEN) {
                    balSbt += resultSet.getDouble("f_cdt") - resultSet.getDouble("f_dbt");
                    if (resultSet.getBoolean("bkk.b_avl")) {
                        bal += resultSet.getDouble("f_cdt") - resultSet.getDouble("f_dbt");
                    }
                }
                else {
                    balSbt += resultSet.getDouble("f_dbt") - resultSet.getDouble("f_cdt");
                    if (resultSet.getBoolean("bkk.b_avl")) {
                        bal += resultSet.getDouble("f_dbt") - resultSet.getDouble("f_cdt");
                    }
                }

                row.setBalanceStc(balSbt);
                row.setBalance(bal);

                gridRows.add(row);
            }

            moGridMoves.populateGrid(gridRows);
        }
        catch (SQLException e) {
            DLibUtils.showException(this, e);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    /*
     * Overrided methods
     */

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_YEAR:
                mnYear = (Integer) value;
                renderYear();
                break;
            case DModSysConsts.PARAM_BKK_NUM_KEY:
                manBookkeepingKey_n = (int[]) value;
                break;
            case DModSysConsts.PARAM_DPS:
                moRegistry = (DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, (int[]) value);
                renderDps();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void resetForm() {
        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        mnYear = 0;
        mtDateCutOff = null;
        manBookkeepingKey_n = null;
        moRegistry = null;

        moGridMoves.clearGridRows();

        renderYear();
        renderDps();
    }
}
