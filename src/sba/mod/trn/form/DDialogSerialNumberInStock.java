/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogSerialNumberInStock.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.itm.db.DDbItem;
import sba.mod.itm.db.DDbUnit;
import sba.mod.trn.db.DTrnStockMove;

/**
 *
 * @author Sergio Flores
 */
public class DDialogSerialNumberInStock extends DBeanFormDialog {

    private Date mtDate;
    private int mnYear;
    private int[] manLotKey;
    private int[] manWarehouseKey;
    private int[] manBookkeepingNumberKey;
    private DDbItem moItem;
    private DDbUnit moUnit;
    private Vector<DTrnStockMove> mvStockMovesToAdjust;
    private Vector<DTrnStockMove> mvStockMoves;

    /** Creates new form DDialogSerialNumberInStock
     * @param client GUI client.
     */
    public DDialogSerialNumberInStock(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DLibConsts.UNDEFINED, DLibConsts.UNDEFINED, "Números de serie disponibles");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        jlName = new javax.swing.JLabel();
        jlUnitCode = new javax.swing.JLabel();
        jlSerialNumberName = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jtfCode = new javax.swing.JTextField();
        jtfName = new javax.swing.JTextField();
        jtfUnitCode = new javax.swing.JTextField();
        jtfSerialNumberName = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jspSerialNumbers = new javax.swing.JScrollPane();
        jltSerialNumber = new javax.swing.JList();
        jpItemsSouth = new javax.swing.JPanel();
        jtfBranchCode = new javax.swing.JTextField();
        jtfBranchWarehouseCode = new javax.swing.JTextField();
        jtfYear = new javax.swing.JTextField();

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 5, 0));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel1.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlCode.setText("Código ítem:");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlCode);

        jlName.setText("Nombre ítem:");
        jlName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel1.add(jlName);

        jlUnitCode.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel1.add(jlUnitCode);

        jlSerialNumberName.setText("Número serie:");
        jlSerialNumberName.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel1.add(jlSerialNumberName);

        jPanel2.add(jPanel1);

        jPanel3.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jtfCode.setEditable(false);
        jtfCode.setText("CODE");
        jtfCode.setToolTipText("Código");
        jtfCode.setFocusable(false);
        jtfCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jtfCode);

        jtfName.setEditable(false);
        jtfName.setText("NAME");
        jtfName.setToolTipText("Nombre");
        jtfName.setFocusable(false);
        jtfName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jtfName);

        jtfUnitCode.setEditable(false);
        jtfUnitCode.setText("UN");
        jtfUnitCode.setFocusable(false);
        jtfUnitCode.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel3.add(jtfUnitCode);

        jtfSerialNumberName.setEditable(false);
        jtfSerialNumberName.setText("NAME");
        jtfSerialNumberName.setToolTipText("Número de serie");
        jtfSerialNumberName.setFocusable(false);
        jtfSerialNumberName.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel3.add(jtfSerialNumberName);

        jPanel2.add(jPanel3);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel5.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel5.setLayout(new java.awt.BorderLayout(0, 5));

        jspSerialNumbers.setPreferredSize(new java.awt.Dimension(100, 100));

        jltSerialNumber.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltSerialNumber.setToolTipText(DGuiConsts.MSG_OPTION_DBL_CLICK);
        jltSerialNumber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltSerialNumberMouseClicked(evt);
            }
        });
        jltSerialNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jltSerialNumberKeyPressed(evt);
            }
        });
        jspSerialNumbers.setViewportView(jltSerialNumber);

        jPanel5.add(jspSerialNumbers, java.awt.BorderLayout.CENTER);

        jpItemsSouth.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jtfBranchCode.setEditable(false);
        jtfBranchCode.setToolTipText(DUtilConsts.TXT_BRANCH);
        jtfBranchCode.setFocusable(false);
        jtfBranchCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jpItemsSouth.add(jtfBranchCode);

        jtfBranchWarehouseCode.setEditable(false);
        jtfBranchWarehouseCode.setToolTipText(DUtilConsts.TXT_BRANCH_WAH);
        jtfBranchWarehouseCode.setFocusable(false);
        jtfBranchWarehouseCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jpItemsSouth.add(jtfBranchWarehouseCode);

        jtfYear.setEditable(false);
        jtfYear.setToolTipText(DUtilConsts.TXT_FISCAL_YEAR);
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jpItemsSouth.add(jtfYear);

        jPanel5.add(jpItemsSouth, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jltSerialNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jltSerialNumberKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            actionSave();
        }
    }//GEN-LAST:event_jltSerialNumberKeyPressed

    private void jltSerialNumberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltSerialNumberMouseClicked
        if (evt.getClickCount() == 2) {
            actionSave();
        }
    }//GEN-LAST:event_jltSerialNumberMouseClicked

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);

        mvStockMovesToAdjust = new Vector<>();
        mvStockMoves = new Vector<>();

        jbSave.setText(DGuiConsts.TXT_BTN_OK);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jltSerialNumber.requestFocus();
        }
    }

    private void renderDate() {
        jtfYear.setText(DLibUtils.DecimalFormatCalendarYear.format(mnYear));
    }

    private void renderBranchWarehouse() {
        jtfBranchCode.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, new int[] { manWarehouseKey[0], manWarehouseKey[1] }, DDbRegistry.FIELD_CODE));
        jtfBranchWarehouseCode.setText((String) miClient.getSession().readField(DModConsts.CU_WAH, manWarehouseKey, DDbRegistry.FIELD_CODE));
    }

    private void renderItem() {
        if (moItem == null) {
            jtfCode.setText("");
            jtfName.setText("");
            jtfSerialNumberName.setText("");

            jtfCode.setToolTipText(DGuiConsts.TXT_LBL_CODE);
            jtfName.setToolTipText(DGuiConsts.TXT_LBL_NAME);
        }
        else {
            jtfCode.setText(moItem.getCode());
            jtfName.setText(moItem.getName());
            jtfSerialNumberName.setText(moItem.getParentGenus().getSerialNumberName());

            jtfCode.setToolTipText(DGuiConsts.TXT_LBL_CODE + ": " + moItem.getCode());
            jtfName.setToolTipText(DGuiConsts.TXT_LBL_NAME + ": " + moItem.getName());
        }

        jtfCode.setCaretPosition(0);
        jtfName.setCaretPosition(0);
        jtfSerialNumberName.setCaretPosition(0);
    }

    private void renderUnit() {
        if (moUnit == null) {
            jtfUnitCode.setText("");

            jtfUnitCode.setToolTipText(DGuiConsts.TXT_LBL_UNIT);
        }
        else {
            jtfUnitCode.setText(moUnit.getCode());

            jtfUnitCode.setToolTipText(DGuiConsts.TXT_LBL_UNIT + ": " + moUnit.getCode());
        }

        jtfUnitCode.setCaretPosition(0);
    }

    private void renderStockMoves() {
        String sql = "";
        ResultSet resultSet = null;
        Vector<DTrnStockMove> moves = new Vector<>();
        Vector<DTrnStockMove> movesFound = new Vector<>();

        try {
            if (mvStockMovesToAdjust.size() > 0) {
                for (DTrnStockMove stockMove : mvStockMovesToAdjust) {
                    movesFound.add(stockMove.clone());
                }
            }
            else {
                if (manLotKey != null && manWarehouseKey != null) {
                    // Get serial numbers in stock:

                    sql = "SELECT snr, SUM(mov_in - mov_out) AS f_stk " +
                            "FROM " + DModConsts.TablesMap.get(DModConsts.T_STK) + " " +
                            "WHERE b_del = 0 AND id_yer = " + mnYear + " AND " +
                            "id_itm = " + manLotKey[0] + " AND id_unt = " + manLotKey[1] + " AND id_lot = " + manLotKey[2] + " AND " +
                            "id_bpr = " + manWarehouseKey[0] + " AND id_bra = " + manWarehouseKey[1] + " AND id_wah = " + manWarehouseKey[2] + " " +
                            (manBookkeepingNumberKey == null ? "" : "AND NOT (fk_bkk_yer_n = " + manBookkeepingNumberKey[0] + " AND fk_bkk_num_n = " + manBookkeepingNumberKey[1] + ") ") +
                            "GROUP BY snr " +
                            "HAVING f_stk <> 0 " +
                            "ORDER BY snr ";
                    resultSet = miClient.getSession().getStatement().executeQuery(sql);
                    while (resultSet.next()) {
                        DTrnStockMove move = new DTrnStockMove(new int[] { manLotKey[0], manLotKey[1], manLotKey[2], manWarehouseKey[0], manWarehouseKey[1], manWarehouseKey[2] }, resultSet.getDouble("f_stk"), resultSet.getString("snr"));
                        movesFound.add(move);
                    }
                }
            }

            // Exclude serial numbers allready selected:

            FOUND:
            for (DTrnStockMove moveFound : movesFound) {
                for (DTrnStockMove move : mvStockMoves) {
                    if (moveFound.getSerialNumber().compareTo(move.getSerialNumber()) == 0) {
                        continue FOUND;
                    }
                }
                moves.add(moveFound);
            }

            jltSerialNumber.setListData(moves);
            if (jltSerialNumber.getModel().getSize() > 0) {
                jltSerialNumber.setSelectedIndex(0);
            }
        }
        catch (SQLException e) {
            DLibUtils.showException(this, e);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlSerialNumberName;
    private javax.swing.JLabel jlUnitCode;
    private javax.swing.JList jltSerialNumber;
    private javax.swing.JPanel jpItemsSouth;
    private javax.swing.JScrollPane jspSerialNumbers;
    private javax.swing.JTextField jtfBranchCode;
    private javax.swing.JTextField jtfBranchWarehouseCode;
    private javax.swing.JTextField jtfCode;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfSerialNumberName;
    private javax.swing.JTextField jtfUnitCode;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = new DGuiValidation();

        if (jltSerialNumber.getSelectedIndex() == -1) {
            validation.setMessage(DGuiConsts.ERR_MSG_UNDEF_OPTION);
            validation.setComponent(jltSerialNumber);
        }

        return validation;
    }

    @Override
    public void resetForm() {
        removeAllListeners();
        reloadCatalogues();

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        mtDate = null;
        mnYear = 0;
        manLotKey = null;
        manWarehouseKey = null;
        manBookkeepingNumberKey = null;
        moItem = null;
        moUnit = null;
        mvStockMovesToAdjust.clear();
        mvStockMoves.clear();

        renderItem();
        renderUnit();
        renderStockMoves();

        addAllListeners();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_DATE:
                mtDate = (Date) value;
                mnYear = DLibTimeUtils.digestYear(mtDate)[0];
                renderDate();
                break;
            case DModSysConsts.PARAM_LOT_KEY:
                manLotKey = (int[]) value;
                moItem = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, new int[] { manLotKey[0] });
                moUnit = (DDbUnit) miClient.getSession().readRegistry(DModConsts.IU_UNT, new int[] { manLotKey[1] });
                renderItem();
                renderUnit();
                break;
            case DModSysConsts.PARAM_BRA_WAH:
                manWarehouseKey = (int[]) value;
                renderBranchWarehouse();
                break;
            case DModSysConsts.PARAM_BKK_NUM_KEY:
                manBookkeepingNumberKey = (int[]) value;
                break;
            case DModSysConsts.PARAM_VEC_STK_MOV_ADJ:
                mvStockMovesToAdjust.addAll((Vector<DTrnStockMove>) value);
                break;
            case DModSysConsts.PARAM_VEC_STK_MOV:
                mvStockMoves.addAll((Vector<DTrnStockMove>) value);
                renderStockMoves();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;

        switch (type) {
            case DModSysConsts.PARAM_OBJ_STK_MOV:
                value = jltSerialNumber.getSelectedValue();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return value;
    }
}
