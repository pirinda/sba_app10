/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormIog.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.trn.form;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sba.gui.DGuiClientSessionCustom;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.grid.DGridUtils;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanForm;
import sba.lib.img.DImgConsts;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbBranchWarehouse;
import sba.mod.cfg.db.DDbConfigBranch;
import sba.mod.cfg.db.DDbConfigCompany;
import sba.mod.cfg.form.DPickerBranchEntity;
import sba.mod.itm.db.DDbItem;
import sba.mod.itm.db.DDbUnit;
import sba.mod.trn.db.DDbIog;
import sba.mod.trn.db.DDbIogNote;
import sba.mod.trn.db.DDbIogRow;
import sba.mod.trn.db.DDbIogRowNote;
import sba.mod.trn.db.DTrnConsts;
import sba.mod.trn.db.DTrnItemsFound;
import sba.mod.trn.db.DTrnStockMove;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DFormIog extends DBeanForm implements DGridPaneFormOwner, ActionListener, FocusListener {

    private DDbIog moRegistry;
    private DGuiClientSessionCustom moSessionCustom;
    private DDialogFindItem moDialogFindItem;
    private DDialogSelectItemFound moDialogSelectItemFound;
    private DDialogLot moDialogLot;
    private DDialogLotShow moDialogLotShow;
    private DDialogSerialNumber moDialogSerialNumber;
    private DDialogSerialNumberCompound moDialogSerialNumberCompound;
    private DDialogSerialNumberInStock moDialogSerialNumberInStock;
    private DDialogSerialNumberShow moDialogSerialNumberShow;
    private DPickerBranchEntity moPickerBranchEntity;
    private DDbConfigCompany moConfigCompany;
    private DDbBranchWarehouse moDestinyWarehouse;
    private DGridPaneForm moGridDpsNotes;
    private DGridPaneForm moGridDpsRows;
    private DDbItem moItem;
    private DDbUnit moUnit;
    private int mnOriginalYear;
    private int mnNewIogNumber;
    private int[] manIogTypeKey;
    private boolean mbQuantityAlreadySet;
    private boolean mbIsImportDeclaration;  // indicates if import declaration is enabled
    private Vector<DTrnStockMove> mvRowStockMoves;
    private JButton mjButtonShowLot;
    private JButton mjButtonShowSerialNumber;
    private JButton mjButtonShowImportDeclaration;

    /** Creates new form DFormDps
     * @param client GUI client.
     * @param type XType of IOG. Constants defined in DModConsts (TX_IOG_...).
     * @param subtype Category of IOG. Constants defined in DModSysConsts (TS_IOG_CT_...).
     */
    public DFormIog(DGuiClient client, int type, int subtype, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, type, subtype, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDocType = new javax.swing.JLabel();
        jtfDocType = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlSourceBranchWarehouse = new javax.swing.JLabel();
        jtfSourceBranchCode = new javax.swing.JTextField();
        jtfSourceBranchWarehouse = new javax.swing.JTextField();
        jtfSourceBranchWarehouseCode = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlDestinyBranchWarehouse = new javax.swing.JLabel();
        jtfDestinyBranchCode = new javax.swing.JTextField();
        jtfDestinyBranchWarehouse = new javax.swing.JTextField();
        jtfDestinyBranchWarehouseCode = new javax.swing.JTextField();
        jbDestinyBranchWarehouse = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlDateDate = new javax.swing.JLabel();
        moDateDate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel23 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jpRows = new javax.swing.JPanel();
        jpRows1 = new javax.swing.JPanel();
        jpRows11 = new javax.swing.JPanel();
        jPanel48 = new javax.swing.JPanel();
        jPanel50 = new javax.swing.JPanel();
        moTextFind = new sba.lib.gui.bean.DBeanFieldText();
        jbFind = new javax.swing.JButton();
        jlDummy = new javax.swing.JLabel();
        jlRowQuantity = new javax.swing.JLabel();
        jlRowUnitCode = new javax.swing.JLabel();
        jlRowPriceUnitary = new javax.swing.JLabel();
        jlRowSubtotal = new javax.swing.JLabel();
        jbRowClear = new javax.swing.JButton();
        jPanel51 = new javax.swing.JPanel();
        jtfRowCode = new javax.swing.JTextField();
        jtfRowName = new javax.swing.JTextField();
        moDecRowQuantity = new sba.lib.gui.bean.DBeanFieldDecimal();
        jtfRowUnitCode = new javax.swing.JTextField();
        moDecRowPriceUnitary = new sba.lib.gui.bean.DBeanFieldDecimal();
        moDecRowSubtotal = new sba.lib.gui.bean.DBeanFieldDecimal();
        jbRowAdd = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        moTextRowNote = new sba.lib.gui.bean.DBeanFieldText();
        moBoolRowNotePrintable = new sba.lib.gui.bean.DBeanFieldBoolean();
        jlRowImportDeclaration = new javax.swing.JLabel();
        moTextRowImportDeclaration = new sba.lib.gui.bean.DBeanFieldText();
        jlRowImportDeclarationDate = new javax.swing.JLabel();
        moDateRowImportDeclarationDate = new sba.lib.gui.bean.DBeanFieldDate();
        jpRows2 = new javax.swing.JPanel();
        jpDocInfo = new javax.swing.JPanel();
        jpDocInfo1 = new javax.swing.JPanel();
        jpDocInfo2 = new javax.swing.JPanel();
        jpDocTotal = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        jPanel47 = new javax.swing.JPanel();
        jlTotal = new javax.swing.JLabel();
        moCurTotal = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento:"));
        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel15.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocType.setText("Tipo doc.:");
        jlDocType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jlDocType);

        jtfDocType.setEditable(false);
        jtfDocType.setFocusable(false);
        jtfDocType.setPreferredSize(new java.awt.Dimension(305, 23));
        jPanel3.add(jtfDocType);

        jPanel15.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSourceBranchWarehouse.setText("Almacén:");
        jlSourceBranchWarehouse.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jlSourceBranchWarehouse);

        jtfSourceBranchCode.setEditable(false);
        jtfSourceBranchCode.setToolTipText("Código sucursal");
        jtfSourceBranchCode.setFocusable(false);
        jtfSourceBranchCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(jtfSourceBranchCode);

        jtfSourceBranchWarehouse.setEditable(false);
        jtfSourceBranchWarehouse.setToolTipText("Almacén de bienes");
        jtfSourceBranchWarehouse.setFocusable(false);
        jtfSourceBranchWarehouse.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel4.add(jtfSourceBranchWarehouse);

        jtfSourceBranchWarehouseCode.setEditable(false);
        jtfSourceBranchWarehouseCode.setToolTipText("Código almacén de bienes");
        jtfSourceBranchWarehouseCode.setFocusable(false);
        jtfSourceBranchWarehouseCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(jtfSourceBranchWarehouseCode);

        jPanel15.add(jPanel4);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDestinyBranchWarehouse.setText("Destino:");
        jlDestinyBranchWarehouse.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlDestinyBranchWarehouse);

        jtfDestinyBranchCode.setEditable(false);
        jtfDestinyBranchCode.setToolTipText("Código sucursal");
        jtfDestinyBranchCode.setFocusable(false);
        jtfDestinyBranchCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jtfDestinyBranchCode);

        jtfDestinyBranchWarehouse.setEditable(false);
        jtfDestinyBranchWarehouse.setToolTipText("Almacén de bienes");
        jtfDestinyBranchWarehouse.setFocusable(false);
        jtfDestinyBranchWarehouse.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(jtfDestinyBranchWarehouse);

        jtfDestinyBranchWarehouseCode.setEditable(false);
        jtfDestinyBranchWarehouseCode.setToolTipText("Código almacén de bienes");
        jtfDestinyBranchWarehouseCode.setFocusable(false);
        jtfDestinyBranchWarehouseCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jtfDestinyBranchWarehouseCode);

        jbDestinyBranchWarehouse.setText("...");
        jbDestinyBranchWarehouse.setToolTipText("Seleccionar almacén destino");
        jbDestinyBranchWarehouse.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDestinyBranchWarehouse);

        jPanel15.add(jPanel7);

        jPanel6.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel20.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDate.setText("Fecha doc.:*");
        jlDateDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(jlDateDate);
        jPanel21.add(moDateDate);

        jPanel20.add(jPanel21);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio doc.:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jlNumber.setRequestFocusEnabled(false);
        jPanel23.add(jlNumber);

        jtfNumber.setEditable(false);
        jtfNumber.setToolTipText("Terminal de captura del documento");
        jtfNumber.setFocusable(false);
        jtfNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel23.add(jtfNumber);

        jPanel20.add(jPanel23);

        jPanel1.add(jPanel20, java.awt.BorderLayout.NORTH);

        jPanel6.add(jPanel1, java.awt.BorderLayout.EAST);

        jpContainer.add(jPanel6, java.awt.BorderLayout.NORTH);

        jpRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas del documento:"));
        jpRows.setLayout(new java.awt.BorderLayout(0, 5));

        jpRows1.setLayout(new java.awt.BorderLayout(0, 5));

        jpRows11.setLayout(new java.awt.BorderLayout());

        jPanel48.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel50.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moTextFind.setToolTipText("Buscar ítem");
        moTextFind.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel50.add(moTextFind);

        jbFind.setText("...");
        jbFind.setToolTipText("Buscar ítem");
        jbFind.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel50.add(jbFind);

        jlDummy.setPreferredSize(new java.awt.Dimension(197, 23));
        jPanel50.add(jlDummy);

        jlRowQuantity.setText("Cantidad:");
        jlRowQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel50.add(jlRowQuantity);

        jlRowUnitCode.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel50.add(jlRowUnitCode);

        jlRowPriceUnitary.setText("Precio u.:");
        jlRowPriceUnitary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel50.add(jlRowPriceUnitary);

        jlRowSubtotal.setText("Importe:");
        jlRowSubtotal.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel50.add(jlRowSubtotal);

        jbRowClear.setIcon(miClient.getImageIcon(DImgConsts.CMD_STD_CLEAR));
        jbRowClear.setToolTipText("Limpiar partida");
        jbRowClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel50.add(jbRowClear);

        jPanel48.add(jPanel50);

        jPanel51.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfRowCode.setEditable(false);
        jtfRowCode.setText("CODE");
        jtfRowCode.setToolTipText("Código");
        jtfRowCode.setFocusable(false);
        jtfRowCode.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel51.add(jtfRowCode);

        jtfRowName.setEditable(false);
        jtfRowName.setText("NAME");
        jtfRowName.setToolTipText("Nombre");
        jtfRowName.setFocusable(false);
        jtfRowName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel51.add(jtfRowName);

        moDecRowQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel51.add(moDecRowQuantity);

        jtfRowUnitCode.setEditable(false);
        jtfRowUnitCode.setText("UN");
        jtfRowUnitCode.setToolTipText("Unidad");
        jtfRowUnitCode.setFocusable(false);
        jtfRowUnitCode.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel51.add(jtfRowUnitCode);
        jPanel51.add(moDecRowPriceUnitary);

        moDecRowSubtotal.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel51.add(moDecRowSubtotal);

        jbRowAdd.setIcon(miClient.getImageIcon(DImgConsts.CMD_STD_ADD));
        jbRowAdd.setToolTipText("Agregar partida");
        jbRowAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel51.add(jbRowAdd);

        jPanel48.add(jPanel51);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moTextRowNote.setToolTipText("Nota");
        moTextRowNote.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moTextRowNote);

        moBoolRowNotePrintable.setText("Para impresión");
        moBoolRowNotePrintable.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel5.add(moBoolRowNotePrintable);

        jlRowImportDeclaration.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlRowImportDeclaration.setText("Pedimento:");
        jlRowImportDeclaration.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel5.add(jlRowImportDeclaration);

        moTextRowImportDeclaration.setText("TEXT");
        jPanel5.add(moTextRowImportDeclaration);

        jlRowImportDeclarationDate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlRowImportDeclarationDate.setText("Importación:");
        jlRowImportDeclarationDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jlRowImportDeclarationDate);

        moDateRowImportDeclarationDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(moDateRowImportDeclarationDate);

        jPanel2.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel48.add(jPanel2);

        jpRows11.add(jPanel48, java.awt.BorderLayout.CENTER);

        jpRows1.add(jpRows11, java.awt.BorderLayout.PAGE_START);

        jpRows.add(jpRows1, java.awt.BorderLayout.CENTER);

        jpRows2.setPreferredSize(new java.awt.Dimension(660, 108));
        jpRows2.setLayout(new java.awt.BorderLayout(5, 5));

        jpDocInfo.setLayout(new java.awt.BorderLayout());

        jpDocInfo1.setLayout(new java.awt.BorderLayout());
        jpDocInfo.add(jpDocInfo1, java.awt.BorderLayout.WEST);

        jpDocInfo2.setLayout(new java.awt.BorderLayout());
        jpDocInfo.add(jpDocInfo2, java.awt.BorderLayout.CENTER);

        jpRows2.add(jpDocInfo, java.awt.BorderLayout.CENTER);

        jpDocTotal.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel43.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel47.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTotal.setText("Total:");
        jlTotal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel47.add(jlTotal);
        jPanel47.add(moCurTotal);

        jPanel43.add(jPanel47);

        jpDocTotal.add(jPanel43);

        jpRows2.add(jpDocTotal, java.awt.BorderLayout.EAST);

        jpRows.add(jpRows2, java.awt.BorderLayout.SOUTH);

        jpContainer.add(jpRows, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 960, 600);

        moDateDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateDate.getText()), true);
        moTextFind.setTextSettings(DGuiUtils.getLabelName(moTextFind.getToolTipText()), 100, 0);
        moTextFind.setFieldButton(jbFind);
        moDecRowQuantity.setDecimalSettings(DGuiUtils.getLabelName(jlRowQuantity.getText()), DGuiConsts.GUI_TYPE_DEC_QTY, false);
        moDecRowPriceUnitary.setDecimalSettings(DGuiUtils.getLabelName(jlRowPriceUnitary.getText()), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecRowSubtotal.setDecimalSettings(DGuiUtils.getLabelName(jlRowSubtotal.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextRowNote.setTextSettings(DGuiUtils.getLabelName(moTextRowNote.getToolTipText()), 255, 0);
        moBoolRowNotePrintable.setBooleanSettings(moBoolRowNotePrintable.getText(), true);
        moTextRowImportDeclaration.setTextSettings(DGuiUtils.getLabelName(jlRowImportDeclaration), 15, 0);
        moDateRowImportDeclarationDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlRowImportDeclarationDate), false);
        moCurTotal.setCompoundFieldSettings(miClient);
        moCurTotal.getField().setDecimalSettings(DGuiUtils.getLabelName(jlTotal.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, false);

        moFields.addField(moDateDate);
        moFields.addField(moTextFind);
        moFields.addField(moDecRowQuantity);
        moFields.addField(moDecRowPriceUnitary);
        moFields.addField(moDecRowSubtotal);
        moFields.addField(moTextRowNote);
        moFields.addField(moBoolRowNotePrintable);
        moFields.addField(moTextRowImportDeclaration);
        moFields.addField(moDateRowImportDeclarationDate);
        moFields.addField(moCurTotal.getField());

        moDecRowSubtotal.setNextButton(jbRowAdd);
        moBoolRowNotePrintable.setNextButton(jbRowAdd);
        moDateRowImportDeclarationDate.setNextButton(jbRowAdd);

        moFields.setFormButton(jbSave);

        moDialogFindItem = new DDialogFindItem(miClient, mnFormSubtype);
        moDialogSelectItemFound = new DDialogSelectItemFound(miClient);
        moDialogLot = new DDialogLot(miClient, mnFormType, mnFormSubtype);
        moDialogLotShow = new DDialogLotShow(miClient, DDialogLotShow.TYPE_DPS);
        moDialogSerialNumber = new DDialogSerialNumber(miClient, mnFormType, mnFormSubtype);
        moDialogSerialNumberCompound = new DDialogSerialNumberCompound(miClient);
        moDialogSerialNumberInStock = new DDialogSerialNumberInStock(miClient);
        moDialogSerialNumberShow = new DDialogSerialNumberShow(miClient, DDialogSerialNumberShow.TYPE_DPS);
        moPickerBranchEntity = new DPickerBranchEntity(miClient, DModConsts.CU_WAH);
        moDestinyWarehouse = null;

        mvRowStockMoves = new Vector<>();
        mjButtonShowLot = DGridUtils.createButton(miClient.getImageIcon(DImgConsts.CMD_STD_LOT), "Ver lotes", this);
        mjButtonShowSerialNumber = DGridUtils.createButton(miClient.getImageIcon(DImgConsts.CMD_STD_SER_NUM), "Ver números de serie", this);
        mjButtonShowImportDeclaration = DGridUtils.createButton(miClient.getImageIcon(DImgConsts.CMD_STD_CARDEX), "Ver pedimento de importación", this);

        switch (mnFormSubtype) {
            case DModSysConsts.TS_IOG_CT_IN:
                moDialogFindItem.setValue(DModSysConsts.FLAG_SHOW_PRICES, false);
                break;
            case DModSysConsts.TS_IOG_CT_OUT:
                moDialogFindItem.setValue(DModSysConsts.FLAG_SHOW_PRICES, true);
                moDialogFindItem.setValue(DModSysConsts.FLAG_ONLY_IN_STOCK, true);
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        moDialogFindItem.setValue(DModSysConsts.FLAG_ONLY_INVENTORIABLE, true);

        moTextFind.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    actionTextFind();
                }
            }
        });

        moGridDpsNotes = new DGridPaneForm(miClient, DModConsts.T_IOG_NOT, mnFormType, "Notas") {

            @Override
            public void initGrid() {

            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[2];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Nota", 350);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_M, "Impresión");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridDpsRows = new DGridPaneForm(miClient, DModConsts.T_IOG_ROW, mnFormType, "Partidas") {

            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[7];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_2B, "#");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Cantidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT_UNIT, "Precio u. $ M");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Importe $ M");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridDpsNotes.setForm(new DFormIogNote(miClient, "Nota"));
        moGridDpsNotes.setPaneFormOwner(this);
        jpDocInfo1.add(moGridDpsNotes, BorderLayout.CENTER);

        moGridDpsRows.setForm(null);
        moGridDpsRows.setPaneFormOwner(this);
        moGridDpsRows.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(mjButtonShowLot);
        moGridDpsRows.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(mjButtonShowSerialNumber);
        moGridDpsRows.getPanelCommandsSys(DGuiConsts.PANEL_CENTER).add(mjButtonShowImportDeclaration);

        jpRows1.add(moGridDpsRows, BorderLayout.CENTER);

        mvFormGrids.add(moGridDpsNotes);
        mvFormGrids.add(moGridDpsRows);
    }

    private void clearRow() {
        renderItem(null, 0);

        moTextFind.resetField();
        moTextRowNote.resetField();
        moBoolRowNotePrintable.resetField();
        moTextRowImportDeclaration.resetField();
        moDateRowImportDeclarationDate.resetField();

        mvRowStockMoves.clear();
    }

    private void computeRowFocus() {
        if (moDecRowQuantity.isEnabled()) {
            moDecRowQuantity.requestFocus();
        }
        else if (moDecRowPriceUnitary.isEnabled()) {
            moDecRowPriceUnitary.requestFocus();
        }
        else if (moDecRowSubtotal.isEnabled()) {
            moDecRowSubtotal.requestFocus();
        }
        else {
            jbRowAdd.requestFocus();
        }
    }

    private void computeRowPriceUnitary() {
        double stot = moDecRowSubtotal.getValue();
        double qty = moDecRowQuantity.getValue();    // when adjustments for money, quantity is disabled

        moDecRowPriceUnitary.setValue(qty == 0 ? 0 : stot / qty);
    }

    private void computeRowTotal() {
        double qty = moDecRowQuantity.getValue();    // when adjustments for money, quantity is disabled
        double prcUnt = moDecRowPriceUnitary.getValue();

        moDecRowSubtotal.setValue(qty * prcUnt);
    }

    private void computeTotal() {
        moRegistry.computeTotal();
        moCurTotal.getField().setValue(moRegistry.getValue_r());
    }

    @SuppressWarnings("unchecked")
    private boolean defineRowStockMoves(final double quantity) {
        boolean valid = true;
        boolean defined = true;
        double stock = 0;
        int[] key = null;
        DTrnStockMove stockMove = null;
        ArrayList<DTrnStockMove> currentStockMoves = null;

        mbQuantityAlreadySet = false;

        if (moItem.isLotApplying()) {
            key = new int[] { moItem.getPkItemId(), moUnit.getPkUnitId() };

            if (DTrnUtils.isIogForStockOut(moRegistry) && mvRowStockMoves.isEmpty()) {
                // Propouse older stock lots:

                currentStockMoves = new ArrayList<DTrnStockMove>();

                for (DDbIogRow row : moRegistry.getChildRows()) {
                    if (!row.isDeleted()) {
                        currentStockMoves.addAll(row.getAuxStockMoves());
                    }
                }

                try {
                    mvRowStockMoves.addAll(DTrnUtils.getAvailableLots(miClient.getSession(), DLibTimeUtils.digestYear(moDateDate.getValue())[0],
                            moItem.getPkItemId(), moUnit.getPkUnitId(), moRegistry.getBranchWarehouseKey(), moRegistry.getPkIogId(), currentStockMoves, quantity));
                }
                catch (Exception e) {
                    DLibUtils.showException(this, e);
                }
            }

            moDialogLot.resetForm();
            moDialogLot.setValue(DModSysConsts.PARAM_DATE, moDateDate.getValue());
            moDialogLot.setValue(DModSysConsts.PARAM_ITM_UNT, key);
            moDialogLot.setValue(DModSysConsts.PARAM_BRA_WAH, moRegistry.getBranchWarehouseKey());
            moDialogLot.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, moRegistry.getBookkeepingNumberKey_n());
            moDialogLot.setValue(DModSysConsts.PARAM_QTY, quantity);
            moDialogLot.setValue(DModSysConsts.PARAM_PRC, null);
            moDialogLot.setValue(DModSysConsts.PARAM_CUR, miClient.getSession().getSessionCustom().getLocalCurrencyCode());
            moDialogLot.setValue(DModSysConsts.PARAM_VEC_STK_MOV, mvRowStockMoves);
            moDialogLot.setVisible(true);

            if (moDialogLot.getFormResult() != DGuiConsts.FORM_RESULT_OK) {
                defined = false;
            }
            else {
                mvRowStockMoves.clear();
                mvRowStockMoves.addAll((Vector<DTrnStockMove>) moDialogLot.getValue(DModSysConsts.PARAM_VEC_STK_MOV));
            }
        }
        else if (moItem.isSerialNumberApplying()) {
            key = new int[] { moItem.getPkItemId(), moUnit.getPkUnitId(), DUtilConsts.LOT_ID,
                moRegistry.getFkWarehouseBizPartnerId(), moRegistry.getFkWarehouseBranchId(), moRegistry.getFkWarehouseWarehouseId() };

            switch (moItem.getParentGenus().getFkSerialNumberTypeId()) {
                case DModSysConsts.IS_SNR_TP_SMP:
                    // Simple serial number:

                    for (DTrnStockMove move : mvRowStockMoves) {
                        move.setPkItemId(key[0]);
                        move.setPkUnitId(key[1]);
                        move.setPkLotId(key[2]);
                        move.setPkBizPartnerId(key[3]);
                        move.setPkBranchId(key[4]);
                        move.setPkWarehouseId(key[5]);
                    }

                    while (defined) {
                        moDialogSerialNumber.resetForm();
                        moDialogSerialNumber.setValue(DModSysConsts.PARAM_DATE, moDateDate.getValue());
                        moDialogSerialNumber.setValue(DModSysConsts.PARAM_LOT_KEY, key);
                        moDialogSerialNumber.setValue(DModSysConsts.PARAM_BRA_WAH, moRegistry.getBranchWarehouseKey());
                        moDialogSerialNumber.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, moRegistry.getBookkeepingNumberKey_n());
                        moDialogSerialNumber.setValue(DModSysConsts.PARAM_QTY, new Double(quantity).intValue());
                        moDialogSerialNumber.setValue(DModSysConsts.PARAM_PRC, null);
                        moDialogSerialNumber.setValue(DModSysConsts.PARAM_CUR, miClient.getSession().getSessionCustom().getLocalCurrencyCode());
                        moDialogSerialNumber.setValue(DModSysConsts.PARAM_VEC_STK_MOV, mvRowStockMoves);
                        moDialogSerialNumber.setVisible(true);

                        if (moDialogSerialNumber.getFormResult() != DGuiConsts.FORM_RESULT_OK) {
                            defined = false;
                        }
                        else {
                            // Validate serial numbers:

                            valid = true;
                            mvRowStockMoves.clear();
                            mvRowStockMoves.addAll((Vector<DTrnStockMove>) moDialogSerialNumber.getValue(DModSysConsts.PARAM_VEC_STK_MOV));

                            IOG:
                            for (DDbIogRow row : moRegistry.getChildRows()) {
                                if (!row.isDeleted() && row.getFkItemId() == moItem.getPkItemId()) {
                                    for (DTrnStockMove moveRow : row.getAuxStockMoves()) {
                                        for (DTrnStockMove moveNew : mvRowStockMoves) {
                                            if (moveRow.getSerialNumber().compareTo(moveNew.getSerialNumber()) == 0) {
                                                valid = false;
                                                miClient.showMsgBoxWarning("El número de serie '" + moveNew.getSerialNumber() + "' ya está en el documento.");
                                                break IOG;
                                            }
                                        }
                                    }
                                }
                            }

                            if (valid) {
                                break;
                            }
                        }
                    }
                    break;

                case DModSysConsts.IS_SNR_TP_CMP:
                    // Simple serial number:

                    if (DTrnUtils.isIogForStockIn(moRegistry)) {
                        // Incoming items:

                        while (defined) {
                            moDialogSerialNumberCompound.resetForm();
                            moDialogSerialNumberCompound.setValue(DModSysConsts.PARAM_LOT_KEY, key);
                            moDialogSerialNumberCompound.setValue(DModSysConsts.PARAM_QTY, new Double(quantity).intValue());
                            moDialogSerialNumberCompound.setValue(DModSysConsts.PARAM_PRC, null);
                            moDialogSerialNumberCompound.setValue(DModSysConsts.PARAM_CUR, miClient.getSession().getSessionCustom().getLocalCurrencyCode());
                            moDialogSerialNumberCompound.setVisible(true);

                            if (moDialogSerialNumberCompound.getFormResult() != DGuiConsts.FORM_RESULT_OK) {
                                defined = false;
                            }
                            else {
                                // Validate serial numbers:

                                valid = true;
                                key = new int[] { moItem.getPkItemId(), moUnit.getPkUnitId(), DUtilConsts.LOT_ID,
                                    moRegistry.getFkWarehouseBizPartnerId(), moRegistry.getFkWarehouseBranchId(), moRegistry.getFkWarehouseWarehouseId() };

                                mvRowStockMoves.clear();
                                mvRowStockMoves.add(new DTrnStockMove(key, ((Number) moDialogSerialNumberCompound.getValue(DModSysConsts.PARAM_QTY)).doubleValue(), (String) moDialogSerialNumberCompound.getValue(DModSysConsts.PARAM_SNR)));

                                IOG:
                                for (DDbIogRow row : moRegistry.getChildRows()) {
                                    if (!row.isDeleted() && row.getFkItemId() == moItem.getPkItemId()) {
                                        for (DTrnStockMove moveRow : row.getAuxStockMoves()) {
                                            for (DTrnStockMove moveNew : mvRowStockMoves) {
                                                if (moveRow.getSerialNumber().compareTo(moveNew.getSerialNumber()) == 0) {
                                                    valid = false;
                                                    miClient.showMsgBoxWarning("El número de serie '" + moveNew.getSerialNumber() + "' ya está en el documento.");
                                                    break IOG;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (valid) {
                                    moDecRowQuantity.setValue(mvRowStockMoves.get(0).getQuantity());
                                    mbQuantityAlreadySet = true;
                                    break;
                                }
                            }
                        }
                    }
                    else {
                        // Outgoing items:

                        while (defined) {
                            moDialogSerialNumberInStock.resetForm();
                            moDialogSerialNumberInStock.setValue(DModSysConsts.PARAM_DATE, moDateDate.getValue());
                            moDialogSerialNumberInStock.setValue(DModSysConsts.PARAM_LOT_KEY, key);
                            moDialogSerialNumberInStock.setValue(DModSysConsts.PARAM_BRA_WAH, moRegistry.getBranchWarehouseKey());
                            moDialogSerialNumberInStock.setValue(DModSysConsts.PARAM_BKK_NUM_KEY, moRegistry.getBookkeepingNumberKey_n());
                            //moDialogSerialNumberInStock.setValue(DModSysConsts.PARAM_VEC_STK_MOV_ADJ, ?);             // serial numbers available to adjust
                            moDialogSerialNumberInStock.setValue(DModSysConsts.PARAM_VEC_STK_MOV, mvRowStockMoves);     // serial numbers in document
                            moDialogSerialNumberInStock.setVisible(true);

                            if (moDialogSerialNumberInStock.getFormResult() != DGuiConsts.FORM_RESULT_OK) {
                                defined = false;
                            }
                            else {
                                // Validate serial numbers:

                                valid = true;
                                key = new int[] { moItem.getPkItemId(), moUnit.getPkUnitId(), DUtilConsts.LOT_ID,
                                    moRegistry.getFkWarehouseBizPartnerId(), moRegistry.getFkWarehouseBranchId(), moRegistry.getFkWarehouseWarehouseId() };

                                stockMove = (DTrnStockMove) moDialogSerialNumberInStock.getValue(DModSysConsts.PARAM_OBJ_STK_MOV);
                                mvRowStockMoves.clear();
                                mvRowStockMoves.add(new DTrnStockMove(key, stockMove.getQuantity(), stockMove.getSerialNumber()));

                                IOG:
                                for (DDbIogRow row : moRegistry.getChildRows()) {
                                    if (!row.isDeleted() && row.getFkItemId() == moItem.getPkItemId()) {
                                        for (DTrnStockMove moveRow : row.getAuxStockMoves()) {
                                            for (DTrnStockMove moveNew : mvRowStockMoves) {
                                                if (moveRow.getSerialNumber().compareTo(moveNew.getSerialNumber()) == 0) {
                                                    valid = false;
                                                    miClient.showMsgBoxWarning("El número de serie '" + moveNew.getSerialNumber() + "' ya está en el documento.");
                                                    break IOG;
                                                }
                                            }
                                        }
                                    }
                                }

                                if (valid) {
                                    moDecRowQuantity.setValue(mvRowStockMoves.get(0).getQuantity());
                                    mbQuantityAlreadySet = true;
                                    break;
                                }
                            }
                        }
                    }
                    break;

                default:
                    miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
            }
        }
        else {
            key = new int[] { moItem.getPkItemId(), moUnit.getPkUnitId(), DUtilConsts.LOT_ID,
                moRegistry.getFkWarehouseBizPartnerId(), moRegistry.getFkWarehouseBranchId(), moRegistry.getFkWarehouseWarehouseId() };

            if (mnFormSubtype == DModSysConsts.TS_IOG_CT_OUT) {
                // Validate stock for outgoing items:

                stock = DTrnUtils.getStockForLot(miClient.getSession(), mnOriginalYear, key, moRegistry.getBranchWarehouseKey());

                if (quantity > stock) {
                    defined = false;
                    miClient.showMsgBoxWarning("No se puede procesar el ítem '" + moItem.getName() + "'.\n" +
                                    "No hay existencias suficientes en el almacén del documento:\n" +
                                    "- unidades requeridas: " + DLibUtils.getDecimalFormatQuantity().format(quantity) + " " + moUnit.getCode() + "\n" +
                                    "- unidades en existencia: " + DLibUtils.getDecimalFormatQuantity().format(stock) + " " + moUnit.getCode() + "");
                    moDecRowQuantity.requestFocus();
                }
            }

            if (defined) {
                mvRowStockMoves.clear();
                mvRowStockMoves.add(new DTrnStockMove(key, quantity, ""));
            }
        }

        return defined;
    }

    private boolean renderItem(int[] itemKey, double quantity) {
        boolean render = true;
        double[] prices = null;

        if (itemKey == null) {
            moItem = null;
            moUnit = null;

            jtfRowCode.setToolTipText(DGuiConsts.TXT_LBL_CODE);
            jtfRowName.setToolTipText(DGuiConsts.TXT_LBL_NAME);
            jtfRowUnitCode.setToolTipText(DGuiConsts.TXT_LBL_UNIT);

            jtfRowName.setText("");
            jtfRowCode.setText("");
            jtfRowUnitCode.setText("");

            moDecRowQuantity.setEnabled(false);
            moDecRowPriceUnitary.setEnabled(false);
            moDecRowSubtotal.setEnabled(false);

            moDecRowQuantity.resetField();
            moDecRowPriceUnitary.resetField();
            moDecRowSubtotal.resetField();
        }
        else {
            moItem = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, itemKey);
            moUnit = (DDbUnit) miClient.getSession().readRegistry(DModConsts.IU_UNT, new int[] { moItem.getFkUnitId() });

            render = defineRowStockMoves(quantity);

            if (!render) {
                clearRow();
            }
            else {
                prices = DTrnUtils.getItemLastPrices(miClient.getSession(), DModSysConsts.TS_DPS_CT_PUR, miClient.getSession().getSessionCustom().getLocalCurrencyKey(), moItem.getPrimaryKey());

                jtfRowCode.setToolTipText(DGuiConsts.TXT_LBL_CODE + ": " + moItem.getCode());
                jtfRowName.setToolTipText(DGuiConsts.TXT_LBL_NAME + ": " + moItem.getName());
                jtfRowUnitCode.setToolTipText(DGuiConsts.TXT_LBL_UNIT + ": " + moUnit.getCode());

                jtfRowCode.setText(moItem.getCode());
                jtfRowName.setText(moItem.getName());
                jtfRowUnitCode.setText(moUnit.getCode());
                jtfRowCode.setCaretPosition(0);
                jtfRowName.setCaretPosition(0);
                jtfRowUnitCode.setCaretPosition(0);

                moDecRowQuantity.setEnabled(true);
                moDecRowPriceUnitary.setEnabled(true);
                moDecRowSubtotal.setEnabled(true);

                if (!mbQuantityAlreadySet) {
                    moDecRowQuantity.setValue(quantity);
                }

                moDecRowPriceUnitary.setValue(prices[0] - prices[1] - prices[2]);
            }
        }

        return render;
    }

    private DDbIogRow createIogRow() {
        double quantity = moDecRowQuantity.getValue();
        double priceUnitary = moDecRowPriceUnitary.getValue();
        DDbIogRow iogRow = new DDbIogRow();

        iogRow.setPkIogId(0);
        iogRow.setPkRowId(0);
        iogRow.setQuantity(quantity);
        iogRow.setValueUnitary(priceUnitary);
        iogRow.setValue_r(0);
        iogRow.setInventoriable(moItem.isInventoriable());
        iogRow.setDeleted(false);
        iogRow.setSystem(false);
        iogRow.setFkItemId(moItem.getPkItemId());
        iogRow.setFkUnitId(moUnit.getPkUnitId());
        iogRow.setFkDpsInvDpsId_n(DLibConsts.UNDEFINED);
        iogRow.setFkDpsInvRowId_n(DLibConsts.UNDEFINED);
        iogRow.setFkDpsAdjDpsId_n(DLibConsts.UNDEFINED);
        iogRow.setFkDpsAdjRowId_n(DLibConsts.UNDEFINED);
        iogRow.setFkUserInsertId(DLibConsts.UNDEFINED);
        iogRow.setFkUserUpdateId(DLibConsts.UNDEFINED);
        iogRow.setTsUserInsert(null);
        iogRow.setTsUserUpdate(null);

        iogRow.setDbItemCode(moItem.getCode());
        iogRow.setDbItemName(moItem.getName());
        iogRow.setDbUnitCode(moUnit.getCode());

        return iogRow;
    }

    private ArrayList<DDbIogRow> getIogRows() {
        ArrayList<DDbIogRow> iogRows = new ArrayList<DDbIogRow>();

        for (DGridRow row : moGridDpsRows.getModel().getGridRows()) {
            iogRows.add((DDbIogRow) row);
        }

        for (DGridRow row : moGridDpsRows.getDeletedRows()) {
            DDbIogRow dpsRow = (DDbIogRow) row;
            if (!dpsRow.isRegistryNew()) {
                dpsRow.setDeleted(true);
                dpsRow.setRegistryEdited(true);
                iogRows.add(dpsRow);
            }
        }

        return iogRows;
    }

    private ArrayList<DDbIogNote> getIogNotes() {
        ArrayList<DDbIogNote> iogNotes = new ArrayList<DDbIogNote>();

        for (DGridRow row : moGridDpsNotes.getModel().getGridRows()) {
            iogNotes.add((DDbIogNote) row);
        }

        return iogNotes;
    }

    private void renderSourceWarehouse() {
        jtfSourceBranchCode.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, moRegistry.getCompanyBranchKey(), DDbRegistry.FIELD_CODE));
        jtfSourceBranchWarehouse.setText((String) miClient.getSession().readField(DModConsts.CU_WAH, moRegistry.getBranchWarehouseKey(), DDbRegistry.FIELD_NAME));
        jtfSourceBranchWarehouseCode.setText((String) miClient.getSession().readField(DModConsts.CU_WAH, moRegistry.getBranchWarehouseKey(), DDbRegistry.FIELD_CODE));
        jtfSourceBranchCode.setCaretPosition(0);
        jtfSourceBranchWarehouse.setCaretPosition(0);
        jtfSourceBranchWarehouseCode.setCaretPosition(0);
    }

    private void renderDestinyWarehouse() {
        if (moDestinyWarehouse == null) {
            jtfDestinyBranchCode.setText("");
            jtfDestinyBranchWarehouse.setText("");
            jtfDestinyBranchWarehouseCode.setText("");
        }
        else {
            jtfDestinyBranchCode.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, moDestinyWarehouse.getBranchKey(), DDbRegistry.FIELD_CODE));
            jtfDestinyBranchWarehouse.setText((String) miClient.getSession().readField(DModConsts.CU_WAH, moDestinyWarehouse.getPrimaryKey(), DDbRegistry.FIELD_NAME));
            jtfDestinyBranchWarehouseCode.setText((String) miClient.getSession().readField(DModConsts.CU_WAH, moDestinyWarehouse.getPrimaryKey(), DDbRegistry.FIELD_CODE));
            jtfDestinyBranchCode.setCaretPosition(0);
            jtfDestinyBranchWarehouse.setCaretPosition(0);
            jtfDestinyBranchWarehouseCode.setCaretPosition(0);
        }
    }

    private void actionDestinyBranch() {
        moPickerBranchEntity.resetPicker();
        moPickerBranchEntity.setVisible(true);

        if (moPickerBranchEntity.getResult() == DGuiConsts.FORM_RESULT_OK) {
            try {
                moDestinyWarehouse = new DDbBranchWarehouse();
                moDestinyWarehouse.read(miClient.getSession(), moPickerBranchEntity.getBranchEntity());
            }
            catch (Exception e) {
                moDestinyWarehouse = null;
                DLibUtils.showException(this, e);
            }

            renderDestinyWarehouse();
        }
    }

    private void actionFind(final DTrnItemsFound itemsFound) {
        DTrnItemsFound itemsFoundActual = itemsFound;

        if (itemsFoundActual == null) {
            itemsFoundActual = DTrnUtils.digestItemsFound(miClient.getSession(), moTextFind.getValue());
        }

        if (itemsFoundActual != null) {
            moDialogFindItem.resetForm();
            moDialogFindItem.setValue(DModSysConsts.PARAM_DATE, moDateDate.getValue());
            moDialogFindItem.setValue(DModSysConsts.PARAM_TAX_REG, new int[] { ((DDbConfigBranch) miClient.getSession().getConfigBranch()).getFkTaxRegionId() });
            moDialogFindItem.setValue(DModSysConsts.PARAM_QTY, itemsFoundActual.getQuantity());
            moDialogFindItem.setVisible(true);

            if (moDialogFindItem.getFormResult() != DGuiConsts.FORM_RESULT_OK) {
                actionRowClear();
            }
            else {
                if (!renderItem((int[]) moDialogFindItem.getValue(DModConsts.IU_ITM), itemsFoundActual.getQuantity())) {
                    actionRowClear();
                }
                else {
                    computeRowTotal();
                    computeRowFocus();
                }
            }
        }
    }

    private void actionRowClear() {
        clearRow();

        moTextFind.requestFocus();
    }

    private void actionRowAdd() {
        double quantity = 0;
        boolean add = true;
        DDbIogRow iogRow = null;
        DDbIogRowNote iogRowNote = null;

        if (moItem == null) {
            miClient.showMsgBoxWarning(DGuiConsts.ERR_MSG_UNDEF_REG);
            moTextFind.requestFocusInWindow();
        }
        else if (moDecRowQuantity.getValue() == 0) {
            miClient.showMsgBoxWarning(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + jlRowQuantity.getText() + "'.");
            moDecRowQuantity.requestFocusInWindow();
        }
        else {
            if (moDecRowSubtotal.getValue() == 0) {
                if (miClient.showMsgBoxConfirm(DTrnConsts.MSG_CNF_ROW_VALUELESS) != JOptionPane.YES_OPTION) {
                    add = false;
                    moDecRowPriceUnitary.requestFocusInWindow();
                }
            }
            
            if (add) {
                if (mbIsImportDeclaration && moTextRowImportDeclaration.getValue().isEmpty() && moDateRowImportDeclarationDate.getValue() != null) {
                    miClient.showMsgBoxWarning(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlRowImportDeclaration.getText()) + "'.");
                    moTextRowImportDeclaration.requestFocusInWindow();
                }
                else if (mbIsImportDeclaration && !moTextRowImportDeclaration.getValue().isEmpty() && moDateRowImportDeclarationDate.getValue() == null) {
                    miClient.showMsgBoxWarning(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlRowImportDeclarationDate.getText()) + "'.");
                    moDateRowImportDeclarationDate.requestFocusInWindow();
                }
                else if (mbIsImportDeclaration && !moTextRowImportDeclaration.getValue().isEmpty() && moTextRowImportDeclaration.getValue().length() != 15) {
                    miClient.showMsgBoxWarning("La longitud del campo '" + DGuiUtils.getLabelName(jlRowImportDeclaration.getText()) + "' " + DGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + " 15.");
                    moTextRowImportDeclaration.requestFocusInWindow();
                }
                else {
                    for (DTrnStockMove move : mvRowStockMoves) {
                        quantity += move.getQuantity();

                        if (mbIsImportDeclaration && !moTextRowImportDeclaration.getValue().isEmpty()) {
                            move.setImportDeclaration(moTextRowImportDeclaration.getValue());
                            move.setImportDeclarationDate(moDateRowImportDeclarationDate.getValue());
                        }
                        else {
                            move.setImportDeclaration("");
                            move.setImportDeclarationDate(null);
                        }
                    }

                    if (quantity != moDecRowQuantity.getValue()) {
                        // Redefine row stock moves (lots, serial numbers, etc.):

                        add = defineRowStockMoves(moDecRowQuantity.getValue());
                    }

                    if (add) {
                        iogRow = createIogRow();
                        iogRow.getAuxStockMoves().addAll(mvRowStockMoves);

                        if (!moTextRowNote.getValue().isEmpty()) {
                            iogRowNote = new DDbIogRowNote();
                            iogRowNote.setText(moTextRowNote.getValue());
                            iogRowNote.setPrintable(moBoolRowNotePrintable.getValue());
                            iogRow.getChildRowNotes().add(iogRowNote);
                        }

                        moRegistry.getChildRows().add(iogRow);
                        computeTotal();

                        moGridDpsRows.addGridRow(iogRow);
                        moGridDpsRows.renderGridRows();
                        moGridDpsRows.setSelectedGridRow(moGridDpsRows.getTable().getRowCount() - 1);
                    }

                    actionRowClear();
                }
            }
        }
    }

    private void actionShowLot() {
        DDbIogRow row = (DDbIogRow) moGridDpsRows.getSelectedGridRow();

        if (row == null) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            if (!row.isInventoriable()) {
                miClient.showMsgBoxInformation("La partida del documento no es inventariable.");
            }
            else if (row.getAuxStockMoves().isEmpty() || row.getAuxStockMoves().get(0).getLot().length() == 0) {
                miClient.showMsgBoxInformation("La partida del documento no tiene lotes.");
            }
            else {
                moDialogLotShow.resetForm();
                moDialogLotShow.setValue(DModSysConsts.PARAM_OBJ_IOG_ROW, row);
                moDialogLotShow.setVisible(true);
            }
        }
    }

    private void actionShowSerialNumber() {
        DDbIogRow row = (DDbIogRow) moGridDpsRows.getSelectedGridRow();

        if (row == null) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            if (!row.isInventoriable()) {
                miClient.showMsgBoxInformation("La partida del documento no es inventariable.");
            }
            else if (row.getAuxStockMoves().isEmpty() || row.getAuxStockMoves().get(0).getSerialNumber().length() == 0) {
                miClient.showMsgBoxInformation("La partida del documento no tiene números de serie.");
            }
            else {
                moDialogSerialNumberShow.resetForm();
                moDialogSerialNumberShow.setValue(DModSysConsts.PARAM_OBJ_IOG_ROW, row);
                moDialogSerialNumberShow.setVisible(true);
            }
        }
    }

    private void actionShowImportDeclaration() {
        DDbIogRow row = (DDbIogRow) moGridDpsRows.getSelectedGridRow();

        if (row == null) {
            miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
        }
        else {
            if (!row.isInventoriable()) {
                miClient.showMsgBoxInformation("La partida del documento no es inventariable.");
            }
            else if (row.getAuxStockMoves().isEmpty() || row.getAuxStockMoves().get(0).getImportDeclaration().isEmpty()) {
                miClient.showMsgBoxInformation("La partida del documento no tiene pedimento de importación.");
            }
            else {
                String msg = jlRowImportDeclaration.getText() + " " + row.getAuxStockMoves().get(0).getImportDeclaration() + "\n" +
                        jlRowImportDeclarationDate.getText() + " " + DLibUtils.DateFormatDate.format(row.getAuxStockMoves().get(0).getImportDeclarationDate());
                miClient.showMsgBoxInformation(msg);
            }
        }
    }

    private void actionTextFind() {
        int[] itemFoundKey = null;
        DTrnItemsFound itemsFound = DTrnUtils.digestItemsFound(miClient.getSession(), moTextFind.getValue());

        if (itemsFound.getItemsFoundKeys().isEmpty()) {
            actionFind(itemsFound);   // no items found, so find item (itemsFoundObject will be used only for quantity)
        }
        else if (itemsFound.getItemsFoundKeys().size() == 1) {
            itemFoundKey = itemsFound.getItemsFoundKeys().get(0);
        }
        else if (itemsFound.getItemsFoundKeys().size() > 1) {
            miClient.showMsgBoxWarning("Se encontraron " + itemsFound.getItemsFoundKeys().size() + " ítems con el texto '" + itemsFound.getTextToFind() + "'.\n" +
                    "Seleccionar el ítem deseado.");
            moDialogSelectItemFound.resetForm();
            moDialogSelectItemFound.setValue(DModSysConsts.PARAM_OBJ_ITM_FOUND, itemsFound);
            moDialogSelectItemFound.setVisible(true);
            if (moDialogSelectItemFound.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
                itemFoundKey = (int[]) moDialogSelectItemFound.getValue(DModSysConsts.PARAM_ITM);
            }
        }

        if (itemFoundKey != null) {
            if (itemsFound.getFoundBy() == DTrnConsts.FOUND_BY_SNR) {
                mvRowStockMoves.clear();
                mvRowStockMoves.add(new DTrnStockMove(new int[6], 1, itemsFound.getSerialNumber()));  // stock key will be set in method renderItem()
            }

            if (!renderItem(itemFoundKey, itemsFound.getQuantity())) {
                actionRowClear();
            }
            else {
                computeRowTotal();
                computeRowFocus();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel50;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbDestinyBranchWarehouse;
    private javax.swing.JButton jbFind;
    private javax.swing.JButton jbRowAdd;
    private javax.swing.JButton jbRowClear;
    private javax.swing.JLabel jlDateDate;
    private javax.swing.JLabel jlDestinyBranchWarehouse;
    private javax.swing.JLabel jlDocType;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlRowImportDeclaration;
    private javax.swing.JLabel jlRowImportDeclarationDate;
    private javax.swing.JLabel jlRowPriceUnitary;
    private javax.swing.JLabel jlRowQuantity;
    private javax.swing.JLabel jlRowSubtotal;
    private javax.swing.JLabel jlRowUnitCode;
    private javax.swing.JLabel jlSourceBranchWarehouse;
    private javax.swing.JLabel jlTotal;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpDocInfo;
    private javax.swing.JPanel jpDocInfo1;
    private javax.swing.JPanel jpDocInfo2;
    private javax.swing.JPanel jpDocTotal;
    private javax.swing.JPanel jpRows;
    private javax.swing.JPanel jpRows1;
    private javax.swing.JPanel jpRows11;
    private javax.swing.JPanel jpRows2;
    private javax.swing.JTextField jtfDestinyBranchCode;
    private javax.swing.JTextField jtfDestinyBranchWarehouse;
    private javax.swing.JTextField jtfDestinyBranchWarehouseCode;
    private javax.swing.JTextField jtfDocType;
    private javax.swing.JTextField jtfNumber;
    private javax.swing.JTextField jtfRowCode;
    private javax.swing.JTextField jtfRowName;
    private javax.swing.JTextField jtfRowUnitCode;
    private javax.swing.JTextField jtfSourceBranchCode;
    private javax.swing.JTextField jtfSourceBranchWarehouse;
    private javax.swing.JTextField jtfSourceBranchWarehouseCode;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolRowNotePrintable;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurTotal;
    private sba.lib.gui.bean.DBeanFieldDate moDateDate;
    private sba.lib.gui.bean.DBeanFieldDate moDateRowImportDeclarationDate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecRowPriceUnitary;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecRowQuantity;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecRowSubtotal;
    private sba.lib.gui.bean.DBeanFieldText moTextFind;
    private sba.lib.gui.bean.DBeanFieldText moTextRowImportDeclaration;
    private sba.lib.gui.bean.DBeanFieldText moTextRowNote;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jbDestinyBranchWarehouse.addActionListener(this);
        jbFind.addActionListener(this);
        jbRowClear.addActionListener(this);
        jbRowAdd.addActionListener(this);
        mjButtonShowLot.addActionListener(this);
        mjButtonShowSerialNumber.addActionListener(this);
        mjButtonShowImportDeclaration.addActionListener(this);
        moDecRowQuantity.addFocusListener(this);
        moDecRowPriceUnitary.addFocusListener(this);
        moDecRowSubtotal.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbDestinyBranchWarehouse.removeActionListener(this);
        jbFind.removeActionListener(this);
        jbRowClear.removeActionListener(this);
        jbRowAdd.removeActionListener(this);
        mjButtonShowLot.removeActionListener(this);
        mjButtonShowSerialNumber.removeActionListener(this);
        mjButtonShowImportDeclaration.removeActionListener(this);
        moDecRowQuantity.removeFocusListener(this);
        moDecRowPriceUnitary.removeFocusListener(this);
        moDecRowSubtotal.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        Vector<DGridRow> rows = new Vector<>();
        Vector<DGridRow> notes = new Vector<>();

        moRegistry = (DDbIog) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        moSessionCustom = (DGuiClientSessionCustom) miClient.getSession().getSessionCustom();

        if (moRegistry.isRegistryNew()) {
            // Validate if new registry can be created:

            if (moSessionCustom.getBranchKey() == null) {
                mbCanShowForm = false;
                msCanShowFormMessage = DUtilConsts.ERR_MSG_USR_SES_BRA;
                return;
            }
            else if (moSessionCustom.getBranchWarehouseKey() == null) {
                mbCanShowForm = false;
                msCanShowFormMessage = DUtilConsts.ERR_MSG_USR_SES_BRA_WAH;
                return;
            }
        }

        // Set registry:

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");

            moRegistry.setFkIogCategoryId(manIogTypeKey[0]);
            moRegistry.setFkIogClassId(manIogTypeKey[1]);
            moRegistry.setFkIogTypeId(manIogTypeKey[2]);

            moRegistry.setFkWarehouseBizPartnerId(moSessionCustom.getBranchWarehouseKey()[0]);
            moRegistry.setFkWarehouseBranchId(moSessionCustom.getBranchWarehouseKey()[1]);
            moRegistry.setFkWarehouseWarehouseId(moSessionCustom.getBranchWarehouseKey()[2]);

            mnNewIogNumber = DTrnUtils.getNextNumberForIog(miClient.getSession(), mnFormSubtype, moRegistry.getBranchWarehouseKey());

            moRegistry.setNumber(mnNewIogNumber);
            moRegistry.setDate(miClient.getSession().getWorkingDate());
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        setFormEditable(true);  // enable all controls before setting form values

        mnOriginalYear = DLibTimeUtils.digestYear(moRegistry.getDate())[0];
        moDateDate.setValue(moRegistry.getDate());

        jtfNumber.setText(DLibUtils.DecimalFormatIntegerRaw.format(moRegistry.getNumber()));

        jtfDocType.setText((String) miClient.getSession().readField(DModConsts.TS_IOG_TP, moRegistry.getIogTypeKey(), DDbRegistry.FIELD_NAME));
        jtfDocType.setCaretPosition(0);

        renderSourceWarehouse();

        if (!DTrnUtils.isIogTypeForSibling(moRegistry.getIogTypeKey())) {
            jlDestinyBranchWarehouse.setEnabled(false);
            jbDestinyBranchWarehouse.setEnabled(false);
        }
        else {
            jlDestinyBranchWarehouse.setEnabled(true);
            jbDestinyBranchWarehouse.setEnabled(true);

            if (moRegistry.isRegistryNew()) {
                moDestinyWarehouse = null;
            }
            else {
                try {
                    moDestinyWarehouse = new DDbBranchWarehouse();
                    moDestinyWarehouse.read(miClient.getSession(), moRegistry.getSiblingIog().getBranchWarehouseKey());
                }
                catch (Exception e) {
                    moDestinyWarehouse = null;
                    DLibUtils.showException(this, e);
                }
            }
        }

        renderDestinyWarehouse();

        for (DDbIogNote child : moRegistry.getChildNotes()) {
            notes.add(child);
        }

        moGridDpsNotes.populateGrid(notes);

        for (DDbIogRow child : moRegistry.getChildRows()) {
            if (!child.isDeleted()) {
                rows.add(child);
            }
        }

        moGridDpsRows.populateGrid(rows);

        moConfigCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();
        
        switch (mnFormSubtype) {
            case DModSysConsts.TS_IOG_CT_IN:
                mbIsImportDeclaration = moConfigCompany.isImportDeclaration();
                moDialogFindItem.setValue(DModSysConsts.PARAM_ITM_CT_KEY, new int[] { DModSysConsts.IS_ITM_CT_PUR });
                break;
            case DModSysConsts.TS_IOG_CT_OUT:
                mbIsImportDeclaration = false;
                moDialogFindItem.setValue(DModSysConsts.PARAM_ITM_CT_KEY, new int[] { DModSysConsts.IS_ITM_CT_SAL });
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        moDialogFindItem.setValue(DModSysConsts.PARAM_BRA_WAH, moRegistry.getBranchWarehouseKey());
        moDialogFindItem.setValue(DModSysConsts.FLAG_ONLY_INVENTORIABLE, true);
        moDialogFindItem.setValue(DModSysConsts.FLAG_ONLY_CONVERTIBLE, DTrnUtils.isIogTypeForConversion(moRegistry.getIogTypeKey()));
        moDialogFindItem.initForm();
        
        mjButtonShowImportDeclaration.setEnabled(mbIsImportDeclaration);
        moTextRowImportDeclaration.setEnabled(mbIsImportDeclaration);
        moDateRowImportDeclarationDate.setEnabled(mbIsImportDeclaration);
        moCurTotal.getField().setEditable(false);
        
        computeTotal();
        clearRow();

        addAllListeners();
    }

    @Override
    public DDbIog getRegistry() throws Exception {
        DDbIog registry = moRegistry.clone();

        if (moRegistry.isRegistryNew()) {
            if (mnNewIogNumber == moRegistry.getNumber()) {
                moRegistry.setNumber(DTrnUtils.getNextNumberForIog(miClient.getSession(), moRegistry.getFkIogCategoryId(), moRegistry.getBranchWarehouseKey()));
            }
        }

        if (registry.isRegistryNew()) { }

        registry.setDate(moDateDate.getValue());
        registry.setNumber(moRegistry.getNumber());
        registry.setAudited(false);
        registry.setDeleted(false);
        registry.setSystem(false);
        //registry.setFkIogCategoryId(?);
        //registry.setFkIogClassId(?);
        //registry.setFkIogTypeId(?);
        //registry.setFkWarehouseBizPartnerId(?);
        //registry.setFkWarehouseBranchId(?);
        //registry.setFkWarehouseWarehouseId(?);
        //registry.setFkBookkeepingYearId_n(?);
        //registry.setFkBookkeepingNumberId_n(?);
        //registry.setFkSourceDpsId_n(?);
        //registry.setFkSourceIogId_n(?);
        registry.setFkUserAuditedId(DUtilConsts.USR_NA_ID);

        // Alive and deleted document notes:

        registry.getChildNotes().clear();
        registry.getChildNotes().addAll(getIogNotes());

        // Alive and deleted document rows:

        registry.getChildRows().clear();
        registry.getChildRows().addAll(getIogRows());

        // Total value of document:

        registry.computeTotal();

        if (DTrnUtils.isIogTypeForSibling(registry.getIogTypeKey())) {
            registry.setAuxComputeSiblingIog(true);
            registry.setAuxSiblingIogWarehouseKey(moDestinyWarehouse.getPrimaryKey());
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (DLibTimeUtils.digestYear(moDateDate.getValue())[0] != mnOriginalYear) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + DGuiUtils.getLabelName(jlDateDate.getText()) + "'" +
                        DGuiConsts.ERR_MSG_FIELD_DATE_YEAR + DLibUtils.DecimalFormatCalendarYear.format(mnOriginalYear) + ".");
                validation.setComponent(moDateDate);
            }
            else if (moGridDpsRows.getTable().getRowCount() == 0) {
                validation.setMessage(DUtilConsts.ERR_MSG_DOC_NO_ROWS);
                validation.setComponent(moTextFind);
            }
            else if (DTrnUtils.isIogTypeForSibling(moRegistry.getIogTypeKey())) {
                if (moDestinyWarehouse == null) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlDestinyBranchWarehouse.getText()) + "'.");
                    validation.setComponent(jbDestinyBranchWarehouse);
                }
                else {
                    if (DTrnUtils.isIogTypeForTransfer(moRegistry.getIogTypeKey())) {
                        if (DLibUtils.compareKeys(moDestinyWarehouse.getPrimaryKey(), moRegistry.getBranchWarehouseKey())) {
                            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlDestinyBranchWarehouse.getText()) + "'.");
                            validation.setComponent(jbDestinyBranchWarehouse);
                        }
                    }
                    else if (DTrnUtils.isIogTypeForConversion(moRegistry.getIogTypeKey())) {
                        if (!DLibUtils.compareKeys(moDestinyWarehouse.getPrimaryKey(), moRegistry.getBranchWarehouseKey())) {
                            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ_EQUAL + "'" + DGuiUtils.getLabelName(jlSourceBranchWarehouse.getText()) + "' y '" + DGuiUtils.getLabelName(jlDestinyBranchWarehouse.getText()) + "'.");
                            validation.setComponent(jbDestinyBranchWarehouse);
                        }
                        else {
                            // Validate that all items can be converted:

                            ArrayList<DDbIogRow> iogRows = getIogRows();
                            DDbItem itemOriginal = null;
                            DDbItem itemConverted = null;

                            for (DDbIogRow iogRow : iogRows) {
                                itemOriginal = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, new int[] { iogRow.getFkItemId() });
                                itemConverted = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, new int[] { itemOriginal.getFkItemPackageId_n() });

                                if (itemConverted == null) {
                                    validation.setMessage("El ítem '" + itemOriginal.getName() + "' no está configurado para conversión.");
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {

    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {

    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        switch (gridType) {
            case DModConsts.T_DPS_NOT:
                break;
            case DModConsts.T_DPS_ROW:
                moRegistry.getChildRows().remove((DDbIogRow) gridRow);
                computeTotal();
                break;
            default:
        }
    }

    @Override
    public void actionCancel() {
        boolean cancel = true;

        if (mnFormStatus == DGuiConsts.FORM_STATUS_EDIT && jbSave.isEnabled()) {
            cancel = miClient.showMsgBoxConfirm(DGuiConsts.MSG_CNF_FORM_CLS) == JOptionPane.YES_OPTION;
        }

        if (cancel) {
            super.actionCancel();
        }
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_IOG_TP:
                manIogTypeKey = (int[]) value;
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbDestinyBranchWarehouse) {
                actionDestinyBranch();
            }
            else if (button == jbFind) {
                actionFind(null);
            }
            else if (button == jbRowClear) {
                actionRowClear();
            }
            else if (button == jbRowAdd) {
                actionRowAdd();
            }
            else if (button == mjButtonShowLot) {
                actionShowLot();
            }
            else if (button == mjButtonShowSerialNumber) {
                actionShowSerialNumber();
            }
            else if (button == mjButtonShowImportDeclaration) {
                actionShowImportDeclaration();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();

            if (field == moDecRowQuantity) {
                computeRowTotal();
            }
            else if (field == moDecRowPriceUnitary) {
                computeRowTotal();
            }
            else if (field == moDecRowSubtotal) {
                if (moDecRowPriceUnitary.getValue() == 0) {
                    computeRowPriceUnitary();
                }
            }
        }
    }
}
