/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DDialogSerialNumber.java
 *
 * Created on 7/11/2011, 07:51:51 PM
 */

package sba.mod.trn.form;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldInteger;
import sba.lib.gui.bean.DBeanFieldText;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.itm.db.DDbItem;
import sba.mod.itm.db.DDbUnit;

/**
 *
 * @author Sergio Flores
 */
public class DDialogSerialNumberCompound extends DBeanFormDialog implements FocusListener {

    private int mnQuantity;
    private int mnSerialNumberLength;
    private int[] manLotKey;
    private double[] madPrices;
    private String msCurrencyCode;
    private DDbItem moItem;
    private DDbUnit moUnit;

    /** Creates new form DDialogSerialNumber
     * @param client GUI client.
     */
    public DDialogSerialNumberCompound(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DLibConsts.UNDEFINED, DLibConsts.UNDEFINED, "Número de serie compuesto");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonGroup = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        jlName = new javax.swing.JLabel();
        jlUnitCode = new javax.swing.JLabel();
        jlSerialNumberName = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jtfCode = new javax.swing.JTextField();
        jtfName = new javax.swing.JTextField();
        jtfUnitCode = new javax.swing.JTextField();
        jtfSerialNumberName = new javax.swing.JTextField();
        jtfSerialNumberLength = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        moIntQuantity = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel13 = new javax.swing.JPanel();
        jlSerialNumberStart = new javax.swing.JLabel();
        moTextNumberStart = new sba.lib.gui.bean.DBeanFieldText();
        jPanel14 = new javax.swing.JPanel();
        jlSerialNumberEnd = new javax.swing.JLabel();
        jtfSerialNumberEnd = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlPriceUnitary = new javax.swing.JLabel();
        jlDiscountUnitary = new javax.swing.JLabel();
        jlDiscountRow = new javax.swing.JLabel();
        jlCurrencyCode = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        moDecPriceUnitary = new sba.lib.gui.bean.DBeanFieldDecimal();
        moDecDiscountUnitary = new sba.lib.gui.bean.DBeanFieldDecimal();
        moDecDiscountRow = new sba.lib.gui.bean.DBeanFieldDecimal();
        jtfCurrencyCode = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 5, 0));
        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código ítem:");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlCode);

        jlName.setText("Nombre ítem:");
        jlName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel1.add(jlName);

        jlUnitCode.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel1.add(jlUnitCode);

        jlSerialNumberName.setText("Número serie:");
        jlSerialNumberName.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel1.add(jlSerialNumberName);

        jPanel2.add(jPanel1);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfCode.setEditable(false);
        jtfCode.setText("CODE");
        jtfCode.setToolTipText("Código");
        jtfCode.setFocusable(false);
        jtfCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jtfCode);

        jtfName.setEditable(false);
        jtfName.setText("NAME");
        jtfName.setToolTipText("Nombre");
        jtfName.setFocusable(false);
        jtfName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jtfName);

        jtfUnitCode.setEditable(false);
        jtfUnitCode.setText("UN");
        jtfUnitCode.setFocusable(false);
        jtfUnitCode.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel3.add(jtfUnitCode);

        jtfSerialNumberName.setEditable(false);
        jtfSerialNumberName.setText("NAME");
        jtfSerialNumberName.setToolTipText("Número de serie");
        jtfSerialNumberName.setFocusable(false);
        jtfSerialNumberName.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel3.add(jtfSerialNumberName);

        jtfSerialNumberLength.setEditable(false);
        jtfSerialNumberLength.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSerialNumberLength.setText("0");
        jtfSerialNumberLength.setToolTipText("Longitud");
        jtfSerialNumberLength.setFocusable(false);
        jtfSerialNumberLength.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel3.add(jtfSerialNumberLength);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Cantidad:");
        jlQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlQuantity);

        moIntQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(moIntQuantity);

        jPanel2.add(jPanel4);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSerialNumberStart.setText("Número serie inicial:");
        jlSerialNumberStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlSerialNumberStart);

        moTextNumberStart.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextNumberStart.setText("00000");
        moTextNumberStart.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(moTextNumberStart);

        jPanel2.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSerialNumberEnd.setText("Número serie final:");
        jlSerialNumberEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlSerialNumberEnd);

        jtfSerialNumberEnd.setEditable(false);
        jtfSerialNumberEnd.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSerialNumberEnd.setText("00000");
        jtfSerialNumberEnd.setFocusable(false);
        jtfSerialNumberEnd.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jtfSerialNumberEnd);

        jPanel2.add(jPanel14);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel5.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriceUnitary.setText("Precio u.:");
        jlPriceUnitary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPriceUnitary);

        jlDiscountUnitary.setText("Descto. u.:");
        jlDiscountUnitary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlDiscountUnitary);

        jlDiscountRow.setText("Descto. par.:");
        jlDiscountRow.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel6.add(jlDiscountRow);

        jlCurrencyCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel6.add(jlCurrencyCode);

        jPanel7.add(jPanel6);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moDecPriceUnitary.setEditable(false);
        jPanel9.add(moDecPriceUnitary);

        moDecDiscountUnitary.setEditable(false);
        jPanel9.add(moDecDiscountUnitary);

        moDecDiscountRow.setEditable(false);
        moDecDiscountRow.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel9.add(moDecDiscountRow);

        jtfCurrencyCode.setEditable(false);
        jtfCurrencyCode.setText("TEXT");
        jtfCurrencyCode.setFocusable(false);
        jtfCurrencyCode.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel9.add(jtfCurrencyCode);

        jPanel7.add(jPanel9);

        jPanel8.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel10.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        jPanel10.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        jPanel10.add(jPanel12);

        jPanel8.add(jPanel10, java.awt.BorderLayout.EAST);

        jPanel5.add(jPanel8, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);

        moIntQuantity.setIntegerSettings(DGuiUtils.getLabelName(jlQuantity.getText()), DGuiConsts.GUI_TYPE_INT, true);
        moTextNumberStart.setTextSettings(DGuiUtils.getLabelName(jlSerialNumberStart.getText()), DBeanFieldText.MAX_LENGTH, 1);

        moFields.addField(moIntQuantity);
        moFields.addField(moTextNumberStart);
        moFields.setFormButton(jbSave);

        moDecPriceUnitary.setDecimalSettings(DGuiUtils.getLabelName(jlPriceUnitary.getText()), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecDiscountUnitary.setDecimalSettings(DGuiUtils.getLabelName(jlDiscountUnitary.getText()), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moDecDiscountRow.setDecimalSettings(DGuiUtils.getLabelName(jlDiscountRow.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, false);

        jbSave.setText(DGuiConsts.TXT_BTN_OK);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            moIntQuantity.requestFocus();
        }
    }

    private void renderItem() {
        if (moItem == null) {
            mnSerialNumberLength = 0;

            jtfCode.setText("");
            jtfName.setText("");
            jtfSerialNumberName.setText("");
            jtfSerialNumberLength.setText("");

            jtfCode.setToolTipText(DGuiConsts.TXT_LBL_CODE);
            jtfName.setToolTipText(DGuiConsts.TXT_LBL_NAME);

            moTextNumberStart.setMaxLength(DBeanFieldText.MAX_LENGTH);
        }
        else {
            mnSerialNumberLength = moItem.getParentGenus().getSerialNumberLength();

            jtfCode.setText(moItem.getCode());
            jtfName.setText(moItem.getName());
            jtfSerialNumberName.setText(moItem.getParentGenus().getSerialNumberName());
            jtfSerialNumberLength.setText(mnSerialNumberLength == 0 ? "" : DLibUtils.DecimalFormatInteger.format(mnSerialNumberLength));

            jtfCode.setToolTipText(DGuiConsts.TXT_LBL_CODE + ": " + moItem.getCode());
            jtfName.setToolTipText(DGuiConsts.TXT_LBL_NAME + ": " + moItem.getName());

            moTextNumberStart.setMaxLength(moItem.getParentGenus().getSerialNumberLength());
        }

        jtfCode.setCaretPosition(0);
        jtfName.setCaretPosition(0);
        jtfSerialNumberName.setCaretPosition(0);
    }

    private void renderUnit() {
        if (moUnit == null) {
            jtfUnitCode.setText("");

            jtfUnitCode.setToolTipText(DGuiConsts.TXT_LBL_UNIT);
        }
        else {
            jtfUnitCode.setText(moUnit.getCode());

            jtfUnitCode.setToolTipText(DGuiConsts.TXT_LBL_UNIT + ": " + moUnit.getCode());
        }

        jtfUnitCode.setCaretPosition(0);
    }

    private void renderQuantity() {
        moIntQuantity.setValue(mnQuantity);
    }

    private void renderPrices() {
        if (madPrices == null) {
            moDecPriceUnitary.resetField();
            moDecDiscountUnitary.resetField();
            moDecDiscountRow.resetField();
        }
        else {
            moDecPriceUnitary.setValue(madPrices[0]);
            moDecDiscountUnitary.setValue(madPrices[1]);
            moDecDiscountRow.setValue(madPrices[2]);
        }
    }

    private void renderCurrencyCode() {
        jtfCurrencyCode.setText(msCurrencyCode.length() == 0 ? "?" : msCurrencyCode);
        jtfCurrencyCode.setCaretPosition(0);
    }

    private void computeSerialNumberEnd() {
        long start = DLibUtils.parseLong(moTextNumberStart.getValue());

        if (moIntQuantity.getValue() == 0 || start == 0) {
            jtfSerialNumberEnd.setText("");
        }
        else {
            jtfSerialNumberEnd.setText("" + (start + moIntQuantity.getValue() - 1));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup jButtonGroup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlCurrencyCode;
    private javax.swing.JLabel jlDiscountRow;
    private javax.swing.JLabel jlDiscountUnitary;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlPriceUnitary;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlSerialNumberEnd;
    private javax.swing.JLabel jlSerialNumberName;
    private javax.swing.JLabel jlSerialNumberStart;
    private javax.swing.JLabel jlUnitCode;
    private javax.swing.JTextField jtfCode;
    private javax.swing.JTextField jtfCurrencyCode;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfSerialNumberEnd;
    private javax.swing.JTextField jtfSerialNumberLength;
    private javax.swing.JTextField jtfSerialNumberName;
    private javax.swing.JTextField jtfUnitCode;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecDiscountRow;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecDiscountUnitary;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecPriceUnitary;
    private sba.lib.gui.bean.DBeanFieldInteger moIntQuantity;
    private sba.lib.gui.bean.DBeanFieldText moTextNumberStart;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        moIntQuantity.addFocusListener(this);
        moTextNumberStart.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moIntQuantity.removeFocusListener(this);
        moTextNumberStart.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moTextNumberStart.getValue().length() != mnSerialNumberLength) {
                validation.setMessage("La longitud del campo '" + DGuiUtils.getLabelName(jlSerialNumberStart.getText()) + "' debe ser " + mnSerialNumberLength + ".");
                validation.setComponent(moTextNumberStart);
            }
        }

        return validation;
    }

    @Override
    public void resetForm() {
        removeAllListeners();
        reloadCatalogues();

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        moFields.resetFields();

        mnQuantity = 0;
        mnSerialNumberLength = 0;
        manLotKey = null;
        madPrices = null;
        msCurrencyCode = "";
        moItem = null;
        moUnit = null;

        renderItem();
        renderUnit();
        renderPrices();
        renderCurrencyCode();
        computeSerialNumberEnd();

        addAllListeners();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_LOT_KEY:
                manLotKey = (int[]) value;
                moItem = (DDbItem) miClient.getSession().readRegistry(DModConsts.IU_ITM, new int[] { manLotKey[0] });
                moUnit = (DDbUnit) miClient.getSession().readRegistry(DModConsts.IU_UNT, new int[] { manLotKey[1] });
                renderItem();
                renderUnit();
                break;
            case DModSysConsts.PARAM_QTY:
                mnQuantity = (Integer) value;
                renderQuantity();
                break;
            case DModSysConsts.PARAM_PRC:
                madPrices = (double[]) value;
                renderPrices();
                break;
            case DModSysConsts.PARAM_CUR:
                msCurrencyCode = (String) value;
                renderCurrencyCode();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;

        switch (type) {
            case DModSysConsts.PARAM_QTY:
                value = moIntQuantity.getValue();
                break;
            case DModSysConsts.PARAM_SNR:
                value = moTextNumberStart.getValue();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return value;
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldInteger) {
            if (e.getSource() == moIntQuantity) {
                computeSerialNumberEnd();
            }
        }
        else if (e.getSource() instanceof DBeanFieldText) {
            if (e.getSource() == moTextNumberStart) {
                computeSerialNumberEnd();
            }
        }
    }
}
