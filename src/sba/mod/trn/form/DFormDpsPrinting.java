/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormDpsPrinting.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.trn.form;

import java.util.Date;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbLock;
import sba.mod.cfg.db.DLockUtils;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DDbDpsPrinting;
import sba.mod.trn.db.DDbDpsSeriesNumber;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DFormDpsPrinting extends DBeanForm {

    private DDbDps moDps;
    private DDbLock moDpsLock;
    private int mnOriginalYear;
    private Date mtOriginalDate;

    /** Creates new form DFormDpsPrinting
     * @param client GUI client.
     */
    public DFormDpsPrinting(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.T_DPS_PRT, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        moPanelDps = new sba.mod.trn.form.DPanelDps();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlDocType = new javax.swing.JLabel();
        jtfDocType = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextSeries = new sba.lib.gui.bean.DBeanFieldText();
        moIntNumber = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel10 = new javax.swing.JPanel();
        jlDateDate = new javax.swing.JLabel();
        moDateDate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlEmissionType = new javax.swing.JLabel();
        moKeyEmissionType = new sba.lib.gui.bean.DBeanFieldKey();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento:"));
        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));
        jPanel6.add(moPanelDps, java.awt.BorderLayout.PAGE_START);

        jpContainer.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la impresión:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocType.setText("Tipo doc.:");
        jlDocType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlDocType);

        jtfDocType.setEditable(false);
        jtfDocType.setFocusable(false);
        jtfDocType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jtfDocType);

        jPanel5.add(jPanel8);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio doc.:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jlNumber.setRequestFocusEnabled(false);
        jPanel21.add(jlNumber);

        moTextSeries.setToolTipText("Serie");
        moTextSeries.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(moTextSeries);

        moIntNumber.setToolTipText("Folio");
        moIntNumber.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel21.add(moIntNumber);

        jPanel5.add(jPanel21);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDate.setText("Fecha doc.:*");
        jlDateDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlDateDate);
        jPanel10.add(moDateDate);

        jPanel5.add(jPanel10);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmissionType.setText("Tipo emisión:*");
        jlEmissionType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlEmissionType);

        moKeyEmissionType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moKeyEmissionType);

        jPanel5.add(jPanel9);

        jPanel2.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jpContainer.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        freeLockByCancel();
    }//GEN-LAST:event_formWindowClosing

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 640, 400);

        moTextSeries.setTextSettings(DGuiUtils.getLabelName(jlNumber.getText()), 10, 0);
        moIntNumber.setIntegerSettings(DGuiUtils.getLabelName(jlNumber.getText()), DGuiConsts.GUI_TYPE_INT_RAW, true);
        moDateDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateDate.getText()), true);
        moKeyEmissionType.setKeySettings(miClient, DGuiUtils.getLabelName(jlEmissionType.getText()), true);

        moFields.addField(moTextSeries);
        moFields.addField(moIntNumber);
        moFields.addField(moDateDate);
        moFields.addField(moKeyEmissionType);

        moFields.setFormButton(jbSave);

        moPanelDps.setPanelSettings(miClient);
        moPanelDps.enableShowCardex();
    }
    
    private void freeLockByCancel() {
        if (moDpsLock != null) {
            try {
                DLockUtils.freeLock(miClient.getSession(), moDpsLock, DDbLock.LOCK_ST_FREED_CANCEL);
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
            }
            finally {
                moDpsLock = null;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlDateDate;
    private javax.swing.JLabel jlDocType;
    private javax.swing.JLabel jlEmissionType;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JTextField jtfDocType;
    private sba.lib.gui.bean.DBeanFieldDate moDateDate;
    private sba.lib.gui.bean.DBeanFieldInteger moIntNumber;
    private sba.lib.gui.bean.DBeanFieldKey moKeyEmissionType;
    private sba.mod.trn.form.DPanelDps moPanelDps;
    private sba.lib.gui.bean.DBeanFieldText moTextSeries;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEmissionType, DModConsts.TS_EMI_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moDps = (DDbDps) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        // Set registry:

        removeAllListeners();
        reloadCatalogues();

        if (moDps.isRegistryNew()) {
            throw new Exception(DGuiConsts.ERR_MSG_FORM_EXIST_REG);
        }
        else {
            jtfRegistryKey.setText("");
            
            moDpsLock = moDps.assureLock(miClient.getSession());
        }

        setFormEditable(true);  // enable all controls before setting form values

        mtOriginalDate = moDps.getDate();
        mnOriginalYear = DLibTimeUtils.digestYear(mtOriginalDate)[0];

        moTextSeries.setValue(moDps.getSeries());
        moIntNumber.setValue(moDps.getNumber());
        moDateDate.setValue(mtOriginalDate);
        moKeyEmissionType.setValue(new int[] { moDps.getFkEmissionTypeId() });

        jtfDocType.setText((String) miClient.getSession().readField(DModConsts.TS_DPS_TP, moDps.getDpsTypeKey(), DDbRegistry.FIELD_NAME));
        jtfDocType.setCaretPosition(0);

        moPanelDps.setValue(DModSysConsts.PARAM_YEAR, mnOriginalYear);
        moPanelDps.setRegistry(moDps);

        moTextSeries.setEditable(false);
        moDateDate.setEditable(false);

        addAllListeners();
    }

    @Override
    public DDbDpsPrinting getRegistry() throws Exception {
        moDps.setAuxLock(moDpsLock);
        DDbDpsPrinting registry = moDps.createDpsPrinting(true);

        if (registry.isRegistryNew()) { }

        registry.setSeries(moTextSeries.getValue());
        registry.setNumber(moIntNumber.getValue());
        //registry.setOrder(?);
        registry.setDate(moDateDate.getValue());
        //registry.setDeleted(?);
        registry.setFkEmissionTypeId(moKeyEmissionType.getValue()[0]);
        //registry.setFkDpsCategoryId(?);
        //registry.setFkDpsClassId(?);
        //registry.setFkDpsTypeId(?);

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        String message = "";
        DDbDpsSeriesNumber dpsSeriesNumber = DTrnUtils.getDpsSeriesNumber(miClient.getSession(), moDps.getDpsTypeKey(), moTextSeries.getValue(), moIntNumber.getValue());
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (DLibTimeUtils.digestYear(moDateDate.getValue())[0] != mnOriginalYear) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + DGuiUtils.getLabelName(jlDateDate.getText()) + "'" +
                        DGuiConsts.ERR_MSG_FIELD_DATE_YEAR + DLibUtils.DecimalFormatCalendarYear.format(mnOriginalYear) + ".");
                validation.setComponent(moDateDate);
            }
            else if (dpsSeriesNumber != null && dpsSeriesNumber.getApprobationDate_n() != null && dpsSeriesNumber.getApprobationDate_n().after(moDateDate.getValue())) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + DGuiUtils.getLabelName(jlDateDate.getText()) + "'" +
                        DGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + DLibUtils.DateFormatDate.format(dpsSeriesNumber.getApprobationDate_n()) + ", fecha de aprobación de los folios del documento.");
                validation.setComponent(moDateDate);
            }
            else {
                // Validate document number:

                if (validation.isValid()) {
                    moDps.setSeries(moTextSeries.getValue());
                    moDps.setNumber(moIntNumber.getValue());

                    message = DTrnUtils.validateNumberForDps(miClient.getSession(), moDps);
                    if (!message.isEmpty()) {
                        validation.setMessage(message);
                        validation.setComponent(moIntNumber);
                    }
                    else if (moDps.isRegistryNew() && DTrnUtils.isDpsNumberAutomatic(moDps.getDpsClassKey())) {
                        moIntNumber.setValue(moDps.getNumber());   // new document number could be updated
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
    @Override
    public void actionCancel() {
        freeLockByCancel();
        super.actionCancel();
    }
}
