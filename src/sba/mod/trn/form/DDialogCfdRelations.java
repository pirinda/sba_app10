/*
 * DDialogCfdRelations.java
 *
 * Created on 20/12/2011, 04:23:05 PM
 */

package sba.mod.trn.form;

import cfd.ver4.DCfdVer4Consts;
import cfd.ver40.DCfdi40Catalogs;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sba.gui.DGuiClientApp;
import sba.gui.cat.DXmlCatalog;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.trn.db.DDfrMateRelations;
import sba.mod.trn.db.DRowDfrRelatedCfd;

/**
 *
 * @author Sergio Flores
 */
public class DDialogCfdRelations extends DBeanFormDialog implements ActionListener, ListSelectionListener {
    
    private static final int ACTION_NEW = 1;
    private static final int ACTION_EDIT = 2;

    private DXmlCatalog moXmlCatalogTipoRelacion;
    private DGridPaneForm moGridRelations;
    private int mnFormStatus;
    private int mnCurrentAction;

    /** Creates new form DDialogCfdRelations
     * @param client GUI client.
     */
    public DDialogCfdRelations(DGuiClient client) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.TX_DFR_RELATIONS, 0, "Relaciones");
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlRelationType = new javax.swing.JLabel();
        moKeyRelationType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jlRelatedCfds = new javax.swing.JLabel();
        moTextRelatedCfds = new sba.lib.gui.bean.DBeanFieldText();
        jbShow = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlCfdRelatedHint = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jbAdd = new javax.swing.JButton();
        jbUpdate = new javax.swing.JButton();
        jbDiscard = new javax.swing.JButton();
        jpCfdRelations = new javax.swing.JPanel();

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la relación:"));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRelationType.setText("Tipo relación:");
        jlRelationType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlRelationType);

        moKeyRelationType.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel2.add(moKeyRelationType);

        jPanel1.add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRelatedCfds.setText("UUID relacionados:");
        jlRelatedCfds.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlRelatedCfds);

        moTextRelatedCfds.setText("TEXT");
        moTextRelatedCfds.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel3.add(moTextRelatedCfds);

        jbShow.setText("...");
        jbShow.setToolTipText("Ver UUID relacionados");
        jbShow.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbShow);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdRelatedHint.setForeground(java.awt.Color.gray);
        jlCfdRelatedHint.setText("(Separar UUID relacionados con coma.)");
        jlCfdRelatedHint.setPreferredSize(new java.awt.Dimension(530, 23));
        jPanel5.add(jlCfdRelatedHint);

        jPanel4.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbAdd.setText("Agregar");
        jbAdd.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel6.add(jbAdd);

        jbUpdate.setText("Actualizar");
        jbUpdate.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel6.add(jbUpdate);

        jbDiscard.setText("Descartar");
        jbDiscard.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel6.add(jbDiscard);

        jPanel4.add(jPanel6, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel4);

        jPanel7.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel7, java.awt.BorderLayout.NORTH);

        jpCfdRelations.setBorder(javax.swing.BorderFactory.createTitledBorder("Relaciones:"));
        jpCfdRelations.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpCfdRelations, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 560, 350);
        
        moKeyRelationType.setKeySettings(miClient, DGuiUtils.getLabelName(jlRelationType), true);
        moTextRelatedCfds.setTextSettings(DGuiUtils.getLabelName(jlRelatedCfds), 1024, DCfdVer4Consts.LEN_UUID);
        
        moFields.addField(moKeyRelationType);
        moFields.addField(moTextRelatedCfds);
        moFields.setFormButton(jbUpdate);
        
        moXmlCatalogTipoRelacion = ((DGuiClientApp) miClient).getXmlCatalogsMap().get(DCfdi40Catalogs.CAT_REL_TP);

        moGridRelations = new DGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle, null) {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, true, true);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[3];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_INT_1B, "#");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Tipo relación", 150);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "CFDI relacionados", 350);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
            
            @Override
            public void actionRowEdit() {
                if (jbRowEdit.isEnabled()) {
                    if (jtTable.getSelectedRowCount() != 1) {
                        miClient.showMsgBoxInformation(DGridConsts.MSG_SELECT_ROW);
                    }
                    else {
                        actionPerformedAdd(ACTION_EDIT);
                    }
                }
            }
            
            @Override
            public void actionRowDelete() {
                super.actionRowDelete();
                
                int row = 0;
                
                for (DGridRow gridRow : moModel.getGridRows()) {
                    ((DRowDfrRelatedCfd) gridRow).setRow(++row);
                }
                
                int index = moGridRelations.getTable().getSelectedRow();
                moGridRelations.renderGridRows();
                moGridRelations.setSelectedGridRow(index);
            }
        };

        jpCfdRelations.add(moGridRelations, BorderLayout.CENTER);

        mvFormGrids.add(moGridRelations);
    }

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            jbAdd.requestFocus();
        }
    }
    
    private void updateFormStatus() {
        actionPerformedDiscard();
        
        if (mnFormStatus == DGuiConsts.FORM_STATUS_READ) {
            jbAdd.setEnabled(false);
            jbSave.setEnabled(false);
            moGridRelations.setRowButtonsEnabled(false);
        }
    }
    
    private void enableFields(final boolean enable) {
        moKeyRelationType.setEnabled(enable);
        moTextRelatedCfds.setEnabled(enable);
    }

    private void renderRelatedCfd() {
        DRowDfrRelatedCfd row = (DRowDfrRelatedCfd) moGridRelations.getSelectedGridRow();
        
        if (row == null) {
            moFields.resetFields();
        }
        else {
            moKeyRelationType.setValue(new int[] { moXmlCatalogTipoRelacion.getId(row.getRelationCode()) });
            moTextRelatedCfds.setValue(row.getUuids());
        }
    }
    
    private void setRelations(final DDfrMateRelations relations) {
        int row = 0;
        Vector<DGridRow> rows = new Vector<>();

        if (relations != null) {
            for (DDfrMateRelations.RelatedCfd relatedCfd : relations.getRelatedCfds()) {
                rows.add(new DRowDfrRelatedCfd(++row, relatedCfd.RelationCode, moXmlCatalogTipoRelacion.getName(moXmlCatalogTipoRelacion.getId(relatedCfd.RelationCode)), relatedCfd.getUuids()));
            }
        }
        
        moGridRelations.populateGrid(rows, this);
        moGridRelations.getTable().setRowSorter(null);
        moGridRelations.setSelectedGridRow(0);
    }
    
    private DDfrMateRelations getRelations() {
        DDfrMateRelations relations = null;
        
        if (moGridRelations.getTable().getRowCount() > 0) {
            try {
                relations = new DDfrMateRelations();
                
                for (DGridRow gridRow : moGridRelations.getModel().getGridRows()) {
                    DRowDfrRelatedCfd row = (DRowDfrRelatedCfd) gridRow;
                    relations.getRelatedCfds().add(relations.new RelatedCfd(row.getRelationCode(), row.getUuids()));
                }
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
            }
        }
        
        return relations;
    }
    
    private void actionPerformedAdd(int action) {
        mnCurrentAction = action;
        
        jbAdd.setEnabled(false);
        jbUpdate.setEnabled(true);
        jbDiscard.setEnabled(true);
        jbShow.setEnabled(false);
        jbSave.setEnabled(false);
        
        enableFields(true);
        moGridRelations.getTable().setEnabled(false);
        moGridRelations.setRowButtonsEnabled(false);
        
        if (mnCurrentAction == ACTION_NEW) {
            moFields.resetFields();
        }
        
        moKeyRelationType.requestFocusInWindow();
    }

    private void actionPerformedUpdate() {
        DGuiValidation validation = moFields.validateFields();
        
        if (!validation.isValid()) {
            DGuiUtils.computeValidation(miClient, validation);
        }
        else {
            try {
                String uuids = DDfrMateRelations.normalizeUuids(moTextRelatedCfds.getValue()); // throws exception if invalid data provided
                
                int index;
                DRowDfrRelatedCfd row;
                String relationCode = moXmlCatalogTipoRelacion.getCode(moKeyRelationType.getValue()[0]);
                String relationName = moXmlCatalogTipoRelacion.getName(moKeyRelationType.getValue()[0]);

                switch (mnCurrentAction) {
                    case ACTION_NEW:
                        row = new DRowDfrRelatedCfd(moGridRelations.getModel().getRowCount() + 1, relationCode, relationName, uuids);
                        moGridRelations.addGridRow(row);
                        moGridRelations.renderGridRows();
                        moGridRelations.setSelectedGridRow(moGridRelations.getModel().getRowCount() - 1);
                        break;
                    case ACTION_EDIT:
                        index = moGridRelations.getTable().getSelectedRow();
                        row = (DRowDfrRelatedCfd) moGridRelations.getSelectedGridRow();
                        row.setRelation(relationCode, relationName);
                        row.setUuids(uuids);
                        moGridRelations.setGridRow(row, index);
                        moGridRelations.renderGridRows();
                        moGridRelations.setSelectedGridRow(index);
                        break;
                    default:
                        miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
                }

                actionPerformedDiscard();
            }
            catch (Exception e) {
                DLibUtils.showException(this, e);
            }
        }
    }

    private void actionPerformedDiscard() {
        mnCurrentAction = 0;
        
        jbAdd.setEnabled(true);
        jbUpdate.setEnabled(false);
        jbDiscard.setEnabled(false);
        jbShow.setEnabled(true);
        jbSave.setEnabled(true);
        
        enableFields(false);
        moGridRelations.getTable().setEnabled(true);
        moGridRelations.setRowButtonsEnabled(false, true, true);
        
        renderRelatedCfd();
        
        jbAdd.requestFocusInWindow();
    }
    
    private void actionPerformedShow() {
        try {
            String message = jlRelatedCfds.getText();
            
            if (moTextRelatedCfds.getValue().isEmpty()) {
                message += "\n" + DGuiConsts.ERR_MSG_UNDEF_VALUE;
            }
            else {
                for (String uuid : DDfrMateRelations.parseUuids(moTextRelatedCfds.getValue())) { // throws exception if invalid data provided
                    message += "\n" + uuid;
                }
            }
            
            miClient.showMsgBoxInformation(message);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbDiscard;
    private javax.swing.JButton jbShow;
    private javax.swing.JButton jbUpdate;
    private javax.swing.JLabel jlCfdRelatedHint;
    private javax.swing.JLabel jlRelatedCfds;
    private javax.swing.JLabel jlRelationType;
    private javax.swing.JPanel jpCfdRelations;
    private sba.lib.gui.bean.DBeanFieldKey moKeyRelationType;
    private sba.lib.gui.bean.DBeanFieldText moTextRelatedCfds;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods
     */

    /*
     * Overrided methods
     */

    @Override
    public void addAllListeners() {
        jbAdd.addActionListener(this);
        jbUpdate.addActionListener(this);
        jbDiscard.addActionListener(this);
        jbShow.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbAdd.removeActionListener(this);
        jbUpdate.removeActionListener(this);
        jbDiscard.removeActionListener(this);
        jbShow.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moXmlCatalogTipoRelacion.populateCatalog(moKeyRelationType);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = new DGuiValidation();
        
        if (moGridRelations.getTable().getRowCount() == 0) {
            if (miClient.showMsgBoxConfirm("¿En efecto se desea que no haya relaciones?") != JOptionPane.YES_OPTION) {
                validation.setMessage("Se deben definir relaciones.");
                validation.setComponent(jbAdd);
            }
        }
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModConsts.TX_DFR_RELATIONS:
                setRelations((DDfrMateRelations) value);
                break;
            case DGuiConsts.PARAM_STATUS:
                mnFormStatus = (int) value;
                updateFormStatus();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case DModConsts.TX_DFR_RELATIONS:
                value = getRelations();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
        
        return value;
    }
    
    @Override
    public void resetForm() {
        mnFormResult = 0;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();
        
        mnFormStatus = DGuiConsts.FORM_STATUS_EDIT;
        updateFormStatus();
        
        addAllListeners();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbAdd) {
                actionPerformedAdd(ACTION_NEW);
            }
            else if (button == jbUpdate) {
                actionPerformedUpdate();
            }
            else if (button == jbDiscard) {
                actionPerformedDiscard();
            }
            else if (button == jbShow) {
                actionPerformedShow();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        renderRelatedCfd();
    }
}
