/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.mkt.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sba.lib.DLibConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.mkt.db.DDbSpecialPriceListPrice;
import sba.mod.trn.db.DTrnConsts;
import sba.mod.trn.form.DDialogFindItem;

/**
 *
 * @author Sergio Flores
 */
public class DDialogSpecialPriceListPrice extends DBeanFormDialog implements ActionListener {

    private DDbSpecialPriceListPrice moRegistry;
    private DDialogFindItem moDialogFindItem;

    /**
     * Creates new form DDialogSpecialPriceListPrice
     */
    public DDialogSpecialPriceListPrice(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.M_SPE_PRC, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sba.lib.gui.bean.DBeanFieldKey();
        jbFindItem = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jlPaymentType = new javax.swing.JLabel();
        moKeyPaymentType = new sba.lib.gui.bean.DBeanFieldKey();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jlPrice = new javax.swing.JLabel();
        moCurPrice = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(moKeyItem);

        jbFindItem.setText("...");
        jbFindItem.setToolTipText("Buscar ítem");
        jbFindItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFindItem);

        jPanel2.add(jPanel4);

        jPanel3.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlPaymentType.setText("Tipo pago:*");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlPaymentType);

        moKeyPaymentType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(moKeyPaymentType);

        jLabel1.setForeground(new java.awt.Color(128, 128, 128));
        jLabel1.setText("(N/A) = para todos los tipo de pago");
        jLabel1.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel3.add(jLabel1);

        jPanel2.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlPrice.setText("Precio especial:");
        jlPrice.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPrice);
        jPanel5.add(moCurPrice);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbFindItem;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlPrice;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurPrice;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItem;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPaymentType;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 480, 300);

        moKeyItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlItem), true);
        moKeyPaymentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlPaymentType), true);
        moCurPrice.setCompoundFieldSettings(miClient);
        moCurPrice.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPrice), DGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);

        moFields.addField(moKeyItem);
        moFields.addField(moKeyPaymentType);
        moFields.addField(moCurPrice.getField());
        moFields.setFormButton(jbSave);

        moDialogFindItem = new DDialogFindItem(miClient, DModSysConsts.TS_DPS_CT_SAL);
        moDialogFindItem.setValue(DModSysConsts.FLAG_SHOW_PRICES, false);
        moDialogFindItem.setValue(DModSysConsts.FLAG_ONLY_IN_STOCK, false);
        moDialogFindItem.setValue(DModSysConsts.FLAG_VALIDATE_STOCK, false);
        moDialogFindItem.setValue(DModSysConsts.PARAM_ITM_CT_KEY, new int[] { DModSysConsts.IS_ITM_CT_SAL });
        moDialogFindItem.reloadItems();
    }

    private void actionFindItem() {
        moDialogFindItem.resetForm();
        /*
        moDialogFindItem.setValue(DModSysConsts.PARAM_DATE, moDateDate.getValue());
        moDialogFindItem.setValue(DModSysConsts.PARAM_TAX_REG, new int[] { moBizPartnerBranch.getActualFkTaxRegionId(miClient.getSession()) });
        moDialogFindItem.setValue(DModSysConsts.PARAM_QTY, itemsFoundActual.getQuantity());
        */

        moDialogFindItem.setVisible(true);

        if (moDialogFindItem.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
            moKeyItem.setValue(new int[] { ((int[]) moDialogFindItem.getValue(DModConsts.IU_ITM))[0] });
            moKeyItem.requestFocus();
        }
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbFindItem.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbFindItem.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, DModConsts.IU_ITM, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyPaymentType, DModConsts.FS_PAY_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        int idItem = DLibConsts.UNDEFINED;
        int idPaymentType = DLibConsts.UNDEFINED;

        moRegistry = (DDbSpecialPriceListPrice) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        idItem = moRegistry.getPkItemId();
        idPaymentType = moRegistry.getPkPaymentTypeId();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
        }
        else {

        }

        moKeyItem.setValue(new int[] { idItem });
        moKeyPaymentType.setValue(new int[] { idPaymentType });
        moCurPrice.getField().setValue(moRegistry.getPrice());

        addAllListeners();
    }

    @Override
    public DDbSpecialPriceListPrice getRegistry() throws Exception {
        DDbSpecialPriceListPrice registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkSpecialPriceListId(DLibConsts.UNDEFINED);
        }

        registry.setPkPaymentTypeId(moKeyPaymentType.getValue()[0]);
        registry.setPkItemId(moKeyItem.getValue()[0]);
        registry.setPrice(moCurPrice.getField().getValue());

        registry.setDbItemCode((String) miClient.getSession().readField(DModConsts.IU_ITM, new int[] { registry.getPkItemId() }, DDbRegistry.FIELD_CODE));
        registry.setDbItemName((String) miClient.getSession().readField(DModConsts.IU_ITM, new int[] { registry.getPkItemId() }, DDbRegistry.FIELD_NAME));
        registry.setDbPaymentTypeName((String) miClient.getSession().readField(DModConsts.FS_PAY_TP, new int[] { registry.getPkPaymentTypeId() }, DDbRegistry.FIELD_NAME));
        registry.setDbCurrencyCode(miClient.getSession().getSessionCustom().getLocalCurrencyCode());

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moCurPrice.getField().getValue() == 0) {
                if (miClient.showMsgBoxConfirm(DTrnConsts.MSG_CNF_REG_VALUELESS) != JOptionPane.YES_OPTION) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlPrice) + "'.");
                    validation.setComponent(moCurPrice.getField().getComponent());
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbFindItem) {
                actionFindItem();
            }
        }
    }
}
