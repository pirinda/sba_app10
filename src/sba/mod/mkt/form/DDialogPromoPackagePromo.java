/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package sba.mod.mkt.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sba.lib.DLibConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.itm.db.DItemUtils;
import sba.mod.mkt.db.DDbPromoPackagePromo;
import sba.mod.trn.db.DTrnConsts;
import sba.mod.trn.form.DDialogFindItem;

/**
 *
 * @author Sergio Flores
 */
public class DDialogPromoPackagePromo extends DBeanFormDialog implements ActionListener, ItemListener {

    private DDbPromoPackagePromo moRegistry;
    private DDialogFindItem moDialogFindItem;

    /**
     * Creates new form DDialogPromoPackagePromo
     */
    public DDialogPromoPackagePromo(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.M_PRM_PRM, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlLinkItemType = new javax.swing.JLabel();
        moKeyLinkItemType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlReferenceItem = new javax.swing.JLabel();
        moKeyReferenceItem = new sba.lib.gui.bean.DBeanFieldKey();
        jbFindItem = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jlPaymentType = new javax.swing.JLabel();
        moKeyPaymentType = new sba.lib.gui.bean.DBeanFieldKey();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jlDiscountPercentage = new javax.swing.JLabel();
        moDecDiscountPercentage = new sba.lib.gui.bean.DBeanFieldDecimal();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlLinkItemType.setText("Tipo referencia:*");
        jlLinkItemType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlLinkItemType);

        moKeyLinkItemType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeyLinkItemType);

        jPanel2.add(jPanel6);

        jPanel4.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlReferenceItem.setText("Referencia:*");
        jlReferenceItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlReferenceItem);

        moKeyReferenceItem.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(moKeyReferenceItem);

        jbFindItem.setText("...");
        jbFindItem.setToolTipText("Buscar Ã­tem");
        jbFindItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFindItem);

        jPanel2.add(jPanel4);

        jPanel3.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlPaymentType.setText("Tipo pago:*");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlPaymentType);

        moKeyPaymentType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(moKeyPaymentType);

        jLabel1.setForeground(new java.awt.Color(128, 128, 128));
        jLabel1.setText("(N/A) = para todos los tipo de pago");
        jLabel1.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel3.add(jLabel1);

        jPanel2.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlDiscountPercentage.setText("Descto. promo.:");
        jlDiscountPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDiscountPercentage);
        jPanel5.add(moDecDiscountPercentage);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbFindItem;
    private javax.swing.JLabel jlDiscountPercentage;
    private javax.swing.JLabel jlLinkItemType;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlReferenceItem;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecDiscountPercentage;
    private sba.lib.gui.bean.DBeanFieldKey moKeyLinkItemType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyPaymentType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyReferenceItem;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 480, 300);

        moKeyLinkItemType.setKeySettings(miClient, DGuiUtils.getLabelName(jlLinkItemType), true);
        moKeyReferenceItem.setKeySettings(miClient, DGuiUtils.getLabelName(jlReferenceItem), true);
        moKeyPaymentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlPaymentType), true);
        moDecDiscountPercentage.setDecimalSettings(DGuiUtils.getLabelName(jlDiscountPercentage), DGuiConsts.GUI_TYPE_DEC_PER_DISC, false);

        moFields.addField(moKeyLinkItemType);
        moFields.addField(moKeyReferenceItem);
        moFields.addField(moKeyPaymentType);
        moFields.addField(moDecDiscountPercentage);
        moFields.setFormButton(jbSave);

        moDialogFindItem = new DDialogFindItem(miClient, DModSysConsts.TS_DPS_CT_SAL);
        moDialogFindItem.setValue(DModSysConsts.FLAG_SHOW_PRICES, false);
        moDialogFindItem.setValue(DModSysConsts.FLAG_ONLY_IN_STOCK, false);
        moDialogFindItem.setValue(DModSysConsts.FLAG_VALIDATE_STOCK, false);
        moDialogFindItem.setValue(DModSysConsts.PARAM_ITM_CT_KEY, new int[] { DModSysConsts.IS_ITM_CT_SAL });
        moDialogFindItem.reloadItems();
    }

    private void actionFindItem() {
        moDialogFindItem.resetForm();
        /*
        moDialogFindItem.setValue(DModSysConsts.PARAM_DATE, moDateDate.getValue());
        moDialogFindItem.setValue(DModSysConsts.PARAM_TAX_REG, new int[] { moBizPartnerBranch.getActualFkTaxRegionId(miClient.getSession()) });
        moDialogFindItem.setValue(DModSysConsts.PARAM_QTY, itemsFoundActual.getQuantity());
        */

        moDialogFindItem.setVisible(true);

        if (moDialogFindItem.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
            moKeyReferenceItem.setValue(new int[] { ((int[]) moDialogFindItem.getValue(DModConsts.IU_ITM))[0] });
            moKeyReferenceItem.requestFocus();
        }
    }

    private void itemStateLinkItemType() {
        if (moKeyLinkItemType.getSelectedIndex() <= 0) {
            jbFindItem.setEnabled(false);
            moKeyReferenceItem.setEnabled(false);
            moKeyReferenceItem.removeAllItems();
        }
        else {
            jbFindItem.setEnabled(moKeyLinkItemType.getValue()[0] == DModSysConsts.IS_LNK_ITM_TP_ITM);
            moKeyReferenceItem.setEnabled(true);

            switch (moKeyLinkItemType.getValue()[0]) {
                case DModSysConsts.IS_LNK_ITM_TP_ITM:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IU_ITM, DLibConsts.UNDEFINED, null);
                    break;
                case DModSysConsts.IS_LNK_ITM_TP_MFR:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IU_MFR, DLibConsts.UNDEFINED, null);
                    break;
                case DModSysConsts.IS_LNK_ITM_TP_BRD:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IU_BRD, DLibConsts.UNDEFINED, null);
                    break;
                case DModSysConsts.IS_LNK_ITM_TP_LIN:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IU_LIN, DLibConsts.UNDEFINED, null);
                    break;
                case DModSysConsts.IS_LNK_ITM_TP_GEN:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IU_GEN, DLibConsts.UNDEFINED, null);
                    break;
                case DModSysConsts.IS_LNK_ITM_TP_FAM:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IU_FAM, DLibConsts.UNDEFINED, null);
                    break;
                case DModSysConsts.IS_LNK_ITM_TP_ITM_TP:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IX_ITM_TP_BY_IDX, DLibConsts.UNDEFINED, null);
                    break;
                case DModSysConsts.IS_LNK_ITM_TP_ITM_CL:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IX_ITM_CL_BY_IDX, DLibConsts.UNDEFINED, null);
                    break;
                case DModSysConsts.IS_LNK_ITM_TP_ITM_CT:
                    miClient.getSession().populateCatalogue(moKeyReferenceItem, DModConsts.IS_ITM_CT, DLibConsts.UNDEFINED, null);
                    break;
                default:
                    moKeyReferenceItem.setEnabled(false);
                    moKeyReferenceItem.removeAllItems();
            }
        }
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbFindItem.addActionListener(this);
        moKeyLinkItemType.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbFindItem.removeActionListener(this);
        moKeyLinkItemType.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyLinkItemType, DModConsts.IS_LNK_ITM_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyPaymentType, DModConsts.FS_PAY_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        int idLinkItemType = DLibConsts.UNDEFINED;
        int idReferenceItem = DLibConsts.UNDEFINED;
        int idPaymentType = DLibConsts.UNDEFINED;

        moRegistry = (DDbPromoPackagePromo) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        idLinkItemType = moRegistry.getPkLinkItemTypeId();
        idReferenceItem = moRegistry.getPkReferenceItemId();
        idPaymentType = moRegistry.getPkPaymentTypeId();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
        }
        else {

        }

        moKeyLinkItemType.setValue(new int[] { idLinkItemType} );
        itemStateLinkItemType();
        moKeyReferenceItem.setValue(new int[] { idReferenceItem} );
        moKeyPaymentType.setValue(new int[] { idPaymentType });
        moDecDiscountPercentage.setValue(moRegistry.getDiscountPercentage());

        addAllListeners();
    }

    @Override
    public DDbPromoPackagePromo getRegistry() throws Exception {
        DDbPromoPackagePromo registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkPromoPackageId(DLibConsts.UNDEFINED);
        }

        registry.setPkPaymentTypeId(moKeyPaymentType.getValue()[0]);
        registry.setPkLinkItemTypeId(moKeyLinkItemType.getValue()[0]);
        registry.setPkReferenceItemId(moKeyReferenceItem.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyReferenceItem.getValue()[0]);
        registry.setDiscountPercentage(moDecDiscountPercentage.getValue());

        registry.setDbLinkItemTypeName((String) miClient.getSession().readField(DModConsts.IS_LNK_ITM_TP, new int[] { registry.getPkLinkItemTypeId() }, DDbRegistry.FIELD_NAME));
        registry.setDbReferenceItemName(DItemUtils.readItemLinkName(miClient.getSession(), registry.getPkLinkItemTypeId(), registry.getPkReferenceItemId()));
        registry.setDbPaymentTypeName((String) miClient.getSession().readField(DModConsts.FS_PAY_TP, new int[] { registry.getPkPaymentTypeId() }, DDbRegistry.FIELD_NAME));

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moDecDiscountPercentage.getValue() == 0) {
                if (miClient.showMsgBoxConfirm(DTrnConsts.MSG_CNF_REG_VALUELESS) != JOptionPane.YES_OPTION) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlDiscountPercentage) + "'.");
                    validation.setComponent(moDecDiscountPercentage);
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbFindItem) {
                actionFindItem();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            DBeanFieldKey field = (DBeanFieldKey) e.getSource();

            if (field == moKeyLinkItemType) {
                itemStateLinkItemType();
            }
        }
    }
}
