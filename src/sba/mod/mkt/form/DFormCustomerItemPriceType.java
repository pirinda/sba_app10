/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormCustomerItemPriceType.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.mkt.form;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.mkt.db.DDbCustomerItemPriceType;

/**
 *
 * @author Sergio Flores
 */
public class DFormCustomerItemPriceType extends DBeanForm implements ItemListener {

    private DDbCustomerItemPriceType moRegistry;

    /** Creates new form DFormCustomerItemPriceType */
    public DFormCustomerItemPriceType(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.M_CUS_ITM_PRC_TP, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlLinkCustomerType = new javax.swing.JLabel();
        moKeyLinkCustomerType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moKeyReference = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlItemPriceType = new javax.swing.JLabel();
        moKeyItemPriceType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel2 = new javax.swing.JPanel();
        jlDiscountPercentage = new javax.swing.JLabel();
        moDecDiscountPercentage = new sba.lib.gui.bean.DBeanFieldDecimal();

        jpContainer.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlLinkCustomerType.setForeground(java.awt.Color.blue);
        jlLinkCustomerType.setText("Tipo referencia:*");
        jlLinkCustomerType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlLinkCustomerType);

        moKeyLinkCustomerType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moKeyLinkCustomerType);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlReference.setForeground(java.awt.Color.blue);
        jlReference.setText("Referencia:*");
        jlReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlReference);

        moKeyReference.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeyReference);

        jPanel1.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlItemPriceType.setText("Precios Ã­tems:*");
        jlItemPriceType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlItemPriceType);

        moKeyItemPriceType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moKeyItemPriceType);

        jPanel1.add(jPanel7);

        jPanel2.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlDiscountPercentage.setText("Descto. adicional:");
        jlDiscountPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlDiscountPercentage);
        jPanel2.add(moDecDiscountPercentage);

        jPanel1.add(jPanel2);

        jpContainer.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 480, 300);

        moKeyLinkCustomerType.setKeySettings(miClient, DGuiUtils.getLabelName(jlLinkCustomerType.getText()), true);
        moKeyReference.setKeySettings(miClient, DGuiUtils.getLabelName(jlReference.getText()), true);
        moKeyItemPriceType.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemPriceType.getText()), true);
        moDecDiscountPercentage.setDecimalSettings(DGuiUtils.getLabelName(jlItemPriceType.getText()), DGuiConsts.GUI_TYPE_DEC_PER_DISC, false);

        moFields.addField(moKeyLinkCustomerType);
        moFields.addField(moKeyReference);
        moFields.addField(moKeyItemPriceType);
        moFields.addField(moDecDiscountPercentage);

        moFields.setFormButton(jbSave);
    }

    private void itemStateKeyLinkCustomerType() {
        if (moKeyLinkCustomerType.getSelectedIndex() <= 0) {
            moKeyReference.setEnabled(false);
            moKeyReference.removeAllItems();
        }
        else {
            moKeyReference.setEnabled(true);
            switch (moKeyLinkCustomerType.getValue()[0]) {
                case DModSysConsts.MS_LNK_CUS_TP_CUS:
                    miClient.getSession().populateCatalogue(moKeyReference, DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, null);
                    break;
                case DModSysConsts.MS_LNK_CUS_TP_CUS_TP:
                    miClient.getSession().populateCatalogue(moKeyReference, DModConsts.MU_CUS_TP, DLibConsts.UNDEFINED, null);
                    break;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlDiscountPercentage;
    private javax.swing.JLabel jlItemPriceType;
    private javax.swing.JLabel jlLinkCustomerType;
    private javax.swing.JLabel jlReference;
    private javax.swing.JPanel jpContainer;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecDiscountPercentage;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemPriceType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyLinkCustomerType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyReference;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        moKeyLinkCustomerType.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyLinkCustomerType.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyLinkCustomerType, DModConsts.MS_LNK_CUS_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyItemPriceType, DModConsts.MS_ITM_PRC_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        int linkCustomerTypeId = DLibConsts.UNDEFINED;
        int referenceId = DLibConsts.UNDEFINED;

        moRegistry = (DDbCustomerItemPriceType) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        linkCustomerTypeId = moRegistry.getPkLinkCustomerTypeId();
        referenceId = moRegistry.getPkReferenceCustomerId();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        setFormEditable(true);

        moKeyLinkCustomerType.setValue(new int[] { linkCustomerTypeId });
        itemStateKeyLinkCustomerType();
        moKeyReference.setValue(new int[] { referenceId });
        moKeyItemPriceType.setValue(new int[] { moRegistry.getFkItemPriceTypeId() });
        moDecDiscountPercentage.setValue(moRegistry.getDiscountPercentage());

        if (!moRegistry.isRegistryNew()) {
            moKeyLinkCustomerType.setEnabled(false);
            moKeyReference.setEnabled(false);
        }

        addAllListeners();
    }

    @Override
    public DDbCustomerItemPriceType getRegistry() throws Exception {
        DDbCustomerItemPriceType registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setPkLinkCustomerTypeId(moKeyLinkCustomerType.getValue()[0]);
        registry.setPkReferenceCustomerId(moKeyReference.getValue()[0]);
        registry.setFkItemPriceTypeId(moKeyItemPriceType.getValue()[0]);
        registry.setDiscountPercentage(moDecDiscountPercentage.getValue());

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyLinkCustomerType) {
                    itemStateKeyLinkCustomerType();
                }
            }
        }
    }
}
