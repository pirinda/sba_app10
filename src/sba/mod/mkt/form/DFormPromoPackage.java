/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormPromoPackage.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.mkt.form;

import java.awt.BorderLayout;
import java.util.Vector;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiFormOwner;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanForm;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.mkt.db.DDbPromoPackage;
import sba.mod.mkt.db.DDbPromoPackagePromo;

/**
 *
 * @author Sergio Flores
 */
public class DFormPromoPackage extends DBeanForm implements DGuiFormOwner {

    private DDbPromoPackage moRegistry;
    private DGridPaneForm moGridDiscounts;

    /** Creates new form DFormPromoPackage */
    public DFormPromoPackage(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.M_PRM, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sba.lib.gui.bean.DBeanFieldText();
        jPanel1 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sba.lib.gui.bean.DBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlItemPriceType = new javax.swing.JLabel();
        moKeyItemPriceType = new sba.lib.gui.bean.DBeanFieldKey();
        jpDiscounts = new javax.swing.JPanel();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCode);

        moTextCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(moTextCode);

        jPanel2.add(jPanel3);

        jPanel1.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel1.add(moTextName);

        jPanel2.add(jPanel1);

        jPanel4.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlItemPriceType.setText("Precios ítems:*");
        jlItemPriceType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlItemPriceType);

        moKeyItemPriceType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moKeyItemPriceType);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jpDiscounts.setBorder(javax.swing.BorderFactory.createTitledBorder("Descuentos promocionales:"));
        jpDiscounts.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpDiscounts, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DBeanFormDialog form = null;

        DGuiUtils.setWindowBounds(this, 640, 400);

        moTextCode.setTextSettings(DGuiUtils.getLabelName(jlCode.getText()), 5);
        moTextName.setTextSettings(DGuiUtils.getLabelName(jlName.getText()), 50);
        moKeyItemPriceType.setKeySettings(miClient, DGuiUtils.getLabelName(jlItemPriceType), true);

        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moKeyItemPriceType);

        moFields.setFormButton(jbSave);

        moGridDiscounts = new DGridPaneForm(miClient, DModConsts.M_PRM_PRM, DLibConsts.UNDEFINED, "Descuentos promocionales") {

            @Override
            public void initGrid() {

            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[4];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Tipo referencia");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_L, "Referencia");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Tipo pago");
                columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_PER_DISC, "Descuento");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        form = new DDialogPromoPackagePromo(miClient, "Descuento promocional");
        form.setFormOwner(this);
        moGridDiscounts.setForm(form);
        moGridDiscounts.setPaneFormOwner(null);

        jpDiscounts.add(moGridDiscounts, BorderLayout.CENTER);

        mvFormGrids.add(moGridDiscounts);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlItemPriceType;
    private javax.swing.JLabel jlName;
    private javax.swing.JPanel jpDiscounts;
    private sba.lib.gui.bean.DBeanFieldKey moKeyItemPriceType;
    private sba.lib.gui.bean.DBeanFieldText moTextCode;
    private sba.lib.gui.bean.DBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    /**
     * @param promoToEvaluate Special price to evaluate.
     * @param indexToExclude Index to exclude if necesary, -1 when it is not.
     */
    private boolean isRowUnique(final DDbPromoPackagePromo promoToEvaluate, final int indexToExclude) {
        boolean unique = true;
        DDbPromoPackagePromo promo = null;

        for (int index = 0; index < moGridDiscounts.getModel().getRowCount(); index++) {
            if (index != indexToExclude) {
                promo = (DDbPromoPackagePromo) moGridDiscounts.getGridRow(index);
                if (promo.getPkPaymentTypeId() == promoToEvaluate.getPkPaymentTypeId() && promo.getPkLinkItemTypeId() == promoToEvaluate.getPkLinkItemTypeId() && promo.getPkReferenceItemId() == promoToEvaluate.getPkReferenceItemId()) {
                    unique = false;
                    miClient.showMsgBoxWarning(DDbConsts.ERR_MSG_REG_ALLREADY_EXISTS);
                    break;
                }
            }
        }

        return unique;
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItemPriceType, DModConsts.MS_ITM_PRC_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        Vector<DGridRow> promos = new Vector<DGridRow>();

        moRegistry = (DDbPromoPackage) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        moKeyItemPriceType.setValue(new int[] { moRegistry.getFkItemPriceTypeId() });

        for (DDbPromoPackagePromo promo :  moRegistry.getChildPromos()) {
            promos.add(promo);
        }

        moGridDiscounts.populateGrid(promos);

        setFormEditable(true);

        addAllListeners();
    }

    @Override
    public DDbPromoPackage getRegistry() throws Exception {
        DDbPromoPackage registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setFkItemPriceTypeId(moKeyItemPriceType.getValue()[0]);

        registry.getChildPromos().clear();
        for (DGridRow row : moGridDiscounts.getModel().getGridRows()) {
            registry.getChildPromos().add((DDbPromoPackagePromo) row);
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moGridDiscounts.getTable().getRowCount() == 0) {
                validation.setMessage(DUtilConsts.ERR_MSG_DOC_NO_ROWS);
                validation.setComponent(moTextName);
            }
        }

        return validation;
    }

    @Override
    public boolean validateRegistryNew(DDbRegistry registry) {
        return isRowUnique((DDbPromoPackagePromo) registry, -1);
    }

    @Override
    public boolean validateRegistryEdit(DDbRegistry registry) {
        return isRowUnique((DDbPromoPackagePromo) registry, moGridDiscounts.getTable().getSelectedRow());
    }
}
