/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormItemPrices.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.mkt.form;

import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.JToggleButton;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sba.gui.mygrid.DMyGridFilterSwitchTax;
import sba.gui.mygrid.cell.DMyGridCellRendererItemPrices;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.grid.DGridUtils;
import sba.lib.grid.cell.DGridCellRendererNumber;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbConfigCompany;
import sba.mod.fin.db.DDbTaxGroupConfigRow;
import sba.mod.mkt.db.DDbAgentType;
import sba.mod.mkt.db.DMktConsts;
import sba.mod.mkt.db.DRowItemNamePrices;
import sba.mod.mkt.db.DRowItemPrices;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DFormItemNamePrices extends DBeanFormDialog implements ActionListener, ListSelectionListener {

    private static final String MSG_SEL_PRC = "Se debe seleccionar al menos una lista de precios.";

    private DDbTaxGroupConfigRow moTaxGroupConfigRow;
    private double mdTaxRate;
    private boolean[] mabApplyingPrices;
    private DBeanFieldBoolean[] maoBoolPrices;
    private String[] masPriceNames;
    private String[] masPriceColumns;
    private DMyGridCellRendererItemPrices moCellRendererItemPrices;
    private DGridPaneForm moGridItems;
    private DGridPaneForm moGridItemNamePrices;

    /** Creates new form DFormItemPrices */
    public DFormItemNamePrices(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.MX_ITM_NAM_PRC, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpSettings = new javax.swing.JPanel();
        jpSettings1 = new javax.swing.JPanel();
        jtbTaxIncluded = new javax.swing.JToggleButton();
        jtfTaxRate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfRegistries = new javax.swing.JTextField();
        jpSettings2 = new javax.swing.JPanel();
        moBoolPriceSrp = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolPrice1 = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolPrice2 = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolPrice3 = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolPrice4 = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolPrice5 = new sba.lib.gui.bean.DBeanFieldBoolean();
        jbShow = new javax.swing.JButton();
        jbUpdate = new javax.swing.JButton();
        jbRestart = new javax.swing.JButton();
        jpPrices = new javax.swing.JPanel();
        jpItemNamePrices = new javax.swing.JPanel();
        jpItems = new javax.swing.JPanel();

        jpSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración de precios:"));
        jpSettings.setLayout(new java.awt.GridLayout(2, 1));

        jpSettings1.setLayout(new java.awt.FlowLayout(0, 5, 0));

        jtbTaxIncluded.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/swi_tax_off.gif"))); // NOI18N
        jtbTaxIncluded.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbTaxIncluded.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/swi_tax_on.gif"))); // NOI18N
        jpSettings1.add(jtbTaxIncluded);

        jtfTaxRate.setEditable(false);
        jtfTaxRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTaxRate.setText("0.0000");
        jtfTaxRate.setToolTipText("Razón impuestos");
        jtfTaxRate.setFocusable(false);
        jtfTaxRate.setPreferredSize(new java.awt.Dimension(60, 23));
        jpSettings1.add(jtfTaxRate);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Precio = cero:");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings1.add(jLabel1);

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(255, 255, 0));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField1.setText("0.0000");
        jTextField1.setFocusable(false);
        jTextField1.setPreferredSize(new java.awt.Dimension(50, 23));
        jpSettings1.add(jTextField1);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Núm. registros:");
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings1.add(jLabel2);

        jtfRegistries.setEditable(false);
        jtfRegistries.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfRegistries.setText("0");
        jtfRegistries.setFocusable(false);
        jtfRegistries.setPreferredSize(new java.awt.Dimension(60, 23));
        jpSettings1.add(jtfRegistries);

        jpSettings.add(jpSettings1);

        jpSettings2.setLayout(new java.awt.FlowLayout(3, 5, 0));

        moBoolPriceSrp.setText("PriceSRP");
        jpSettings2.add(moBoolPriceSrp);

        moBoolPrice1.setText("Price 1");
        jpSettings2.add(moBoolPrice1);

        moBoolPrice2.setText("Price 2");
        jpSettings2.add(moBoolPrice2);

        moBoolPrice3.setText("Price 3");
        jpSettings2.add(moBoolPrice3);

        moBoolPrice4.setText("Price 4");
        jpSettings2.add(moBoolPrice4);

        moBoolPrice5.setText("Price 5");
        jpSettings2.add(moBoolPrice5);

        jbShow.setText("Mostrar");
        jbShow.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings2.add(jbShow);

        jbUpdate.setText("Actualizar");
        jbUpdate.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings2.add(jbUpdate);

        jbRestart.setText("Reiniciar");
        jbRestart.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings2.add(jbRestart);

        jpSettings.add(jpSettings2);

        getContentPane().add(jpSettings, java.awt.BorderLayout.NORTH);

        jpPrices.setLayout(new java.awt.BorderLayout());

        jpItemNamePrices.setBorder(javax.swing.BorderFactory.createTitledBorder("Precios de ítems:"));
        jpItemNamePrices.setLayout(new java.awt.BorderLayout());
        jpPrices.add(jpItemNamePrices, java.awt.BorderLayout.CENTER);

        jpItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Ítems:"));
        jpItems.setPreferredSize(new java.awt.Dimension(150, 150));
        jpItems.setLayout(new java.awt.BorderLayout());
        jpPrices.add(jpItems, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpPrices, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        int price = 0;
        int[] prices = null;
        String[] columns = null;
        DDbConfigCompany configCompany = (DDbConfigCompany) miClient.getSession().getConfigCompany();

        DGuiUtils.setWindowBounds(this, 1024, 640);

        moFields.setFormButton(jbSave);

        jtbTaxIncluded.setSelected(((DDbConfigCompany) miClient.getSession().getConfigCompany()).isTaxIncluded());
        jtbTaxIncluded.setToolTipText(jtbTaxIncluded.isSelected() ? DMyGridFilterSwitchTax.TAX_Y : DMyGridFilterSwitchTax.TAX_N);

        moTaxGroupConfigRow = DTrnUtils.getTaxGroupConfigRowDefault(miClient.getSession());
        mdTaxRate = DTrnUtils.computeTaxRate(moTaxGroupConfigRow, DModSysConsts.TS_DPS_CT_SAL);
        jtfTaxRate.setText(DLibUtils.DecimalFormatValue4D.format(mdTaxRate));

        mabApplyingPrices = new boolean[DMktConsts.PRICES];
        maoBoolPrices = new DBeanFieldBoolean[DMktConsts.PRICES];
        masPriceNames = new String[DMktConsts.PRICES];
        masPriceColumns = new String[DMktConsts.PRICES];

        price = 0;
        mabApplyingPrices[price++] = configCompany.isPriceSrpApplying();
        mabApplyingPrices[price++] = configCompany.isPrice1Applying();
        mabApplyingPrices[price++] = configCompany.isPrice2Applying();
        mabApplyingPrices[price++] = configCompany.isPrice3Applying();
        mabApplyingPrices[price++] = configCompany.isPrice4Applying();
        mabApplyingPrices[price++] = configCompany.isPrice5Applying();

        price = 0;
        maoBoolPrices[price++] = moBoolPriceSrp;
        maoBoolPrices[price++] = moBoolPrice1;
        maoBoolPrices[price++] = moBoolPrice2;
        maoBoolPrices[price++] = moBoolPrice3;
        maoBoolPrices[price++] = moBoolPrice4;
        maoBoolPrices[price++] = moBoolPrice5;

        for (price = 0; price < DMktConsts.PRICES; price++) {
            maoBoolPrices[price].setSelected(mabApplyingPrices[price]);
        }

        prices = new int[] {
            DModSysConsts.MS_ITM_PRC_TP_SRP, DModSysConsts.MS_ITM_PRC_TP_RET, DModSysConsts.MS_ITM_PRC_TP_HAL,
            DModSysConsts.MS_ITM_PRC_TP_WHO, DModSysConsts.MS_ITM_PRC_TP_ESP, DModSysConsts.MS_ITM_PRC_TP_COS };

        for (price = 0; price < DMktConsts.PRICES; price++) {
            masPriceNames[price] = DLibUtils.textProperCase((String) miClient.getSession().readField(DModConsts.MS_ITM_PRC_TP, new int[] { prices[price] }, DDbRegistry.FIELD_NAME));
            maoBoolPrices[price].setText(masPriceNames[price]);
        }

        masPriceColumns = new String[] { "prc_srp", "prc_1", "prc_2", "prc_3", "prc_4", "prc_5" };

        moCellRendererItemPrices = new DMyGridCellRendererItemPrices(getDecimalFormat());

        moGridItems = new DGridPaneForm(miClient, DModConsts.MX_ITM_NAM_PRC, DModConsts.IU_ITM, "Ítems") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm columns[] = new DGridColumnForm[5];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME + " ítem");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_ITM, DGridConsts.COL_TITLE_CODE + " ítem");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_QTY, "Existencia");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT, "Últ. compra $ ML", getGridCellRendererNumber());

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpItems.add(moGridItems, BorderLayout.CENTER);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridItems);
        */

        createGridItemNamePrices();
        moGridItemNamePrices.populateGrid(new Vector<DGridRow>());

        jbSave.setEnabled(false);
        jbCancel.setText(DGuiConsts.TXT_BTN_CLOSE);

        updateStatusShow(true);
        addAllListeners();
    }

    private void createGridItemNamePrices() {
        if (jpItemNamePrices.getComponentCount() > 0) {
            jpItemNamePrices.removeAll();

            /* XXX Cell renderers not implemented yet in XML
            mvFormGrids.remove(moGridItemNamePrices);
            */
        }

        moGridItemNamePrices = new DGridPaneForm(miClient, DModConsts.MX_ITM_NAM_PRC, DLibConsts.UNDEFINED, "Precios nombre ítems") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                int prices = 0;
                DGridColumnForm columns[] = null;

                for (DBeanFieldBoolean field : maoBoolPrices) {
                    if (field.isSelected()) {
                        prices++;
                    }
                }

                columns = new DGridColumnForm[2 + prices];
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_S, DGridConsts.COL_TITLE_NAME + " género ítem");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_ITM_L, DGridConsts.COL_TITLE_NAME + " ítem");

                for (DBeanFieldBoolean field : maoBoolPrices) {
                    if (field.isSelected()) {
                        columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_DEC_AMT_UNIT, field.getText() + " $ ML", moCellRendererItemPrices);
                        columns[col++].setEditable(true);
                    }
                }

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        jpItemNamePrices.add(moGridItemNamePrices, BorderLayout.CENTER);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridItemNamePrices);
        */

        jpItemNamePrices.validate();
        jpItemNamePrices.repaint();
    }

    private void updateStatusShow(boolean enable) {
        int i = 0;

        if (enable) {
            jbShow.setEnabled(true);
            jbUpdate.setEnabled(false);
            jbRestart.setEnabled(false);

            for (i = 0; i < DMktConsts.PRICES; i++) {
                maoBoolPrices[i].setEnabled(mabApplyingPrices[i]);
            }

            clearItemNamePrices();
            jbShow.requestFocus();
        }
        else {
            jbShow.setEnabled(false);
            jbUpdate.setEnabled(true);
            jbRestart.setEnabled(true);

            for (i = 0; i < DMktConsts.PRICES; i++) {
                maoBoolPrices[i].setEnabled(false);
            }

            showItemNamePrices();
            jbUpdate.requestFocus();
        }
    }

    private DecimalFormat getDecimalFormat() {
        return jtbTaxIncluded.isSelected() ? DLibUtils.getDecimalFormatAmount() : DLibUtils.getDecimalFormatAmountUnitary();
    }

    private DGridCellRendererNumber getGridCellRendererNumber() {
        return jtbTaxIncluded.isSelected() ? DGridUtils.getCellRendererNumberAmount() : DGridUtils.getCellRendererNumberAmountUnitary();
    }

    private void clearItemNamePrices() {
        moGridItemNamePrices.clearGridRows();
        jtfRegistries.setText(DLibUtils.DecimalFormatInteger.format(0));
    }

    private void showItems() {
        double[] prices = null;
        ArrayList<String> columns = new ArrayList<String>();
        ArrayList<Integer> items = new ArrayList<Integer>();
        String[] itemsIds = null;
        String sql = "";
        ResultSet resultSet = null;
        DRowItemPrices rowItem = null;
        DRowItemNamePrices rowItemName = null;
        Vector<DGridRow> gridRows = new Vector<DGridRow>();

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            rowItemName = (DRowItemNamePrices) moGridItemNamePrices.getSelectedGridRow();

            if (rowItemName != null) {
                for (int i = 0; i < DMktConsts.PRICES; i++) {
                    if (maoBoolPrices[i].isSelected()) {
                        columns.add(masPriceColumns[i]);
                    }
                }

                sql = "SELECT i.id_itm "
                        + "FROM " + DModConsts.TablesMap.get(DModConsts.IU_ITM) + " AS i "
                        + "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.IU_GEN) + " AS g ON i.fk_gen = g.id_gen "
                        + "WHERE g.name = '" + rowItemName.getGenusName() + "' AND i.itm_name = '" + rowItemName.getItemName() + "' ";

                for (int i = 0; i < columns.size(); i++) {
                    sql += "AND i." + columns.get(i) + " = " + DLibUtils.getDecimalFormatAmountUnitary().format(rowItemName.getFormerPrices()[i]).replaceAll(",", "") + " ";
                }

                resultSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resultSet.next()) {
                    items.add(resultSet.getInt(1));
                }

                itemsIds = new String[items.size()];
                for (int i = 0; i < items.size(); i++) {
                    itemsIds[i] = "" + items.get(i);
                }

                sql = "SELECT i.id_itm, i.fk_unt, i.code, i.name, " +
                        "COALESCE((SELECT dr.prc_unt " +
                        "FROM t_dps AS d, t_dps_row AS dr " +
                        "WHERE d.id_dps = dr.id_dps AND d.b_del = 0 AND dr.b_del = 0 AND " +
                        "d.fk_dps_ct = " + DModSysConsts.TS_DPS_CT_PUR + " AND dr.fk_row_itm = i.id_itm AND dr.fk_adj_ct = " + DModSysConsts.TS_ADJ_CT_NA + " " +
                        "ORDER BY d.dt DESC, d.ts_usr_upd DESC LIMIT 1), 0) AS f_lpp, " +
                        "u.id_unt, " +
                        "u.code, " +
                        "(SELECT SUM(s.mov_in - s.mov_out) " +
                        "FROM " + DModConsts.TablesMap.get(DModConsts.T_STK) + " AS s " +
                        "WHERE s.id_itm = i.id_itm AND s.id_unt = i.fk_unt AND s.b_del = 0 AND " +
                        "s.id_yer = " + miClient.getSession().getWorkingYear() + ") AS f_stk " +
                        "FROM " + DModConsts.TablesMap.get(DModConsts.IU_ITM) + " AS i " +
                        "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.IU_UNT) + " AS u ON " +
                        "i.fk_unt = u.id_unt " +
                        "WHERE i.b_del = 0 AND i.b_fre_prc = 0 AND i.id_itm IN (" + DLibUtils.textImplode(itemsIds, ", ") + ") " +
                        "ORDER BY i.name, i.code, i.id_itm, u.code, u.id_unt ";

                resultSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resultSet.next()) {
                    rowItem = new DRowItemPrices(resultSet.getInt("i.id_itm"), resultSet.getString("i.code"), resultSet.getString("i.name"));

                    rowItem.setUnitCode(resultSet.getString("u.code"));
                    rowItem.setStock(resultSet.getDouble("f_stk"));
                    rowItem.setPriceLpp(resultSet.getDouble("f_lpp"));
                    rowItem.setTaxRate(mdTaxRate);
                    rowItem.setTaxIncluded(jtbTaxIncluded.isSelected());

                    rowItem.setPrices(prices);

                    gridRows.add(rowItem);
                }
            }

            moGridItems.populateGrid(gridRows);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
        finally {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void showItemNamePrices() {
        int price = 0;
        double[] prices = null;
        double[] formerPrices = null;
        ArrayList<String> columns = new ArrayList<String>();
        String sql = "";
        ResultSet resultSet = null;
        DRowItemNamePrices row = null;
        Vector<DGridRow> gridRows = new Vector<DGridRow>();

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            for (int i = 0; i < DMktConsts.PRICES; i++) {
                if (maoBoolPrices[i].isSelected()) {
                    columns.add(masPriceColumns[i]);
                    sql += (sql.isEmpty() ? "" : ", ") + "i." + masPriceColumns[i];
                }
            }

            if (columns.isEmpty()) {
                throw new Exception(MSG_SEL_PRC);
            }

            sql = "SELECT DISTINCT g.name AS f_gen_name, i.itm_name AS f_itm_name, " + sql + " "
                    + "FROM iu_itm AS i "
                    + "INNER JOIN iu_gen AS g ON i.fk_gen = g.id_gen "
                    + "WHERE i.b_del = 0 AND i.b_fre_prc = 0 "
                    + "ORDER BY g.name, i.itm_name;";
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                row = new DRowItemNamePrices(resultSet.getString("f_gen_name"), resultSet.getString("f_itm_name"));

                row.setTaxRate(mdTaxRate);
                row.setTaxIncluded(jtbTaxIncluded.isSelected());

                price = 0;
                prices = new double[columns.size()];
                formerPrices = new double[columns.size()];

                for (String column : columns) {
                    prices[price] = resultSet.getDouble("i." + column);
                    formerPrices[price++] = resultSet.getDouble("i." + column);
                }

                row.setPrices(prices);
                row.setFormerPrices(formerPrices);

                gridRows.add(row);
            }

            createGridItemNamePrices();
            moGridItemNamePrices.populateGrid(gridRows, this);
            jtfRegistries.setText(DLibUtils.DecimalFormatInteger.format(moGridItemNamePrices.getTable().getRowCount()));
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
        finally {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void updateItemNamePrices() {
        int i = 0;
        boolean saved = false;
        double[] prices = null;
        double[] formerPrices = null;
        ArrayList<String> columns = new ArrayList<String>();
        String sql = "";
        String tableItm = DModConsts.TablesMap.get(DModConsts.IU_ITM);
        String tableGen = DModConsts.TablesMap.get(DModConsts.IU_GEN);
        Statement statement = null;
        DRowItemNamePrices rowItemName = null;

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            for (i = 0; i < DMktConsts.PRICES; i++) {
                if (maoBoolPrices[i].isSelected()) {
                    columns.add(masPriceColumns[i]);
                }
            }

            statement = miClient.getSession().getStatement();

            for (DGridRow row : moGridItemNamePrices.getModel().getGridRows()) {
                rowItemName = (DRowItemNamePrices) row;

                if (rowItemName.isRowEdited()) {
                    prices = rowItemName.getPrices();
                    formerPrices = rowItemName.getFormerPrices();

                    sql = "UPDATE " + tableItm + ", " + tableGen + " SET ";
                    for (i = 0; i < columns.size(); i++) {
                        sql += (i == 0 ? "" : ", ") + tableItm + "." + columns.get(i) + " = " + DLibUtils.getDecimalFormatAmountUnitary().format(prices[i]).replaceAll(",", "");
                    }

                    sql += " WHERE " + tableItm + ".fk_gen = " + tableGen + ".id_gen AND "
                            + tableGen + ".name = '" + rowItemName.getGenusName() + "' AND " + tableItm + ".itm_name = '" + rowItemName.getItemName() + "' ";

                    for (i = 0; i < columns.size(); i++) {
                        sql += "AND " + tableItm + "." + columns.get(i) + " = " + DLibUtils.getDecimalFormatAmountUnitary().format(formerPrices[i]).replaceAll(",", "") + " ";
                    }

                    statement.execute(sql);
                    saved = true;
                }
            }

            if (!saved) {
                miClient.showMsgBoxInformation("No se modificó ningún precio.");
            }
        }
        catch (SQLException e) {
            DLibUtils.showException(this, e);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
        finally {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void actionTaxIncluded() {
        int index = moGridItemNamePrices.getTable().getSelectedRow();
        boolean taxIncluded = jtbTaxIncluded.isSelected();

        jtbTaxIncluded.setToolTipText(taxIncluded ? DMyGridFilterSwitchTax.TAX_Y : DMyGridFilterSwitchTax.TAX_N);
        moCellRendererItemPrices.setNumberFormat(getDecimalFormat());

        for (DGridRow row : moGridItemNamePrices.getModel().getGridRows()) {
            ((DRowItemNamePrices) row).setTaxIncluded(taxIncluded);
        }

        moGridItemNamePrices.renderGridRows();
        moGridItemNamePrices.setSelectedGridRow(index);
    }

    private void actionShow() {
        boolean selected = false;

        for (DBeanFieldBoolean field : maoBoolPrices) {
            if (field.isSelected()) {
                selected = true;
                break;
            }
        }

        if (!selected) {
            miClient.showMsgBoxWarning(MSG_SEL_PRC);
        }
        else {
            updateStatusShow(false);
        }
    }

    private void actionUpdate() {
        updateItemNamePrices();
        showItemNamePrices();
    }

    private void actionRestart() {
        updateStatusShow(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jbRestart;
    private javax.swing.JButton jbShow;
    private javax.swing.JButton jbUpdate;
    private javax.swing.JPanel jpItemNamePrices;
    private javax.swing.JPanel jpItems;
    private javax.swing.JPanel jpPrices;
    private javax.swing.JPanel jpSettings;
    private javax.swing.JPanel jpSettings1;
    private javax.swing.JPanel jpSettings2;
    private javax.swing.JToggleButton jtbTaxIncluded;
    private javax.swing.JTextField jtfRegistries;
    private javax.swing.JTextField jtfTaxRate;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPrice1;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPrice2;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPrice3;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPrice4;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPrice5;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPriceSrp;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jtbTaxIncluded.addActionListener(this);
        jbShow.addActionListener(this);
        jbUpdate.addActionListener(this);
        jbRestart.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jtbTaxIncluded.removeActionListener(this);
        jbShow.removeActionListener(this);
        jbUpdate.removeActionListener(this);
        jbRestart.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbAgentType getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void resetForm() {
        // Method to be overrided when needed
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbShow) {
                actionShow();
            }
            else if (button == jbUpdate) {
                actionUpdate();
            }
            else if (button == jbRestart) {
                actionRestart();
            }
        }
        else if (e.getSource() instanceof JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbTaxIncluded) {
                actionTaxIncluded();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        showItems();
    }
}
