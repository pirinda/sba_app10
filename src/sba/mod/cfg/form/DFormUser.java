/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormUser.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.cfg.form;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JComboBox;
import sba.gui.DGuiClientSessionCustom;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridPaneFormOwner;
import sba.lib.grid.DGridRow;
import sba.lib.grid.cell.DGridCellEditorKey;
import sba.lib.grid.cell.DGridCellRenderereKey;
import sba.lib.grid.cell.DGridCellUtils;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiForm;
import sba.lib.gui.DGuiFormOwner;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanForm;
import sba.lib.gui.bean.DBeanFormDialog;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.bpr.db.DDbBranch;
import sba.mod.cfg.db.DDbBranchCash;
import sba.mod.cfg.db.DDbBranchWarehouse;
import sba.mod.cfg.db.DDbUser;
import sba.mod.cfg.db.DDbUserBranch;
import sba.mod.cfg.db.DDbUserBranchCash;
import sba.mod.cfg.db.DDbUserBranchDpsSeries;
import sba.mod.cfg.db.DDbUserBranchWarehouse;
import sba.mod.cfg.db.DDbUserCompany;
import sba.mod.cfg.db.DDbUserPrivilege;
import sba.mod.cfg.db.DRowUserPrivilege;
import sba.mod.trn.db.DDbDpsSeriesBranch;

/**
 *
 * @author Sergio Flores
 */
public class DFormUser extends DBeanForm implements DGridPaneFormOwner, DGuiFormOwner, ActionListener, ItemListener {

    private static final int PRIV_MOD = 0;
    private static final int PRIV_PRV = 1;
    private static final int PRIV_SEL = 2;
    private static final int PRIV_LEV = 3;

    private DDbUser moRegistry;
    private DGridPaneForm moGridPrivileges;
    private DGridPaneForm moGridBranches;
    private DGridPaneForm moGridBranchCashes;
    private DGridPaneForm moGridBranchWarehouses;
    private DGridPaneForm moGridBranchDpsSeries;
    private Vector<DDbBranchCash> mvBranchCashes;
    private Vector<DDbBranchWarehouse> mvBranchWarehouses;
    private Vector<DDbDpsSeriesBranch> mvBranchDpsSeries;

    /** Creates new form DFormUser */
    public DFormUser(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.CU_USR, DLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jpContainer1 = new javax.swing.JPanel();
        jpUser = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sba.lib.gui.bean.DBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlPassword = new javax.swing.JLabel();
        moPswdPassword = new sba.lib.gui.bean.DBeanFieldPassword();
        jbPassword = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlType = new javax.swing.JLabel();
        moKeyType = new sba.lib.gui.bean.DBeanFieldKey();
        jbType = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlCustomType = new javax.swing.JLabel();
        moKeyCustomType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        moBoolUniversal = new sba.lib.gui.bean.DBeanFieldBoolean();
        jpBranches = new javax.swing.JPanel();
        jpContainer2 = new javax.swing.JPanel();
        jpPrivileges = new javax.swing.JPanel();
        jpAccess = new javax.swing.JPanel();
        jpAccessCash = new javax.swing.JPanel();
        jpAccessWarehouse = new javax.swing.JPanel();
        jpAccessDpsSeries = new javax.swing.JPanel();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jpContainer1.setPreferredSize(new java.awt.Dimension(667, 165));
        jpContainer1.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jpUser.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpUser.setMinimumSize(new java.awt.Dimension(195, 180));
        jpUser.setPreferredSize(new java.awt.Dimension(359, 180));
        jpUser.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlName);
        jPanel3.add(moTextName);

        jpUser.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPassword.setText("Contraseña:*");
        jlPassword.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlPassword);

        moPswdPassword.setText("dBeanFieldPassword1");
        jPanel4.add(moPswdPassword);

        jbPassword.setText("<");
        jbPassword.setToolTipText("Modificar contraseña");
        jbPassword.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPassword.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPassword);

        jpUser.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlType.setText("Tipo usuario:*");
        jlType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlType);

        moKeyType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moKeyType);

        jbType.setText("<");
        jbType.setToolTipText("Modificar tipo usuario");
        jbType.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbType.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbType);

        jpUser.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCustomType.setText("Tipo propio:*");
        jlCustomType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlCustomType);

        moKeyCustomType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyCustomType);

        jpUser.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolUniversal.setText("Acceso universal a la empresa");
        moBoolUniversal.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moBoolUniversal);

        jpUser.add(jPanel7);

        jpContainer1.add(jpUser);

        jpBranches.setBorder(javax.swing.BorderFactory.createTitledBorder("Acceso a sucursales de la empresa:"));
        jpBranches.setLayout(new java.awt.BorderLayout());
        jpContainer1.add(jpBranches);

        jpContainer.add(jpContainer1, java.awt.BorderLayout.NORTH);

        jpContainer2.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jpPrivileges.setBorder(javax.swing.BorderFactory.createTitledBorder("Permisos del usuario:"));
        jpPrivileges.setLayout(new java.awt.BorderLayout());
        jpContainer2.add(jpPrivileges);

        jpAccess.setLayout(new java.awt.GridLayout(3, 1, 5, 5));

        jpAccessCash.setBorder(javax.swing.BorderFactory.createTitledBorder("Acceso a cuentas de dinero:"));
        jpAccessCash.setLayout(new java.awt.BorderLayout());
        jpAccess.add(jpAccessCash);

        jpAccessWarehouse.setBorder(javax.swing.BorderFactory.createTitledBorder("Acceso a almacenes de bienes:"));
        jpAccessWarehouse.setLayout(new java.awt.BorderLayout());
        jpAccess.add(jpAccessWarehouse);

        jpAccessDpsSeries.setBorder(javax.swing.BorderFactory.createTitledBorder("Acceso a series de documentos:"));
        jpAccessDpsSeries.setLayout(new java.awt.BorderLayout());
        jpAccess.add(jpAccessDpsSeries);

        jpContainer2.add(jpAccess);

        jpContainer.add(jpContainer2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiForm form = null;

        DGuiUtils.setWindowBounds(this, 1024, 640);

        moTextName.setTextSettings(DGuiUtils.getLabelName(jlName.getText()), 16);
        moTextName.setTextCaseType(DGuiConsts.TEXT_CASE_LOWER);
        moPswdPassword.setTextSettings(DGuiUtils.getLabelName(jlPassword.getText()), 16);
        moKeyType.setKeySettings(miClient, DGuiUtils.getLabelName(jlType.getText()), true);
        moKeyCustomType.setKeySettings(miClient, DGuiUtils.getLabelName(jlCustomType.getText()), true);
        moBoolUniversal.setBooleanSettings(moBoolUniversal.getText(), false);

        moFields.addField(moTextName);
        moFields.addField(moPswdPassword);
        moFields.addField(moKeyType);
        moFields.addField(moKeyCustomType);
        moFields.addField(moBoolUniversal);

        moFields.setFormButton(jbSave);

        moGridPrivileges = new DGridPaneForm(miClient, DModConsts.CU_USR_PRV, DLibConsts.UNDEFINED, "Privilegios") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[4];
                JComboBox comboBox = new JComboBox();
                DGridCellRenderereKey levelRenderer = null;
                DGridCellEditorKey levelEditor = null;

                miClient.getSession().populateCatalogue(comboBox, DModConsts.CS_LEV, DLibConsts.UNDEFINED, null);
                levelRenderer = new DGridCellRenderereKey(DGridCellUtils.createKeyValues(comboBox));
                levelEditor = new DGridCellEditorKey(comboBox);

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Módulo");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Permiso");
                columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Asignado");
                columns[col++].setEditable(true);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT, "Nivel", levelRenderer, levelEditor);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridBranches = new DGridPaneForm(miClient, DModConsts.CU_USR_BRA, DLibConsts.UNDEFINED, "Sucursales") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm columns[] = new DGridColumnForm[5];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Sucursal");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Inhabilitado");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_M, "Univ. cuentas dinero");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_M, "Univ. almacenes");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_M, "Univ. series doctos");

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridBranchCashes = new DGridPaneForm(miClient, DModConsts.CU_USR_CSH, DLibConsts.UNDEFINED, "Cuentas dinero") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm columns[] = new DGridColumnForm[4];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Sucursal");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Cuenta dinero");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Inhabilitado");
                columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_M, "Seleccionado");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridBranchWarehouses = new DGridPaneForm(miClient, DModConsts.CU_USR_CSH, DLibConsts.UNDEFINED, "Almacenes") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm columns[] = new DGridColumnForm[4];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Sucursal");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Almacén");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Inhabilitado");
                columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_M, "Seleccionado");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridBranchDpsSeries = new DGridPaneForm(miClient, DModConsts.CU_USR_CSH, DLibConsts.UNDEFINED, "Series doctos") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm columns[] = new DGridColumnForm[5];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Sucursal");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Tipo docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Serie docto");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Inhabilitado");
                columns[col] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_M, "Seleccionado");
                columns[col++].setEditable(true);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridPrivileges.setPaneFormOwner(this);
        jpPrivileges.add(moGridPrivileges, BorderLayout.CENTER);

        form = miClient.getSession().getModuleByGuiType(DModConsts.CU_USR_BRA, DLibConsts.UNDEFINED).getForm(DModConsts.CU_USR_BRA, DLibConsts.UNDEFINED, null);
        ((DBeanFormDialog) form).setFormOwner(this);

        moGridBranches.setForm(form);
        moGridBranches.setPaneFormOwner(this);
        jpBranches.add(moGridBranches, BorderLayout.CENTER);

        moGridBranchCashes.setPaneFormOwner(this);
        moGridBranchCashes.getPanelCommandsSys().setVisible(false);
        jpAccessCash.add(moGridBranchCashes, BorderLayout.CENTER);

        moGridBranchWarehouses.setPaneFormOwner(this);
        moGridBranchWarehouses.getPanelCommandsSys().setVisible(false);
        jpAccessWarehouse.add(moGridBranchWarehouses, BorderLayout.CENTER);

        moGridBranchDpsSeries.setPaneFormOwner(this);
        moGridBranchDpsSeries.getPanelCommandsSys().setVisible(false);
        jpAccessDpsSeries.add(moGridBranchDpsSeries, BorderLayout.CENTER);

        /* XXX Cell renderers not implemented yet in XML
        mvFormGrids.add(moGridPrivileges);
        mvFormGrids.add(moGridBranches);
        mvFormGrids.add(moGridBranchCashes);
        mvFormGrids.add(moGridBranchWarehouses);
        mvFormGrids.add(moGridBranchDpsSeries);
        */
    }

    private void initPrivileges() {
        String sql = "";
        ResultSet resultSet = null;
        DRowUserPrivilege privilege = null;
        Vector<DGridRow> rows = new Vector<DGridRow>();

        try {
            sql = "SELECT m.id_mod, m.name, p.id_prv, p.name, p.b_lev " +
                    "FROM " + DModConsts.TablesMap.get(DModConsts.CS_MOD) + " AS m " +
                    "INNER JOIN " + DModConsts.TablesMap.get(DModConsts.CS_PRV) + " AS p ON " +
                    "m.id_mod = p.fk_mod " +
                    "WHERE p.b_del = 0 " +
                    "ORDER BY m.sort, p.sort ";
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                privilege = new DRowUserPrivilege();
                privilege.PrivilegeKey = new int[] { resultSet.getInt("p.id_prv") };
                privilege.Privilege = resultSet.getString("p.name");
                privilege.Module = resultSet.getString("m.name");
                privilege.IsLevelApplying = resultSet.getBoolean("p.b_lev");
                rows.add(privilege);
            }

            moGridPrivileges.populateGrid(rows);
            moGridPrivileges.clearSortKeys();
            moGridPrivileges.setSelectedGridRow(0);
        }
        catch (SQLException e) {
            DLibUtils.showException(this, e);
            DLibUtils.printSqlQuery(this, sql);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    private void initBranches() {
        Vector<DGridRow> rows = new Vector<DGridRow>();

        try {
            moGridBranches.populateGrid(rows);
            moGridBranches.setSelectedGridRow(0);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    private void initBranchCashes() {
        Vector<DGridRow> rows = new Vector<DGridRow>();

        try {
            moGridBranchCashes.populateGrid(rows);
            moGridBranchCashes.setSelectedGridRow(0);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    private void initBranchWarehouses() {
        Vector<DGridRow> rows = new Vector<DGridRow>();

        try {
            moGridBranchWarehouses.populateGrid(rows);
            moGridBranchWarehouses.setSelectedGridRow(0);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    private void initBranchDpsSeries() {
        Vector<DGridRow> rows = new Vector<DGridRow>();

        try {
            moGridBranchDpsSeries.populateGrid(rows);
            moGridBranchDpsSeries.setSelectedGridRow(0);
        }
        catch (Exception e) {
            DLibUtils.showException(this, e);
        }
    }

    private void populateBranchEntities(DDbUserBranch userBranch) {
        int[] branchKey = userBranch.getBranchKey();

        if (userBranch.isUniversalCash()) {
            removeBranchCashes(branchKey);
        }
        else {
            populateBranchCashes(branchKey);
        }

        if (userBranch.isUniversalWarehouse()) {
            removeBranchWarehouses(branchKey);
        }
        else {
            populateBranchWarehouses(branchKey);
        }

        if (userBranch.isUniversalDpsSeries()) {
            removeBranchDpsSeries(branchKey);
        }
        else {
            populateBranchDpsSeries(branchKey);
        }
    }

    private void removeBranchEntities(DDbUserBranch userBranch) {
        int[] branchKey = userBranch.getBranchKey();

        removeBranchCashes(branchKey);
        removeBranchWarehouses(branchKey);
        removeBranchDpsSeries(branchKey);
    }

    private void populateBranchCashes(int[] branchKey) {
        boolean add = false;
        boolean populated = false;

        for (DDbBranchCash entity : mvBranchCashes) {
            if (DLibUtils.compareKeys(branchKey, entity.getBranchKey())) {
                DDbUserBranchCash userEntity = null;

                add = true;
                for (DGridRow row : moGridBranchCashes.getModel().getGridRows()) {
                    userEntity = (DDbUserBranchCash) row;
                    if (DLibUtils.compareKeys(entity.getPrimaryKey(), userEntity.getBranchEntityKey())) {
                        add = false;
                        break;
                    }
                }

                if (add) {
                    userEntity = new DDbUserBranchCash();
                    userEntity.setPkBizPartnerId(entity.getPkBizPartnerId());
                    userEntity.setPkBranchId(entity.getPkBranchId());
                    userEntity.setPkCashId(entity.getPkCashId());
                    userEntity.setXtaBranchName(entity.getDbBranchName());
                    userEntity.setXtaCashName(entity.getName());
                    userEntity.setXtaDisabled(entity.isDisabled());
                    userEntity.setXtaSelected(false);
                    moGridBranchCashes.getModel().getGridRows().add(userEntity);
                    populated = true;
                }
            }
        }

        if (populated) {
            moGridBranchCashes.renderGridRows();
        }
    }

    private void populateBranchWarehouses(int[] branchKey) {
        boolean add = false;
        boolean populated = false;

        for (DDbBranchWarehouse entity : mvBranchWarehouses) {
            if (DLibUtils.compareKeys(branchKey, entity.getBranchKey())) {
                DDbUserBranchWarehouse userEntity = null;

                add = true;
                for (DGridRow row : moGridBranchWarehouses.getModel().getGridRows()) {
                    userEntity = (DDbUserBranchWarehouse) row;
                    if (DLibUtils.compareKeys(entity.getPrimaryKey(), userEntity.getBranchEntityKey())) {
                        add = false;
                        break;
                    }
                }

                if (add) {
                    userEntity = new DDbUserBranchWarehouse();
                    userEntity.setPkBizPartnerId(entity.getPkBizPartnerId());
                    userEntity.setPkBranchId(entity.getPkBranchId());
                    userEntity.setPkWarehouseId(entity.getPkWarehouseId());
                    userEntity.setXtaBranchName(entity.getDbBranchName());
                    userEntity.setXtaWarehouseName(entity.getName());
                    userEntity.setXtaDisabled(entity.isDisabled());
                    userEntity.setXtaSelected(false);
                    moGridBranchWarehouses.getModel().getGridRows().add(userEntity);
                    populated = true;
                }
            }
        }

        if (populated) {
            moGridBranchWarehouses.renderGridRows();
        }
    }

    private void populateBranchDpsSeries(int[] branchKey) {
        boolean add = false;
        boolean populated = false;

        for (DDbDpsSeriesBranch entity : mvBranchDpsSeries) {
            if (DLibUtils.compareKeys(branchKey, entity.getBranchKey())) {
                DDbUserBranchDpsSeries userEntity = null;

                add = true;
                for (DGridRow row : moGridBranchDpsSeries.getModel().getGridRows()) {
                    userEntity = (DDbUserBranchDpsSeries) row;
                    if (DLibUtils.compareKeys(entity.getPrimaryKey(), userEntity.getBranchEntityKey())) {
                        add = false;
                        break;
                    }
                }

                if (add) {
                    userEntity = new DDbUserBranchDpsSeries();
                    userEntity.setPkSeriesId(entity.getPkSeriesId());
                    userEntity.setPkBizPartnerId(entity.getPkBizPartnerId());
                    userEntity.setPkBranchId(entity.getPkBranchId());
                    userEntity.setXtaBranchName(entity.getDbBranchName());
                    userEntity.setXtaDpsTypeName(entity.getDbDpsTypeName());
                    userEntity.setXtaSeries(entity.getDbSeries());
                    userEntity.setXtaDisabled(false);
                    userEntity.setXtaSelected(false);
                    moGridBranchDpsSeries.getModel().getGridRows().add(userEntity);
                    populated = true;
                }
            }
        }

        if (populated) {
            moGridBranchDpsSeries.renderGridRows();
        }
    }

    private void removeBranchCashes(int[] branchKey) {
        Vector<DGridRow> rows = new Vector<DGridRow>();

        for (DGridRow row : moGridBranchCashes.getModel().getGridRows()) {
            DDbUserBranchCash userEntity = (DDbUserBranchCash) row;
            if (DLibUtils.compareKeys(branchKey, userEntity.getBranchKey())) {
                rows.add(row);
            }
        }

        if (rows.size() > 0) {
            for (DGridRow row : rows) {
                moGridBranchCashes.getModel().getGridRows().remove(row);
            }
            moGridBranchCashes.renderGridRows();
        }
    }

    private void removeBranchWarehouses(int[] branchKey) {
        Vector<DGridRow> rows = new Vector<DGridRow>();

        for (DGridRow row : moGridBranchWarehouses.getModel().getGridRows()) {
            DDbUserBranchWarehouse userEntity = (DDbUserBranchWarehouse) row;
            if (DLibUtils.compareKeys(branchKey, userEntity.getBranchKey())) {
                rows.add(row);
            }
        }

        if (rows.size() > 0) {
            for (DGridRow row : rows) {
                moGridBranchWarehouses.getModel().getGridRows().remove(row);
            }
            moGridBranchWarehouses.renderGridRows();
        }
    }

    private void removeBranchDpsSeries(int[] branchKey) {
        Vector<DGridRow> rows = new Vector<DGridRow>();

        for (DGridRow row : moGridBranchDpsSeries.getModel().getGridRows()) {
            DDbUserBranchDpsSeries userEntity = (DDbUserBranchDpsSeries) row;
            if (DLibUtils.compareKeys(branchKey, userEntity.getBranchKey())) {
                rows.add(row);
            }
        }

        if (rows.size() > 0) {
            for (DGridRow row : rows) {
                moGridBranchDpsSeries.getModel().getGridRows().remove(row);
            }
            moGridBranchDpsSeries.renderGridRows();
        }
    }

    private void actionPassword() {
        jbPassword.setEnabled(false);
        moPswdPassword.setEditable(true);
        moPswdPassword.requestFocus();
    }

    private void actionType() {
        jbType.setEnabled(false);
        moKeyType.setEnabled(true);
        moKeyType.requestFocus();
    }

    private void itemStateChangedUniversal() {
        if (!moBoolUniversal.getValue()) {
            moGridBranches.setRowButtonsEnabled(true);
        }
        else {
            moGridBranches.setRowButtonsEnabled(false);
            moGridBranches.clearGridRows();
            moGridBranchCashes.clearGridRows();
            moGridBranchWarehouses.clearGridRows();
            moGridBranchDpsSeries.clearGridRows();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbPassword;
    private javax.swing.JButton jbType;
    private javax.swing.JLabel jlCustomType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlPassword;
    private javax.swing.JLabel jlType;
    private javax.swing.JPanel jpAccess;
    private javax.swing.JPanel jpAccessCash;
    private javax.swing.JPanel jpAccessDpsSeries;
    private javax.swing.JPanel jpAccessWarehouse;
    private javax.swing.JPanel jpBranches;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JPanel jpContainer1;
    private javax.swing.JPanel jpContainer2;
    private javax.swing.JPanel jpPrivileges;
    private javax.swing.JPanel jpUser;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolUniversal;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCustomType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyType;
    private sba.lib.gui.bean.DBeanFieldPassword moPswdPassword;
    private sba.lib.gui.bean.DBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jbPassword.addActionListener(this);
        jbType.addActionListener(this);
        moBoolUniversal.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPassword.removeActionListener(this);
        jbType.removeActionListener(this);
        moBoolUniversal.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        DGuiClientSessionCustom sessionCustom = (DGuiClientSessionCustom) miClient.getSession().getSessionCustom();

        mvBranchCashes = sessionCustom.getAllBranchCashes();
        mvBranchWarehouses = sessionCustom.getAllBranchWarehouses();
        mvBranchDpsSeries = sessionCustom.getAllBranchDpsSeries();

        miClient.getSession().populateCatalogue(moKeyType, DModConsts.CS_USR_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyCustomType, DModConsts.CU_USR_CTM_TP, DLibConsts.UNDEFINED, null);

        initPrivileges();
        initBranches();
        initBranchCashes();
        initBranchWarehouses();
        initBranchDpsSeries();
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        DDbUserCompany userCompany = null;

        moRegistry = (DDbUser) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");

            userCompany = new DDbUserCompany();
            userCompany.setPkBizPartnerId(DUtilConsts.BPR_CO_ID);
            moRegistry.setChildCompany(userCompany);
            moRegistry.setFkUserTypeId(DModSysConsts.CS_USR_TP_USR);
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextName.setValue(moRegistry.getName());
        moPswdPassword.setValue("");
        moBoolUniversal.setValue(moRegistry.getChildCompany().isUniversal());
        moGridBranches.setRowButtonsEnabled(!moBoolUniversal.getValue());
        moKeyType.setValue(new int[] { moRegistry.getFkUserTypeId() });
        moKeyCustomType.setValue(new int[] { moRegistry.getFkUserCustomTypeId() });

        for (DDbUserPrivilege privilege : moRegistry.getChildPrivileges()) {
            for (DGridRow row : moGridPrivileges.getModel().getGridRows()) {
                DRowUserPrivilege userPrivilege = (DRowUserPrivilege) row;
                if (privilege.getPkPrivilegeId() == userPrivilege.PrivilegeKey[0]) {
                    userPrivilege.IsSelected = true;
                    userPrivilege.LevelKey = new int[] { privilege.getFkLevelId() };
                    break;
                }
            }
        }

        for (DDbUserBranch userBranch : moRegistry.getChildCompany().getChildBranches()) {
            DDbBranch branch = (DDbBranch) miClient.getSession().readRegistry(DModConsts.BU_BRA, userBranch.getBranchKey());
            userBranch.setXtaBranchName(branch.getName());
            userBranch.setXtaDisabled(branch.isDisabled());
            moGridBranches.addGridRow(userBranch);
            populateBranchEntities(userBranch);

            for (DDbUserBranchCash userEntity : userBranch.getChildBranchCashes()) {
                for (DGridRow row : moGridBranchCashes.getModel().getGridRows()) {
                    DDbUserBranchCash gridEntity = (DDbUserBranchCash) row;
                    if (DLibUtils.compareKeys(userEntity.getBranchEntityKey(), gridEntity.getBranchEntityKey())) {
                        gridEntity.setXtaSelected(true);
                        break;
                    }
                }
            }

            for (DDbUserBranchWarehouse userEntity : userBranch.getChildBranchWarehouses()) {
                for (DGridRow row : moGridBranchWarehouses.getModel().getGridRows()) {
                    DDbUserBranchWarehouse gridEntity = (DDbUserBranchWarehouse) row;
                    if (DLibUtils.compareKeys(userEntity.getBranchEntityKey(), gridEntity.getBranchEntityKey())) {
                        gridEntity.setXtaSelected(true);
                        break;
                    }
                }
            }

            for (DDbUserBranchDpsSeries userEntity : userBranch.getChildBranchDpsSeries()) {
                for (DGridRow row : moGridBranchDpsSeries.getModel().getGridRows()) {
                    DDbUserBranchDpsSeries gridEntity = (DDbUserBranchDpsSeries) row;
                    if (DLibUtils.compareKeys(userEntity.getBranchEntityKey(), gridEntity.getBranchEntityKey())) {
                        gridEntity.setXtaSelected(true);
                        break;
                    }
                }
            }
        }

        if (moGridBranches.getModel().getRowCount() > 0) {
            moGridBranches.renderGridRows();
        }

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moPswdPassword.setEditable(true);
            jbPassword.setEnabled(false);
        }
        else {
            moPswdPassword.setEditable(false);
            jbPassword.setEnabled(true);
        }

        moKeyType.setEnabled(false);
        jbType.setEnabled(true);

        addAllListeners();
    }

    @Override
    public DDbUser getRegistry() throws Exception {
        DDbUser registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        if (moPswdPassword.isEditable()) {
            registry.setPassword(moPswdPassword.getValue());
        }

        registry.setName(moTextName.getValue());
        registry.setFkUserTypeId(moKeyType.getValue()[0]);
        registry.setFkUserCustomTypeId(moKeyCustomType.getValue()[0]);

        registry.getChildPrivileges().clear();

        for (DGridRow row : moGridPrivileges.getModel().getGridRows()) {
            DRowUserPrivilege privilege = (DRowUserPrivilege) row;

            if (privilege.IsSelected) {
                DDbUserPrivilege userPrivilege = new DDbUserPrivilege();
                userPrivilege.setPkPrivilegeId(privilege.PrivilegeKey[0]);
                userPrivilege.setFkLevelId(privilege.LevelKey[0]);
                registry.getChildPrivileges().add(userPrivilege);
            }
        }

        registry.getChildCompany().setUniversal(moBoolUniversal.getValue());
        registry.getChildCompany().getChildBranches().clear();

        for (DGridRow row : moGridBranches.getModel().getGridRows()) {
            DDbUserBranch branch = (DDbUserBranch) row;

            branch.getChildBranchCashes().clear();
            branch.getChildBranchWarehouses().clear();
            branch.getChildBranchDpsSeries().clear();

            for (DGridRow rowEntity : moGridBranchCashes.getModel().getGridRows()) {
                DDbUserBranchCash entity = (DDbUserBranchCash) rowEntity;
                if (entity.getXtaSelected() && DLibUtils.compareKeys(branch.getBranchKey(), entity.getBranchKey())) {
                    branch.getChildBranchCashes().add(entity);
                }
            }

            for (DGridRow rowEntity : moGridBranchWarehouses.getModel().getGridRows()) {
                DDbUserBranchWarehouse entity = (DDbUserBranchWarehouse) rowEntity;
                if (entity.getXtaSelected() && DLibUtils.compareKeys(branch.getBranchKey(), entity.getBranchKey())) {
                    branch.getChildBranchWarehouses().add(entity);
                }
            }

            for (DGridRow rowEntity : moGridBranchDpsSeries.getModel().getGridRows()) {
                DDbUserBranchDpsSeries entity = (DDbUserBranchDpsSeries) rowEntity;
                if (entity.getXtaSelected() && DLibUtils.compareKeys(branch.getBranchKey(), entity.getBranchKey())) {
                    branch.getChildBranchDpsSeries().add(entity);
                }
            }

            registry.getChildCompany().getChildBranches().add(branch);
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DRowUserPrivilege privilege = null;
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            for (DGridRow row : moGridPrivileges.getModel().getGridRows()) {
                privilege = (DRowUserPrivilege) row;

                if (DLibUtils.compareKeys(privilege.LevelKey, new int[0])) {
                    validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + moGridPrivileges.getModel().getColumnName(PRIV_LEV) + "', " + DLibConsts.MSG_IN + " " +
                            moGridPrivileges.getModel().getColumnName(PRIV_MOD) + ": '" + privilege.Module + "', " + moGridPrivileges.getModel().getColumnName(PRIV_PRV) + ": '" + privilege.Privilege + "'.");
                    validation.setComponent(moGridPrivileges.getTable());

                    moGridPrivileges.setSelectedGridRow(moGridPrivileges.getTable().convertRowIndexToView(moGridPrivileges.getModel().getGridRows().indexOf(row)));
                    break;
                }
            }

            if (validation.isValid()) {
                for (DGridRow row : moGridPrivileges.getModel().getGridRows()) {
                    privilege = (DRowUserPrivilege) row;

                    if (privilege.IsSelected && privilege.IsLevelApplying && DLibUtils.compareKeys(privilege.LevelKey, new int[] { DModSysConsts.CS_LEV_NA })) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + moGridPrivileges.getModel().getColumnName(PRIV_LEV) + "', " + DLibConsts.MSG_IN + " " +
                                moGridPrivileges.getModel().getColumnName(PRIV_MOD) + ": '" + privilege.Module + "', " + moGridPrivileges.getModel().getColumnName(PRIV_PRV) + ": '" + privilege.Privilege + "'.");
                        validation.setComponent(moGridPrivileges.getTable());

                        moGridPrivileges.setSelectedGridRow(moGridPrivileges.getTable().convertRowIndexToView(moGridPrivileges.getModel().getGridRows().indexOf(row)));
                        break;
                    }
                }

                if (validation.isValid()) {
                    for (DGridRow row : moGridPrivileges.getModel().getGridRows()) {
                        privilege = (DRowUserPrivilege) row;

                        if (!privilege.IsSelected && privilege.IsLevelApplying && !DLibUtils.compareKeys(privilege.LevelKey, new int[] { DModSysConsts.CS_LEV_NA })) {
                            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ_NOT + "'" + moGridPrivileges.getModel().getColumnName(PRIV_LEV) + "', " + DLibConsts.MSG_IN + " " +
                                    moGridPrivileges.getModel().getColumnName(PRIV_MOD) + ": '" + privilege.Module + "', " + moGridPrivileges.getModel().getColumnName(PRIV_PRV) + ": '" + privilege.Privilege + "'.");
                            validation.setComponent(moGridPrivileges.getTable());

                            moGridPrivileges.setSelectedGridRow(moGridPrivileges.getTable().convertRowIndexToView(moGridPrivileges.getModel().getGridRows().indexOf(row)));
                            break;
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        switch (gridType) {
            case DModConsts.CU_USR_BRA:
                populateBranchEntities((DDbUserBranch) gridRow);
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        switch (gridType) {
            case DModConsts.CU_USR_BRA:
                populateBranchEntities((DDbUserBranch) gridRow);
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, DGridRow gridRow) {
        switch (gridType) {
            case DModConsts.CU_USR_BRA:
                removeBranchEntities((DDbUserBranch) gridRow);
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public boolean validateRegistryNew(DDbRegistry registry) {
        boolean ok = true;

        switch (registry.getRegistryType()) {
            case DModConsts.CU_USR_BRA:
                DDbUserBranch userBranch = (DDbUserBranch) registry;

                for (DGridRow row : moGridBranches.getModel().getGridRows()) {
                    DDbUserBranch gridUserBranch = (DDbUserBranch) row;
                    if (DLibUtils.compareKeys(userBranch.getBranchKey(), gridUserBranch.getBranchKey())) {
                        ok = false;
                        miClient.showMsgBoxWarning(DDbConsts.ERR_MSG_REG_ALLREADY_EXISTS);
                        break;
                    }
                }
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return ok;
    }

    @Override
    public boolean validateRegistryEdit(DDbRegistry registry) {
        return true;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPassword) {
                actionPassword();
            }
            else if (button == jbType) {
                actionType();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldBoolean) {
            DBeanFieldBoolean field = (DBeanFieldBoolean) e.getSource();

            if (field == moBoolUniversal) {
                itemStateChangedUniversal();
            }
        }
    }
}
