/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormReparation.java
 *
 * Created on 29/08/2011, 08:02:13 PM
 */

package sba.mod.srv.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiItem;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiSession;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDate;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.bpr.db.DDbBizPartner;
import sba.mod.bpr.db.DDbBranch;
import sba.mod.srv.db.DDbEquipment;
import sba.mod.srv.db.DDbReparation;
import sba.mod.srv.db.DSrvUtils;
import sba.mod.trn.form.DDialogFindBizPartner;

/**
 *
 * @author Sergio Flores
 */
public class DFormReparation extends DBeanForm implements ActionListener, ItemListener, FocusListener {

    private DDbReparation moRegistry;
    private DDbBizPartner moBizPartner;
    private DDbBranch moBizPartnerBranch;
    private DDbEquipment moEquipment;
    private DDialogFindBizPartner moDialogFindBizPartner;

    /** Creates new form DFormReparation */
    public DFormReparation(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.SU_EQU, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        moKeyBizPartner = new sba.lib.gui.bean.DBeanFieldKey();
        jbBizPartner = new javax.swing.JButton();
        jbBizPartnerEdit = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jspHeadquartersAddress = new javax.swing.JScrollPane();
        jtaHeadquartersAddressRo = new javax.swing.JTextArea();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jlBranchAddress = new javax.swing.JLabel();
        moKeyBranchAddress = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel23 = new javax.swing.JPanel();
        jspBranchAddress = new javax.swing.JScrollPane();
        jtaBranchAddressRo = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sba.lib.gui.bean.DBeanFieldInteger();
        jlDateDate = new javax.swing.JLabel();
        moDateDate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel20 = new javax.swing.JPanel();
        jlStatus = new javax.swing.JLabel();
        jtfStatus = new javax.swing.JTextField();
        jlDateEstimate = new javax.swing.JLabel();
        moDateEstimate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel10 = new javax.swing.JPanel();
        jlDps = new javax.swing.JLabel();
        jtfDps = new javax.swing.JTextField();
        jlDateCommitment = new javax.swing.JLabel();
        moDateCommitment = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel11 = new javax.swing.JPanel();
        jlDateFinished = new javax.swing.JLabel();
        moDateFinished = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlDateDelivery = new javax.swing.JLabel();
        moDateDelivery = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel13 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jlEquipment = new javax.swing.JLabel();
        moKeyEquipment = new sba.lib.gui.bean.DBeanFieldKey();
        jlModel = new javax.swing.JLabel();
        moTextModel = new sba.lib.gui.bean.DBeanFieldText();
        jlWarranty = new javax.swing.JLabel();
        moIntWarranty = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel18 = new javax.swing.JPanel();
        jlBrand = new javax.swing.JLabel();
        moKeyBrand = new sba.lib.gui.bean.DBeanFieldKey();
        jlSerialNumber = new javax.swing.JLabel();
        moTextSerialNumber = new sba.lib.gui.bean.DBeanFieldText();
        jPanel19 = new javax.swing.JPanel();
        jlNoteEquipment = new javax.swing.JLabel();
        moTextNoteEquipment = new sba.lib.gui.bean.DBeanFieldText();
        jPanel16 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlFailure = new javax.swing.JLabel();
        jspFailure = new javax.swing.JScrollPane();
        jtaFailure = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jlNoteReparation = new javax.swing.JLabel();
        jspNoteReparation = new javax.swing.JScrollPane();
        jtaNoteReparation = new javax.swing.JTextArea();
        jPanel24 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        moBoolPrintOnSave = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel14 = new javax.swing.JPanel();
        jlEstimate = new javax.swing.JLabel();
        moCurEstimate = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();

        jpContainer.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del comprobante:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlBizPartner.setText("Cliente:*");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel7.add(jlBizPartner);

        moKeyBizPartner.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel7.add(moKeyBizPartner);

        jbBizPartner.setText("...");
        jbBizPartner.setToolTipText("Buscar [F9]");
        jbBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbBizPartner);

        jbBizPartnerEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_std_edit.gif"))); // NOI18N
        jbBizPartnerEdit.setToolTipText("Modificar");
        jbBizPartnerEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbBizPartnerEdit);

        jPanel2.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jspHeadquartersAddress.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspHeadquartersAddress.setPreferredSize(new java.awt.Dimension(100, 75));

        jtaHeadquartersAddressRo.setEditable(false);
        jtaHeadquartersAddressRo.setBackground(java.awt.SystemColor.control);
        jtaHeadquartersAddressRo.setColumns(20);
        jtaHeadquartersAddressRo.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jtaHeadquartersAddressRo.setRows(6);
        jtaHeadquartersAddressRo.setFocusable(false);
        jspHeadquartersAddress.setViewportView(jtaHeadquartersAddressRo);

        jPanel8.add(jspHeadquartersAddress, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel21.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel22.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlBranchAddress.setText("Domicilio:*");
        jlBranchAddress.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel22.add(jlBranchAddress);

        moKeyBranchAddress.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel22.add(moKeyBranchAddress);

        jPanel21.add(jPanel22, java.awt.BorderLayout.NORTH);

        jPanel23.setLayout(new java.awt.BorderLayout());

        jspBranchAddress.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspBranchAddress.setPreferredSize(new java.awt.Dimension(100, 50));

        jtaBranchAddressRo.setEditable(false);
        jtaBranchAddressRo.setBackground(java.awt.SystemColor.control);
        jtaBranchAddressRo.setColumns(20);
        jtaBranchAddressRo.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jtaBranchAddressRo.setRows(4);
        jtaBranchAddressRo.setFocusable(false);
        jspBranchAddress.setViewportView(jtaBranchAddressRo);

        jPanel23.add(jspBranchAddress, java.awt.BorderLayout.CENTER);

        jPanel21.add(jPanel23, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel21, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jlNumber.setText("Folio comp.:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlNumber);
        jPanel9.add(moIntNumber);

        jlDateDate.setText("Fecha comp.:*");
        jlDateDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlDateDate);
        jPanel9.add(moDateDate);

        jPanel6.add(jPanel9);

        jPanel20.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jlStatus.setText("Estado comp.:");
        jlStatus.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlStatus);

        jtfStatus.setEditable(false);
        jtfStatus.setFocusable(false);
        jtfStatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jtfStatus);

        jlDateEstimate.setText("F. presupuesto:*");
        jlDateEstimate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlDateEstimate);
        jPanel20.add(moDateEstimate);

        jPanel6.add(jPanel20);

        jPanel10.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jlDps.setText("Documento:");
        jlDps.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlDps);

        jtfDps.setEditable(false);
        jtfDps.setFocusable(false);
        jtfDps.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfDps);

        jlDateCommitment.setText("F. compromiso:*");
        jlDateCommitment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDateCommitment);
        jPanel10.add(moDateCommitment);

        jPanel6.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jlDateFinished.setText("F. terminado:");
        jlDateFinished.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlDateFinished);
        jPanel11.add(moDateFinished);

        jPanel6.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(2, 5, 0));

        jlDateDelivery.setText("F. entregado:");
        jlDateDelivery.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateDelivery);
        jPanel12.add(moDateDelivery);

        jPanel6.add(jPanel12);

        jPanel1.add(jPanel6, java.awt.BorderLayout.EAST);

        jpContainer.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del equipo:"));
        jPanel15.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel17.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlEquipment.setText("Equipo:*");
        jlEquipment.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel17.add(jlEquipment);

        moKeyEquipment.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel17.add(moKeyEquipment);

        jlModel.setText("Modelo:*");
        jlModel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jlModel);

        moTextModel.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(moTextModel);

        jlWarranty.setText("Días garantía:");
        jlWarranty.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jlWarranty);
        jPanel17.add(moIntWarranty);

        jPanel15.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlBrand.setText("Marca:*");
        jlBrand.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel18.add(jlBrand);

        moKeyBrand.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel18.add(moKeyBrand);

        jlSerialNumber.setText("Núm. serie:");
        jlSerialNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlSerialNumber);

        moTextSerialNumber.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(moTextSerialNumber);

        jPanel15.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(3, 5, 0));

        jlNoteEquipment.setText("Notas:");
        jlNoteEquipment.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel19.add(jlNoteEquipment);

        moTextNoteEquipment.setPreferredSize(new java.awt.Dimension(695, 23));
        jPanel19.add(moTextNoteEquipment);

        jPanel15.add(jPanel19);

        jPanel13.add(jPanel15, java.awt.BorderLayout.NORTH);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la reparación:"));
        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        jPanel4.setLayout(new java.awt.BorderLayout(0, 5));

        jlFailure.setText("Falla reportada:*");
        jlFailure.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlFailure, java.awt.BorderLayout.NORTH);

        jspFailure.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jspFailure.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtaFailure.setColumns(20);
        jtaFailure.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jtaFailure.setRows(5);
        jspFailure.setViewportView(jtaFailure);

        jPanel4.add(jspFailure, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout(0, 5));

        jlNoteReparation.setText("Servicio realizado:");
        jlNoteReparation.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlNoteReparation, java.awt.BorderLayout.NORTH);

        jspNoteReparation.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jspNoteReparation.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtaNoteReparation.setColumns(20);
        jtaNoteReparation.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jtaNoteReparation.setRows(5);
        jspNoteReparation.setViewportView(jtaNoteReparation);

        jPanel5.add(jspNoteReparation, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5);

        jPanel16.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel24.setLayout(new java.awt.GridLayout(1, 0));

        jPanel25.setLayout(new java.awt.FlowLayout(3));

        moBoolPrintOnSave.setText("Imprimir al guardar");
        moBoolPrintOnSave.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel25.add(moBoolPrintOnSave);

        jPanel24.add(jPanel25);

        jPanel14.setLayout(new java.awt.FlowLayout(2));

        jlEstimate.setText("Presupuesto:");
        jlEstimate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jlEstimate);
        jPanel14.add(moCurEstimate);

        jPanel24.add(jPanel14);

        jPanel16.add(jPanel24, java.awt.BorderLayout.SOUTH);

        jPanel13.add(jPanel16, java.awt.BorderLayout.CENTER);

        jpContainer.add(jPanel13, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 800, 550);

        moKeyBizPartner.setKeySettings(miClient, DGuiUtils.getLabelName(jlBizPartner), true);
        moKeyBranchAddress.setKeySettings(miClient, DGuiUtils.getLabelName(jlBranchAddress), true);
        moIntNumber.setIntegerSettings(DGuiUtils.getLabelName(jlNumber), DGuiConsts.GUI_TYPE_INT_RAW, true);
        moDateDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateDate), true);
        moDateEstimate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateEstimate), true);
        moDateCommitment.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateCommitment), true);
        moDateFinished.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateFinished), true);
        moDateDelivery.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateDelivery), true);
        moKeyEquipment.setKeySettings(miClient, DGuiUtils.getLabelName(jlEquipment), true);
        moKeyBrand.setKeySettings(miClient, DGuiUtils.getLabelName(jlBrand), true);
        moTextModel.setTextSettings(DGuiUtils.getLabelName(jlModel.getText()), 25);
        moTextSerialNumber.setTextSettings(DGuiUtils.getLabelName(jlSerialNumber.getText()), 25, 0);
        moIntWarranty.setIntegerSettings(DGuiUtils.getLabelName(jlWarranty), DGuiConsts.GUI_TYPE_INT, false);
        moTextNoteEquipment.setTextSettings(DGuiUtils.getLabelName(jlNoteEquipment), 255, 0);
        moBoolPrintOnSave.setBooleanSettings(moBoolPrintOnSave.getText(), true);
        moCurEstimate.setCompoundFieldSettings(miClient);
        moCurEstimate.getField().setDecimalSettings(DGuiUtils.getLabelName(jlEstimate), DGuiConsts.GUI_TYPE_DEC_AMT, false);

        moFields.addField(moKeyBizPartner);
        moFields.addField(moKeyBranchAddress);
        moFields.addField(moIntNumber);
        moFields.addField(moDateDate);
        moFields.addField(moDateEstimate);
        moFields.addField(moDateCommitment);
        moFields.addField(moDateFinished);
        moFields.addField(moDateDelivery);
        moFields.addField(moKeyEquipment);
        moFields.addField(moKeyBrand);
        moFields.addField(moTextModel);
        moFields.addField(moTextSerialNumber);
        moFields.addField(moIntWarranty);
        moFields.addField(moTextNoteEquipment);
        moFields.addField(moBoolPrintOnSave);
        moFields.addField(moCurEstimate.getField());

        moFields.setFormButton(jbSave);

        moDialogFindBizPartner = new DDialogFindBizPartner(miClient, DModSysConsts.BS_BPR_CL_CUS);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbBizPartner;
    private javax.swing.JButton jbBizPartnerEdit;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlBranchAddress;
    private javax.swing.JLabel jlBrand;
    private javax.swing.JLabel jlDateCommitment;
    private javax.swing.JLabel jlDateDate;
    private javax.swing.JLabel jlDateDelivery;
    private javax.swing.JLabel jlDateEstimate;
    private javax.swing.JLabel jlDateFinished;
    private javax.swing.JLabel jlDps;
    private javax.swing.JLabel jlEquipment;
    private javax.swing.JLabel jlEstimate;
    private javax.swing.JLabel jlFailure;
    private javax.swing.JLabel jlModel;
    private javax.swing.JLabel jlNoteEquipment;
    private javax.swing.JLabel jlNoteReparation;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlSerialNumber;
    private javax.swing.JLabel jlStatus;
    private javax.swing.JLabel jlWarranty;
    private javax.swing.JPanel jpContainer;
    private javax.swing.JScrollPane jspBranchAddress;
    private javax.swing.JScrollPane jspFailure;
    private javax.swing.JScrollPane jspHeadquartersAddress;
    private javax.swing.JScrollPane jspNoteReparation;
    private javax.swing.JTextArea jtaBranchAddressRo;
    private javax.swing.JTextArea jtaFailure;
    private javax.swing.JTextArea jtaHeadquartersAddressRo;
    private javax.swing.JTextArea jtaNoteReparation;
    private javax.swing.JTextField jtfDps;
    private javax.swing.JTextField jtfStatus;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolPrintOnSave;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurEstimate;
    private sba.lib.gui.bean.DBeanFieldDate moDateCommitment;
    private sba.lib.gui.bean.DBeanFieldDate moDateDate;
    private sba.lib.gui.bean.DBeanFieldDate moDateDelivery;
    private sba.lib.gui.bean.DBeanFieldDate moDateEstimate;
    private sba.lib.gui.bean.DBeanFieldDate moDateFinished;
    private sba.lib.gui.bean.DBeanFieldInteger moIntNumber;
    private sba.lib.gui.bean.DBeanFieldInteger moIntWarranty;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBizPartner;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBranchAddress;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBrand;
    private sba.lib.gui.bean.DBeanFieldKey moKeyEquipment;
    private sba.lib.gui.bean.DBeanFieldText moTextModel;
    private sba.lib.gui.bean.DBeanFieldText moTextNoteEquipment;
    private sba.lib.gui.bean.DBeanFieldText moTextSerialNumber;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void updateCatalogueBranchAddress() {
        Object complement = null;

        if (moKeyBizPartner.getSelectedIndex() <= 0) {
            moKeyBranchAddress.removeAllItems();
        }
        else {
            miClient.getSession().populateCatalogue(moKeyBranchAddress, DModConsts.BU_ADD, 0, new DGuiParams(moBizPartnerBranch.getPrimaryKey()));

            // Select default branch address:

            for (int i = 0; i < moKeyBranchAddress.getItemCount(); i++) {
                complement = ((DGuiItem) moKeyBranchAddress.getItemAt(i)).getComplement();
                if (complement != null && complement instanceof Boolean && (Boolean) complement) {
                    moKeyBranchAddress.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    private void itemStateKeyBizPartner() {
        String text = "";

        if (moKeyBizPartner.getSelectedIndex() <= 0) {
            moBizPartner = null;
            moBizPartnerBranch = null;
            moKeyBranchAddress.setEnabled(false);
        }
        else {
            moBizPartner = (DDbBizPartner) miClient.getSession().readRegistry(DModConsts.BU_BPR, moKeyBizPartner.getValue());
            moBizPartnerBranch = moBizPartner.getChildBranchHeadquarters();
            moKeyBranchAddress.setEnabled(true);

            text = moBizPartnerBranch.getChildAddressOfficial().composeAddress(miClient.getSession(), moBizPartnerBranch.getActualFkAddressFormatTypeId(miClient.getSession()));
            text += (text.isEmpty() ? "" : "\n") + moBizPartner.getFiscalId();
            text += (text.isEmpty() ? "" : "\n") + moBizPartnerBranch.getChildAddressOfficial().getTelecommDevices();
        }

        jtaHeadquartersAddressRo.setText(text);
        jtaHeadquartersAddressRo.setCaretPosition(0);

        updateCatalogueBranchAddress();
    }

    private void itemStateKeyBranchAddress() {
        if (moKeyBranchAddress.getSelectedIndex() <= 0) {
            jtaBranchAddressRo.setText("");
        }
        else {
            jtaBranchAddressRo.setText(moKeyBranchAddress.getValue()[2] == DUtilConsts.BRA_ADD_ID ? "" : moBizPartnerBranch.getChildAddress(moKeyBranchAddress.getValue()).composeAddress(miClient.getSession(), moBizPartnerBranch.getActualFkAddressFormatTypeId(miClient.getSession())));
            jtaBranchAddressRo.setCaretPosition(0);
        }

        jspBranchAddress.getVerticalScrollBar().setValue(0);
    }

    private void itemStateKeyEquipment() {
        if (moKeyEquipment.getSelectedIndex() <= 0) {
            moEquipment = null;
            moIntWarranty.setValue(0);
        }
        else {
            moEquipment = (DDbEquipment) miClient.getSession().readRegistry(DModConsts.SU_EQU, moKeyEquipment.getValue());
            moIntWarranty.setValue(moEquipment.getWarranty());
        }
    }

    private void focusLostDateEstimate() {
        if (moDateEstimate.getValue() != null && moDateCommitment.getValue() == null) {
            moDateCommitment.setValue(moDateEstimate.getValue());
        }
    }

    private void actionBizPartner() {
        moDialogFindBizPartner.resetForm();
        moDialogFindBizPartner.initForm();
        moDialogFindBizPartner.setVisible(true);

        if (moDialogFindBizPartner.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
            if (moDialogFindBizPartner.getNewRegistries()) {
                miClient.getSession().populateCatalogue(moKeyBizPartner, DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, null);
            }
            moKeyBizPartner.setValue(moDialogFindBizPartner.getValue(DModConsts.BU_BPR));
            moKeyBizPartner.requestFocus();
        }
    }

    private void actionBizPartnerEdit() {
        int[] key = null;

        if (jbBizPartnerEdit.isEnabled()) {
            if (moKeyBizPartner.getSelectedIndex() <= 0) {
                miClient.showMsgBoxInformation(DGuiConsts.MSG_GUI_SELECT_OPTION);
            }
            else {
                key = moKeyBizPartner.getValue();
                miClient.getSession().showForm(DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, new DGuiParams(key));

                // XXX Improve this: form must be updated unless user select "Ok" when closing business partner form.
                miClient.getSession().populateCatalogue(moKeyBizPartner, DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, null);
                moKeyBizPartner.setValue(key);
                moKeyBizPartner.requestFocus();
            }
        }
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbBizPartner.addActionListener(this);
        jbBizPartnerEdit.addActionListener(this);
        moKeyBizPartner.addItemListener(this);
        moKeyBranchAddress.addItemListener(this);
        moKeyEquipment.addItemListener(this);
        moDateEstimate.getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbBizPartner.removeActionListener(this);
        jbBizPartnerEdit.removeActionListener(this);
        moKeyBizPartner.removeItemListener(this);
        moKeyBranchAddress.removeItemListener(this);
        moKeyEquipment.removeItemListener(this);
        moDateEstimate.getComponent().removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyBizPartner, DModConsts.BU_BPR, DModSysConsts.BS_BPR_CL_CUS, null);
        miClient.getSession().populateCatalogue(moKeyEquipment, DModConsts.SU_EQU, 0, null);
        miClient.getSession().populateCatalogue(moKeyBrand, DModConsts.IU_BRD, 0, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        boolean isStatusNew = false;
        boolean isStatusAut = false;
        boolean isStatusFin = false;
        int[] statusKey = null;

        moRegistry = (DDbReparation) registry;

        mnFormResult = 0;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setNumber(DSrvUtils.getNextReparationNumber(miClient.getSession()));
            moRegistry.setDate(miClient.getSession().getWorkingDate());
            moRegistry.setFkServiceTypeId(DModSysConsts.SS_SRV_ST_REP_NEW[0]);
            moRegistry.setFkServiceStatusId(DModSysConsts.SS_SRV_ST_REP_NEW[1]);
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyBizPartner.setValue(new int[] { moRegistry.getFkBizPartnerBizPartnerId() });
        itemStateKeyBizPartner();
        moKeyBranchAddress.setValue(new int[] { moRegistry.getFkBizPartnerBizPartnerId(), moRegistry.getFkBizPartnerBranchId(), moRegistry.getFkBizPartnerAddressId() });
        itemStateKeyBranchAddress();
        moIntNumber.setValue(moRegistry.getNumber());
        moDateDate.setValue(moRegistry.getDate());
        moDateEstimate.setValue(moRegistry.getDateEstimate());
        moDateCommitment.setValue(moRegistry.getDateCommitment());
        moDateFinished.setValue(moRegistry.getDateFinished_n());
        moDateDelivery.setValue(moRegistry.getDateDelivery_n());
        moKeyEquipment.setValue(new int[] { moRegistry.getFkEquipmentId() });
        itemStateKeyEquipment();
        moKeyBrand.setValue(new int[] { moRegistry.getFkBrandId() });
        moTextModel.setValue(moRegistry.getEquipmentModel());
        moTextSerialNumber.setValue(moRegistry.getEquipmentSerialNumber());
        moIntWarranty.setValue(moRegistry.getWarranty());
        moTextNoteEquipment.setValue(moRegistry.getNoteEquipment());
        jtaFailure.setText(moRegistry.getFailure());
        jtaFailure.setCaretPosition(0);
        jtaNoteReparation.setText(moRegistry.getNoteReparation());
        jtaNoteReparation.setCaretPosition(0);
        moCurEstimate.getField().setValue(moRegistry.getEstimate());

        statusKey = new int[] { moRegistry.getFkServiceTypeId(), moRegistry.getFkServiceStatusId() };
        jtfStatus.setText((String) miClient.getSession().readField(DModConsts.SS_SRV_ST, statusKey, DDbRegistry.FIELD_NAME));
        jtfStatus.setCaretPosition(0);

        jtfDps.setText("");
        jtfDps.setCaretPosition(0);

        setFormEditable(true);

        isStatusNew = DLibUtils.compareKeys(DModSysConsts.SS_SRV_ST_REP_NEW, statusKey);
        isStatusAut = DLibUtils.compareKeys(DModSysConsts.SS_SRV_ST_REP_APR, statusKey);
        isStatusFin = DLibUtils.compareKeys(DModSysConsts.SS_SRV_ST_REP_FIN, statusKey);

        moKeyBizPartner.setEnabled(isStatusNew);
        moKeyBranchAddress.setEnabled(isStatusNew && moKeyBranchAddress.getSelectedIndex() > 0);
        jbBizPartner.setEnabled(isStatusNew);
        jbBizPartnerEdit.setEnabled(isStatusNew);
        moIntNumber.setEditable(isStatusNew);
        moDateDate.setEditable(isStatusNew);
        moDateEstimate.setEditable(isStatusNew);
        moDateCommitment.setEditable(isStatusNew);
        moDateFinished.setEnabled(false);
        moDateDelivery.setEnabled(false);
        moKeyEquipment.setEnabled(isStatusNew);
        moKeyBrand.setEnabled(isStatusNew);
        moTextModel.setEditable(isStatusNew);
        moTextSerialNumber.setEditable(isStatusNew);
        moIntWarranty.setEditable(false);
        moTextNoteEquipment.setEditable(isStatusNew);
        jtaFailure.setEditable(isStatusNew);
        jtaNoteReparation.setEditable(isStatusNew || isStatusAut || isStatusFin);
        moBoolPrintOnSave.setSelected(isStatusNew);
        moBoolPrintOnSave.setEnabled(isStatusNew);
        moCurEstimate.getField().setEditable(isStatusNew || isStatusAut || isStatusFin);

        addAllListeners();
    }

    @Override
    public DDbReparation getRegistry() throws Exception {
        DDbReparation registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setNumber(moIntNumber.getValue());
        registry.setDate(moDateDate.getValue());
        registry.setDateEstimate(moDateEstimate.getValue());
        registry.setDateCommitment(moDateCommitment.getValue());
        //registry.setDateFinished_n(moDateFinished.getValue());
        //registry.setDateDelivery_n(moDateDelivery.getValue());
        registry.setEquipmentModel(moTextModel.getValue());
        registry.setEquipmentSerialNumber(moTextSerialNumber.getValue());
        registry.setFailure(DLibUtils.textTrim(jtaFailure.getText().toUpperCase()));
        registry.setNoteEquipment(moTextNoteEquipment.getText());
        registry.setNoteReparation(DLibUtils.textTrim(jtaNoteReparation.getText().toUpperCase()));
        registry.setEstimate(moCurEstimate.getField().getValue());
        registry.setWarranty(moIntWarranty.getValue());
        //registry.setFkServiceTypeId(?);
        //registry.setFkServiceStatusId(?);
        registry.setFkBizPartnerBizPartnerId(moKeyBranchAddress.getValue()[0]);
        registry.setFkBizPartnerBranchId(moKeyBranchAddress.getValue()[1]);
        registry.setFkBizPartnerAddressId(moKeyBranchAddress.getValue()[2]);
        registry.setFkEquipmentId(moKeyEquipment.getValue()[0]);
        registry.setFkBrandId(moKeyBrand.getValue()[0]);
        //registry.setFkDpsId_n(?);

        if (moBoolPrintOnSave.getValue()) {
            registry.setPostSaveTarget(registry);
            registry.setPostSaveMethod(DDbReparation.class.getMethod("print", DGuiSession.class));
            registry.setPostSaveMethodArgs(new Object[] { miClient.getSession() });
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        String text = "";
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moDateEstimate.getValue().before(moDateDate.getValue())) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + DGuiUtils.getLabelName(jlDateEstimate) + "' " + DGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "'" + DGuiUtils.getLabelName(jlDateDate) + "'.");
                validation.setComponent(moDateEstimate);
            }
            else if (moDateCommitment.getValue().before(moDateEstimate.getValue())) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + DGuiUtils.getLabelName(jlDateCommitment) + "' " + DGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "'" + DGuiUtils.getLabelName(jlDateEstimate) + "'.");
                validation.setComponent(moDateCommitment);
            }
            else {
                if (jtaFailure.isEditable()) {
                    text = DLibUtils.textTrim(jtaFailure.getText().toUpperCase());
                    if (text.isEmpty()) {
                        validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlFailure) + "'.");
                        validation.setComponent(jtaFailure);
                    }
                    else if (text.length() > DSrvConsts.TEXT_MAX_LEN) {
                        validation.setMessage("La longitud del campo '" + DGuiUtils.getLabelName(jlFailure) + "' es de " + text.length() + ", y debe ser menor o igual a " + DSrvConsts.TEXT_MAX_LEN + ".");
                        validation.setComponent(jtaFailure);
                    }
                }

                if (validation.isValid()) {
                    if (jtaNoteReparation.isEditable() && moRegistry.getFkServiceStatusId() > DModSysConsts.SX_SRV_ST_REP_NEW) {
                        text = DLibUtils.textTrim(jtaNoteReparation.getText().toUpperCase());
                        if (text.isEmpty()) {
                            validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlNoteReparation) + "'.");
                            validation.setComponent(jtaNoteReparation);
                        }
                        else if (text.length() > DSrvConsts.TEXT_MAX_LEN) {
                            validation.setMessage("La longitud del campo '" + DGuiUtils.getLabelName(jlNoteReparation) + "' es de " + text.length() + ", y debe ser menor o igual a " + DSrvConsts.TEXT_MAX_LEN + ".");
                            validation.setComponent(jtaNoteReparation);
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbBizPartner) {
                actionBizPartner();
            }
            else if (button == jbBizPartnerEdit) {
                actionBizPartnerEdit();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            DBeanFieldKey field = (DBeanFieldKey) e.getSource();

            if (field == moKeyBizPartner) {
                itemStateKeyBizPartner();
            }
            else if (field == moKeyBranchAddress) {
                itemStateKeyBranchAddress();
            }
            else if (field == moKeyEquipment) {
                itemStateKeyEquipment();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldDate) {
            DBeanFieldDate field = (DBeanFieldDate) e.getSource();

            if (field == moDateEstimate) {
                focusLostDateEstimate();
            }
        }
        else if (e.getSource() instanceof JFormattedTextField) {
            JFormattedTextField field = (JFormattedTextField) e.getSource();

            if (field == moDateEstimate.getComponent()) {
                focusLostDateEstimate();
            }
        }
    }
}
