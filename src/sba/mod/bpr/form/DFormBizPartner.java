/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormBizPartner.java
 *
 * Created on 1/10/2011, 03:24:00 PM
 */

package sba.mod.bpr.form;

import cfd.ver33.DCfdi33Catalogs;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Vector;
import javax.swing.JButton;
import sba.gui.DGuiClientApp;
import sba.gui.cat.DXmlCatalog;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridColumnForm;
import sba.lib.grid.DGridConsts;
import sba.lib.grid.DGridPaneForm;
import sba.lib.grid.DGridRow;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldBoolean;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.bpr.db.DDbBizPartner;
import sba.mod.bpr.db.DDbBizPartnerConfig;
import sba.mod.bpr.db.DDbBizPartnerType;
import sba.mod.bpr.db.DDbBranch;
import sba.mod.bpr.db.DDbBranchAddress;
import sba.mod.cfg.db.DDbConfigCompany;
import sba.mod.mkt.db.DDbAgentConfig;

/**
 *
 * @author Sergio Flores
 */
public class DFormBizPartner extends DBeanForm implements ActionListener, ItemListener {

    private int mnBizPartnerClass;
    private DDbBizPartner moRegistry;
    private DGridPaneForm moGridBranchAddresses;
    private DXmlCatalog moXmlCatalogCfdUsage;

    /** Creates new form DFormBizPartner */
    public DFormBizPartner(DGuiClient client, int subtype, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DModConsts.BU_BPR, subtype, title);
        mnBizPartnerClass = mnFormSubtype;
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jpRegistry = new javax.swing.JPanel();
        jpRegistry1 = new javax.swing.JPanel();
        jpRegistry11 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sba.lib.gui.bean.DBeanFieldText();
        moKeyIdentityType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlLastname = new javax.swing.JLabel();
        moTextLastname = new sba.lib.gui.bean.DBeanFieldText();
        jPanel9 = new javax.swing.JPanel();
        jlFirstname = new javax.swing.JLabel();
        moTextFirstname = new sba.lib.gui.bean.DBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sba.lib.gui.bean.DBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jlNickname = new javax.swing.JLabel();
        moTextNickname = new sba.lib.gui.bean.DBeanFieldText();
        jPanel10 = new javax.swing.JPanel();
        jlFiscalId = new javax.swing.JLabel();
        moTextFiscalId = new sba.lib.gui.bean.DBeanFieldText();
        jbFiscalId = new javax.swing.JButton();
        moTextAlternativeId = new sba.lib.gui.bean.DBeanFieldText();
        moBoolFiscalHomologous = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel12 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        moTextNote = new sba.lib.gui.bean.DBeanFieldText();
        jpRegistry12 = new javax.swing.JPanel();
        moPanelBranch = new sba.mod.bpr.form.DPanelBranch();
        jpRegistry2 = new javax.swing.JPanel();
        moPanelBranchAddress = new sba.mod.bpr.form.DPanelBranchAddress();
        jpConfig = new javax.swing.JPanel();
        jpConfig1 = new javax.swing.JPanel();
        jpConfig11 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jlBizPartnerType = new javax.swing.JLabel();
        moKeyBizPartnerType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel21 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel22 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel20 = new javax.swing.JPanel();
        jlCodeOwn = new javax.swing.JLabel();
        moTextCodeOwn = new sba.lib.gui.bean.DBeanFieldText();
        jlCodeOwnInfo = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jlForeignId = new javax.swing.JLabel();
        moTextForeignId = new sba.lib.gui.bean.DBeanFieldText();
        jlForeignIdInfo = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        moBoolAgent = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolBank = new sba.lib.gui.bean.DBeanFieldBoolean();
        moBoolCarrier = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel34 = new javax.swing.JPanel();
        jlAgentType = new javax.swing.JLabel();
        moKeyAgentType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel25 = new javax.swing.JPanel();
        jlWeb = new javax.swing.JLabel();
        moTextWeb = new sba.lib.gui.bean.DBeanFieldText();
        jPanel23 = new javax.swing.JPanel();
        jlEmissionType = new javax.swing.JLabel();
        moKeyEmissionType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel36 = new javax.swing.JPanel();
        jlXmlAddendaType = new javax.swing.JLabel();
        moKeyXmlAddendaType = new sba.lib.gui.bean.DBeanFieldKey();
        jbXmlAddendaType = new javax.swing.JButton();
        jpConfig12 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        moKeyCurrency = new sba.lib.gui.bean.DBeanFieldKey();
        jbCurrency = new javax.swing.JButton();
        jPanel26 = new javax.swing.JPanel();
        moBoolCreditByUser = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel27 = new javax.swing.JPanel();
        jlCreditType = new javax.swing.JLabel();
        moKeyCreditType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel28 = new javax.swing.JPanel();
        jlCreditLimit = new javax.swing.JLabel();
        moCurCreditLimit = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel29 = new javax.swing.JPanel();
        jlCreditDays = new javax.swing.JLabel();
        moIntCreditDays = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel30 = new javax.swing.JPanel();
        jlCreditDaysGrace = new javax.swing.JLabel();
        moIntCreditDaysGrace = new sba.lib.gui.bean.DBeanFieldInteger();
        jPanel35 = new javax.swing.JPanel();
        jlModeOfPaymentType = new javax.swing.JLabel();
        moKeyModeOfPaymentType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel37 = new javax.swing.JPanel();
        jlCfdUsage = new javax.swing.JLabel();
        moKeyCfdUsage = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel33 = new javax.swing.JPanel();
        moBoolAbpBizPartnerByUser = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel31 = new javax.swing.JPanel();
        jlAbpBizPartner = new javax.swing.JLabel();
        moKeyAbpBizPartner = new sba.lib.gui.bean.DBeanFieldKey();
        jpConfig2 = new javax.swing.JPanel();

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpRegistry1.setLayout(new java.awt.BorderLayout());

        jpRegistry11.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel5.setLayout(new java.awt.GridLayout(7, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlCode);
        jPanel6.add(moTextCode);

        moKeyIdentityType.setToolTipText("Tipo de persona");
        moKeyIdentityType.setPreferredSize(new java.awt.Dimension(180, 23));
        jPanel6.add(moKeyIdentityType);

        jPanel5.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLastname.setText("Apellido(s):*");
        jlLastname.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlLastname);

        moTextLastname.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moTextLastname);

        jPanel5.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFirstname.setText("Nombre(s):*");
        jlFirstname.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlFirstname);

        moTextFirstname.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moTextFirstname);

        jPanel5.add(jPanel9);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Razón social:*");
        jlName.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(285, 23));
        jPanel8.add(moTextName);

        jPanel5.add(jPanel8);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNickname.setText("Alias:");
        jlNickname.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jlNickname);

        moTextNickname.setPreferredSize(new java.awt.Dimension(285, 23));
        jPanel11.add(moTextNickname);

        jPanel5.add(jPanel11);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalId.setText("[ID fiscal]:*");
        jlFiscalId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlFiscalId);
        jPanel10.add(moTextFiscalId);

        jbFiscalId.setText("...");
        jbFiscalId.setToolTipText("Poner RFC predeterminado");
        jbFiscalId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbFiscalId);

        moTextAlternativeId.setToolTipText("CURP");
        moTextAlternativeId.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel10.add(moTextAlternativeId);

        moBoolFiscalHomologous.setText("Varios");
        moBoolFiscalHomologous.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel10.add(moBoolFiscalHomologous);

        jPanel5.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Notas:");
        jlNote.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlNote);

        moTextNote.setPreferredSize(new java.awt.Dimension(285, 23));
        jPanel12.add(moTextNote);

        jPanel5.add(jPanel12);

        jpRegistry11.add(jPanel5, java.awt.BorderLayout.NORTH);

        jpRegistry1.add(jpRegistry11, java.awt.BorderLayout.WEST);

        jpRegistry12.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la matriz:"));
        jpRegistry12.setLayout(new java.awt.BorderLayout());
        jpRegistry12.add(moPanelBranch, java.awt.BorderLayout.CENTER);

        jpRegistry1.add(jpRegistry12, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpRegistry1, java.awt.BorderLayout.NORTH);

        jpRegistry2.setLayout(new java.awt.BorderLayout());
        jpRegistry2.add(moPanelBranchAddress, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpRegistry2, java.awt.BorderLayout.CENTER);

        jTabbedPane.addTab("Registro", jpRegistry);

        jpConfig.setLayout(new java.awt.BorderLayout());

        jpConfig1.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jpConfig11.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo:"));
        jpConfig11.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartnerType.setText("Tipo:*");
        jlBizPartnerType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlBizPartnerType);

        moKeyBizPartnerType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel18.add(moKeyBizPartnerType);

        jpConfig11.add(jPanel18);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Inicio relación:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlDateStart);
        jPanel21.add(moDateStart);

        jpConfig11.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Término relación:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlDateEnd);
        jPanel22.add(moDateEnd);

        jpConfig11.add(jPanel22);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCodeOwn.setText("Código propio:");
        jlCodeOwn.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlCodeOwn);
        jPanel20.add(moTextCodeOwn);

        jlCodeOwnInfo.setForeground(java.awt.Color.gray);
        jlCodeOwnInfo.setText("(Código asignado a nosotros)");
        jlCodeOwnInfo.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel20.add(jlCodeOwnInfo);

        jpConfig11.add(jPanel20);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlForeignId.setText("ID fiscal:");
        jlForeignId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlForeignId);
        jPanel24.add(moTextForeignId);

        jlForeignIdInfo.setForeground(java.awt.Color.gray);
        jlForeignIdInfo.setText("(ID fiscal en el país de origen)");
        jlForeignIdInfo.setPreferredSize(new java.awt.Dimension(155, 23));
        jPanel24.add(jlForeignIdInfo);

        jpConfig11.add(jPanel24);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolAgent.setText("Agente");
        jPanel19.add(moBoolAgent);

        moBoolBank.setText("Banco");
        jPanel19.add(moBoolBank);

        moBoolCarrier.setText("Transportista");
        jPanel19.add(moBoolCarrier);

        jpConfig11.add(jPanel19);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAgentType.setText("Tipo agente:*");
        jlAgentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel34.add(jlAgentType);

        moKeyAgentType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel34.add(moKeyAgentType);

        jpConfig11.add(jPanel34);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeb.setForeground(new java.awt.Color(0, 102, 102));
        jlWeb.setText("Sitio web:");
        jlWeb.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlWeb);

        moTextWeb.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel25.add(moTextWeb);

        jpConfig11.add(jPanel25);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmissionType.setText("Tipo emisión:*");
        jlEmissionType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlEmissionType);

        moKeyEmissionType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel23.add(moKeyEmissionType);

        jpConfig11.add(jPanel23);

        jPanel36.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlXmlAddendaType.setText("Tipo addenda:*");
        jlXmlAddendaType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel36.add(jlXmlAddendaType);

        moKeyXmlAddendaType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel36.add(moKeyXmlAddendaType);

        jbXmlAddendaType.setText("<");
        jbXmlAddendaType.setToolTipText("Modificar tipo addenda");
        jbXmlAddendaType.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbXmlAddendaType.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel36.add(jbXmlAddendaType);

        jpConfig11.add(jPanel36);

        jpConfig1.add(jpConfig11);

        jpConfig12.setBorder(javax.swing.BorderFactory.createTitledBorder("Crédito:"));
        jpConfig12.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setText("Moneda default:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel32.add(jlCurrency);

        moKeyCurrency.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel32.add(moKeyCurrency);

        jbCurrency.setText("<");
        jbCurrency.setToolTipText("Modificar moneda default");
        jbCurrency.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCurrency.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel32.add(jbCurrency);

        jpConfig12.add(jPanel32);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolCreditByUser.setText("Configuración manual de crédito");
        moBoolCreditByUser.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel26.add(moBoolCreditByUser);

        jpConfig12.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCreditType.setText("Tipo crédito:*");
        jlCreditType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlCreditType);

        moKeyCreditType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel27.add(moKeyCreditType);

        jpConfig12.add(jPanel27);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCreditLimit.setText("Límite crédito:*");
        jlCreditLimit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlCreditLimit);
        jPanel28.add(moCurCreditLimit);

        jpConfig12.add(jPanel28);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCreditDays.setText("Días crédito:*");
        jlCreditDays.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlCreditDays);

        moIntCreditDays.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel29.add(moIntCreditDays);

        jpConfig12.add(jPanel29);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCreditDaysGrace.setText("Días gracia:");
        jlCreditDaysGrace.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jlCreditDaysGrace);

        moIntCreditDaysGrace.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel30.add(moIntCreditDaysGrace);

        jpConfig12.add(jPanel30);

        jPanel35.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlModeOfPaymentType.setText("Tipo forma pago:");
        jlModeOfPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel35.add(jlModeOfPaymentType);

        moKeyModeOfPaymentType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel35.add(moKeyModeOfPaymentType);

        jpConfig12.add(jPanel35);

        jPanel37.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdUsage.setText("Uso CFDI:");
        jlCfdUsage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel37.add(jlCfdUsage);

        moKeyCfdUsage.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel37.add(moKeyCfdUsage);

        jpConfig12.add(jPanel37);

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolAbpBizPartnerByUser.setText("Configuración manual de paquete contable");
        moBoolAbpBizPartnerByUser.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel33.add(moBoolAbpBizPartnerByUser);

        jpConfig12.add(jPanel33);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbpBizPartner.setText("Paquete contable:*");
        jlAbpBizPartner.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel31.add(jlAbpBizPartner);

        moKeyAbpBizPartner.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel31.add(moKeyAbpBizPartner);

        jpConfig12.add(jPanel31);

        jpConfig1.add(jpConfig12);

        jpConfig.add(jpConfig1, java.awt.BorderLayout.PAGE_START);

        jpConfig2.setBorder(javax.swing.BorderFactory.createTitledBorder("Otros domicilios:"));
        jpConfig2.setLayout(new java.awt.BorderLayout());
        jpConfig.add(jpConfig2, java.awt.BorderLayout.CENTER);

        jTabbedPane.addTab("Configuración", jpConfig);

        getContentPane().add(jTabbedPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        int lenCode = ((DDbConfigCompany) miClient.getSession().getConfigCompany()).getLengthCodeBizPartner();

        DGuiUtils.setWindowBounds(this, 900, 550);

        moTextCode.setTextSettings(DGuiUtils.getLabelName(jlCode), lenCode == 0 || lenCode > 15 ? 15 : lenCode);
        moKeyIdentityType.setKeySettings(miClient, moKeyIdentityType.getToolTipText(), true);
        moTextLastname.setTextSettings(DGuiUtils.getLabelName(jlLastname), 99);
        moTextFirstname.setTextSettings(DGuiUtils.getLabelName(jlFirstname), 99);
        moTextName.setTextSettings(DGuiUtils.getLabelName(jlName), 200);
        moTextNickname.setTextSettings(DGuiUtils.getLabelName(jlNickname), 100, 0);
        moTextFiscalId.setTextSettings(DGuiUtils.getLabelName(jlFiscalId), 20);
        moTextAlternativeId.setTextSettings(moTextAlternativeId.getToolTipText(), 25, 0);
        moBoolFiscalHomologous.setBooleanSettings(moBoolFiscalHomologous.getText(), false);
        moTextNote.setTextSettings(DGuiUtils.getLabelName(jlNote), 100, 0);
        moKeyBizPartnerType.setKeySettings(miClient, DGuiUtils.getLabelName(jlBizPartnerType), true);
        moDateStart.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateStart), true);
        moDateEnd.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateEnd), false);
        moTextCodeOwn.setTextSettings(DGuiUtils.getLabelName(jlCodeOwn), 15, 0);
        moTextForeignId.setTextSettings(DGuiUtils.getLabelName(jlForeignId), 15, 0);
        moBoolAgent.setBooleanSettings(moBoolAgent.getText(), false);
        moBoolBank.setBooleanSettings(moBoolBank.getText(), false);
        moBoolCarrier.setBooleanSettings(moBoolCarrier.getText(), false);
        moKeyAgentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlAgentType), true);
        moTextWeb.setTextSettings(DGuiUtils.getLabelName(jlWeb), 15, 0);
        moTextWeb.setTextCaseType(DLibConsts.UNDEFINED);
        moKeyEmissionType.setKeySettings(miClient, DGuiUtils.getLabelName(jlEmissionType), true);
        moKeyXmlAddendaType.setKeySettings(miClient, DGuiUtils.getLabelName(jlXmlAddendaType), true);
        moKeyCurrency.setKeySettings(miClient, DGuiUtils.getLabelName(jlCurrency), false);
        moBoolCreditByUser.setBooleanSettings(moBoolCreditByUser.getText(), false);
        moKeyCreditType.setKeySettings(miClient, DGuiUtils.getLabelName(jlCreditType), true);
        moCurCreditLimit.setCompoundFieldSettings(miClient);
        moCurCreditLimit.getField().setDecimalSettings(DGuiUtils.getLabelName(jlCreditLimit), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moIntCreditDays.setIntegerSettings(DGuiUtils.getLabelName(jlCreditDays), DGuiConsts.GUI_TYPE_INT, true);
        moIntCreditDaysGrace.setIntegerSettings(DGuiUtils.getLabelName(jlCreditDaysGrace), DGuiConsts.GUI_TYPE_INT, false);
        moKeyModeOfPaymentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlModeOfPaymentType), false);
        moKeyCfdUsage.setKeySettings(miClient, DGuiUtils.getLabelName(jlCfdUsage), false);
        moBoolAbpBizPartnerByUser.setBooleanSettings(moBoolAbpBizPartnerByUser.getText(), false);
        moKeyAbpBizPartner.setKeySettings(miClient, DGuiUtils.getLabelName(jlAbpBizPartner), true);

        moFields.addField(moTextCode, 0);
        moFields.addField(moKeyIdentityType, 0);
        moFields.addField(moTextLastname, 0);
        moFields.addField(moTextFirstname, 0);
        moFields.addField(moTextName, 0);
        moFields.addField(moTextNickname, 0);
        moFields.addField(moTextFiscalId, 0);
        moFields.addField(moTextAlternativeId, 0);
        moFields.addField(moBoolFiscalHomologous, 0);
        moFields.addField(moTextNote, 0);
        moFields.addField(moKeyBizPartnerType, 1);
        moFields.addField(moDateStart, 1);
        moFields.addField(moDateEnd, 1);
        moFields.addField(moTextCodeOwn, 1);
        moFields.addField(moTextForeignId, 1);
        moFields.addField(moBoolAgent, 1);
        moFields.addField(moBoolBank, 1);
        moFields.addField(moBoolCarrier, 1);
        moFields.addField(moKeyAgentType, 1);
        moFields.addField(moTextWeb, 1);
        moFields.addField(moKeyEmissionType, 1);
        moFields.addField(moKeyXmlAddendaType, 1);
        moFields.addField(moKeyCurrency, 1);
        moFields.addField(moBoolCreditByUser, 1);
        moFields.addField(moKeyCreditType, 1);
        moFields.addField(moCurCreditLimit.getField(), 1);
        moFields.addField(moIntCreditDays, 1);
        moFields.addField(moIntCreditDaysGrace, 1);
        moFields.addField(moKeyModeOfPaymentType, 1);
        moFields.addField(moKeyCfdUsage, 1);
        moFields.addField(moBoolAbpBizPartnerByUser, 1);
        moFields.addField(moKeyAbpBizPartner, 1);

        moFields.setFormButton(jbSave);
        moFields.setTabbedPane(jTabbedPane);

        moPanelBranch.setPanelSettings(miClient);
        moPanelBranch.setForHeadquarters(true);
        moPanelBranch.setForCompany(false);
        moPanelBranchAddress.setPanelSettings(miClient);
        moPanelBranchAddress.setHeadquarters(true);

        moTextNote.setNextField(moPanelBranch.getFieldFirst());
        moPanelBranch.getFieldLast().setNextField(moPanelBranchAddress.getFieldFirst());
        moPanelBranchAddress.getFields().setFormButton(jbSave);

        jlFiscalId.setText(DUtilConsts.TXT_FISCAL_ID + ":*");
        moTextFiscalId.setToolTipText(DUtilConsts.TXT_FISCAL_ID);

        moGridBranchAddresses = new DGridPaneForm(miClient, DModConsts.BU_ADD, mnBizPartnerClass, "Otros domicilios") {

            @Override
            public void initGrid() {

            }

            @Override
            public void createGridColumns() {
                int col = 0;
                DGridColumnForm[] columns = new DGridColumnForm[9];

                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Nombre");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Calle");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Colonia");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Localidad");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_TEXT_CODE_CAT, "CP");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, "Default");
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, DGridConsts.COL_TITLE_IS_DIS);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, DGridConsts.COL_TITLE_IS_DEL);
                columns[col++] = new DGridColumnForm(DGridConsts.COL_TYPE_BOOL_S, DGridConsts.COL_TITLE_IS_SYS);

                for (col = 0; col < columns.length; col++) {
                    moModel.getGridColumns().add(columns[col]);
                }
            }
        };

        moGridBranchAddresses.setForm(new DDialogBranchAddress(miClient));
        jpConfig2.add(moGridBranchAddresses, BorderLayout.CENTER);

        mvFormGrids.add(moGridBranchAddresses);
        
        moXmlCatalogCfdUsage = ((DGuiClientApp) miClient).getXmlCatalogsMap().get(DCfdi33Catalogs.CAT_CFDI_USO);
        moXmlCatalogCfdUsage.populateCatalog(moKeyCfdUsage);
    }

    private void actionFiscalId() {
        moTextFiscalId.setValue(((DDbConfigCompany) miClient.getSession().getConfigCompany()).getFiscalIdCountry());
        moTextFiscalId.requestFocus();
    }

    private void actionXmlAddendaType() {
        jbXmlAddendaType.setEnabled(false);
        moKeyXmlAddendaType.setEnabled(true);
        moKeyXmlAddendaType.requestFocus();
    }

    private void actionCurrency() {
        jbCurrency.setEnabled(false);
        moKeyCurrency.setEnabled(true);
        moKeyCurrency.requestFocus();
    }

    private void itemStateKeyIdentityType() {
        if (moKeyIdentityType.getSelectedIndex() <= 0) {
            moTextLastname.setEditable(false);
            moTextFirstname.setEditable(false);
            moTextName.setEditable(false);
            moTextAlternativeId.setEditable(false);

            moTextLastname.resetField();
            moTextFirstname.resetField();
            moTextName.resetField();
            moTextAlternativeId.resetField();
        }
        else {
            switch (moKeyIdentityType.getValue()[0]) {
                case DModSysConsts.BS_IDY_TP_PER:
                    moTextLastname.setEditable(true);
                    moTextFirstname.setEditable(true);
                    moTextName.setEditable(false);
                    moTextAlternativeId.setEditable(true);

                    moTextName.resetField();
                    break;

                case DModSysConsts.BS_IDY_TP_ORG:
                    moTextLastname.setEditable(false);
                    moTextFirstname.setEditable(false);
                    moTextName.setEditable(true);
                    moTextAlternativeId.setEditable(false);

                    moTextLastname.resetField();
                    moTextFirstname.resetField();
                    moTextAlternativeId.resetField();
                    break;
                default:
            }
        }
    }

    private void itemStateKeyBizPartnerType() {
        DDbBizPartnerType type = null;

        if (moKeyBizPartnerType.getSelectedIndex() > 0 && (!moBoolCreditByUser.getValue() || !moBoolAbpBizPartnerByUser.getValue())) {
            type = (DDbBizPartnerType) miClient.getSession().readRegistry(DModConsts.BU_BPR_TP, moKeyBizPartnerType.getValue());
        }

        if (!moBoolCreditByUser.getValue()) {
            if (moKeyBizPartnerType.getSelectedIndex() <= 0) {
                moKeyCreditType.resetField();
                moCurCreditLimit.getField().resetField();
                moIntCreditDays.resetField();
                moIntCreditDaysGrace.resetField();
                moKeyModeOfPaymentType.resetField();
                moKeyCfdUsage.resetField();
            }
            else {
                moKeyCreditType.setValue( new int[] { type.getFkCreditTypeId() });
                moCurCreditLimit.getField().setValue(type.getCreditLimit());
                moIntCreditDays.setValue(type.getCreditDays());
                moIntCreditDaysGrace.setValue(type.getCreditDaysGrace());
                moKeyModeOfPaymentType.setValue( new int[] { type.getFkModeOfPaymentTypeId() });
                moKeyCfdUsage.setValue( new int[] { moXmlCatalogCfdUsage.getId(type.getCfdUsage()) });
            }
        }

        if (!moBoolAbpBizPartnerByUser.getValue()) {
            if (moKeyBizPartnerType.getSelectedIndex() <= 0) {
                moKeyAbpBizPartner.resetField();
            }
            else {
                moKeyAbpBizPartner.setValue(new int[] { type.getFkAbpBizPartnerId() });
            }
        }
    }

    private void itemStateKeyCreditType() {
        if (moKeyCreditType.getSelectedIndex() <= 0) {
            moCurCreditLimit.getField().setEditable(false);
            moIntCreditDays.setEditable(false);
            moIntCreditDaysGrace.setEditable(false);

            moCurCreditLimit.getField().resetField();
            moIntCreditDays.resetField();
            moIntCreditDaysGrace.resetField();
        }
        else {
            switch (moKeyCreditType.getValue()[0]) {
                case DModSysConsts.BS_CDT_TP_CDT_NON:
                    moCurCreditLimit.getField().setEditable(false);
                    moIntCreditDays.setEditable(false);
                    moIntCreditDaysGrace.setEditable(false);

                    moCurCreditLimit.getField().resetField();
                    moIntCreditDays.resetField();
                    moIntCreditDaysGrace.resetField();
                    break;

                case DModSysConsts.BS_CDT_TP_CDT_LIM_YES:
                    moCurCreditLimit.getField().setEditable(moBoolCreditByUser.getValue());
                    moIntCreditDays.setEditable(moBoolCreditByUser.getValue());
                    moIntCreditDaysGrace.setEditable(moBoolCreditByUser.getValue());
                    break;

                case DModSysConsts.BS_CDT_TP_CDT_LIM_NON:
                    moCurCreditLimit.getField().setEditable(false);
                    moIntCreditDays.setEditable(moBoolCreditByUser.getValue());
                    moIntCreditDaysGrace.setEditable(moBoolCreditByUser.getValue());

                    moCurCreditLimit.getField().resetField();
                    break;
                default:
            }
        }
    }

    private void itemStateBoolAgent() {
        if (moBoolAgent.isSelected()) {
            moKeyAgentType.setEnabled(true);
        }
        else {
            moKeyAgentType.setEnabled(false);
            if (moRegistry.getChildAgentConfig() == null) {
                moKeyAgentType.resetField();
            }
        }
    }

    private void itemStateBoolCreditByUser() {
        moKeyCreditType.setEnabled(moBoolCreditByUser.getValue());
        moKeyModeOfPaymentType.setEnabled(moBoolCreditByUser.getValue() && DLibUtils.belongsTo(mnBizPartnerClass, new int[] { DModSysConsts.BS_BPR_CL_CUS, DModSysConsts.BS_BPR_CL_DBR }));
        moKeyCfdUsage.setEnabled(moBoolCreditByUser.getValue() && DLibUtils.belongsTo(mnBizPartnerClass, new int[] { DModSysConsts.BS_BPR_CL_CUS, DModSysConsts.BS_BPR_CL_DBR }));
        itemStateKeyBizPartnerType();
        itemStateKeyCreditType();
    }

    private void itemStateBoolAbpBizPartnerByUser() {
        DDbBizPartnerType type = null;

        if (moKeyBizPartnerType.getSelectedIndex() > 0) {
            type = (DDbBizPartnerType) miClient.getSession().readRegistry(DModConsts.BU_BPR_TP, moKeyBizPartnerType.getValue());
        }

        moKeyAbpBizPartner.setEnabled(moBoolAbpBizPartnerByUser.getValue());

        if (!moBoolAbpBizPartnerByUser.getValue()) {
            if (moKeyBizPartnerType.getSelectedIndex() <= 0) {
                moKeyAbpBizPartner.resetField();
            }
            else {
                moKeyAbpBizPartner.setValue(new int[] { type.getFkAbpBizPartnerId() });
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JButton jbCurrency;
    private javax.swing.JButton jbFiscalId;
    private javax.swing.JButton jbXmlAddendaType;
    private javax.swing.JLabel jlAbpBizPartner;
    private javax.swing.JLabel jlAgentType;
    private javax.swing.JLabel jlBizPartnerType;
    private javax.swing.JLabel jlCfdUsage;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlCodeOwn;
    private javax.swing.JLabel jlCodeOwnInfo;
    private javax.swing.JLabel jlCreditDays;
    private javax.swing.JLabel jlCreditDaysGrace;
    private javax.swing.JLabel jlCreditLimit;
    private javax.swing.JLabel jlCreditType;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlEmissionType;
    private javax.swing.JLabel jlFirstname;
    private javax.swing.JLabel jlFiscalId;
    private javax.swing.JLabel jlForeignId;
    private javax.swing.JLabel jlForeignIdInfo;
    private javax.swing.JLabel jlLastname;
    private javax.swing.JLabel jlModeOfPaymentType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNickname;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlWeb;
    private javax.swing.JLabel jlXmlAddendaType;
    private javax.swing.JPanel jpConfig;
    private javax.swing.JPanel jpConfig1;
    private javax.swing.JPanel jpConfig11;
    private javax.swing.JPanel jpConfig12;
    private javax.swing.JPanel jpConfig2;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpRegistry1;
    private javax.swing.JPanel jpRegistry11;
    private javax.swing.JPanel jpRegistry12;
    private javax.swing.JPanel jpRegistry2;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolAbpBizPartnerByUser;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolAgent;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolBank;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolCarrier;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolCreditByUser;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolFiscalHomologous;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurCreditLimit;
    private sba.lib.gui.bean.DBeanFieldDate moDateEnd;
    private sba.lib.gui.bean.DBeanFieldDate moDateStart;
    private sba.lib.gui.bean.DBeanFieldInteger moIntCreditDays;
    private sba.lib.gui.bean.DBeanFieldInteger moIntCreditDaysGrace;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAbpBizPartner;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAgentType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBizPartnerType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCfdUsage;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCreditType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyCurrency;
    private sba.lib.gui.bean.DBeanFieldKey moKeyEmissionType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyIdentityType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyModeOfPaymentType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyXmlAddendaType;
    private sba.mod.bpr.form.DPanelBranch moPanelBranch;
    private sba.mod.bpr.form.DPanelBranchAddress moPanelBranchAddress;
    private sba.lib.gui.bean.DBeanFieldText moTextAlternativeId;
    private sba.lib.gui.bean.DBeanFieldText moTextCode;
    private sba.lib.gui.bean.DBeanFieldText moTextCodeOwn;
    private sba.lib.gui.bean.DBeanFieldText moTextFirstname;
    private sba.lib.gui.bean.DBeanFieldText moTextFiscalId;
    private sba.lib.gui.bean.DBeanFieldText moTextForeignId;
    private sba.lib.gui.bean.DBeanFieldText moTextLastname;
    private sba.lib.gui.bean.DBeanFieldText moTextName;
    private sba.lib.gui.bean.DBeanFieldText moTextNickname;
    private sba.lib.gui.bean.DBeanFieldText moTextNote;
    private sba.lib.gui.bean.DBeanFieldText moTextWeb;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jbFiscalId.addActionListener(this);
        jbXmlAddendaType.addActionListener(this);
        jbCurrency.addActionListener(this);
        moKeyIdentityType.addItemListener(this);
        moKeyBizPartnerType.addItemListener(this);
        moKeyCreditType.addItemListener(this);
        moBoolAgent.addItemListener(this);
        moBoolCreditByUser.addItemListener(this);
        moBoolAbpBizPartnerByUser.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbFiscalId.removeActionListener(this);
        jbXmlAddendaType.removeActionListener(this);
        jbCurrency.removeActionListener(this);
        moKeyIdentityType.removeItemListener(this);
        moKeyBizPartnerType.removeItemListener(this);
        moKeyCreditType.removeItemListener(this);
        moBoolAgent.removeItemListener(this);
        moBoolCreditByUser.removeItemListener(this);
        moBoolAbpBizPartnerByUser.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyIdentityType, DModConsts.BS_IDY_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyBizPartnerType, DModConsts.BU_BPR_TP, mnBizPartnerClass, null);
        miClient.getSession().populateCatalogue(moKeyAgentType, DModConsts.MU_AGT_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyEmissionType, DModConsts.TS_EMI_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyXmlAddendaType, DModConsts.TS_XML_ADD_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyCurrency, DModConsts.CS_CUR, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyCreditType, DModConsts.BS_CDT_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyModeOfPaymentType, DModConsts.FS_MOP_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAbpBizPartner, DModConsts.F_ABP_BPR, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        DDbBizPartnerConfig config = null;
        DDbBranch branch = null;
        DDbBranchAddress branchAddress = null;
        Vector<DGridRow> addresses = new Vector<>();

        moRegistry = (DDbBizPartner) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        switch (mnBizPartnerClass) {
            case DModSysConsts.BS_BPR_CL_VEN:
                moRegistry.setVendor(true);
                break;
            case DModSysConsts.BS_BPR_CL_CUS:
                moRegistry.setCustomer(true);
                break;
            case DModSysConsts.BS_BPR_CL_CDR:
                moRegistry.setCreditor(true);
                break;
            case DModSysConsts.BS_BPR_CL_DBR:
                moRegistry.setDebtor(true);
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");

            config = moRegistry.getChildConfig(mnBizPartnerClass);

            if (config == null) {
                config = new DDbBizPartnerConfig();
                config.setPkBizPartnerClassId(mnBizPartnerClass);
                config.setDateStart(DLibTimeUtils.getBeginOfMonth(miClient.getSession().getWorkingDate()));
                config.setDateEnd_n(null);
                config.setFkBizPartnerClassId(mnBizPartnerClass);
                config.setFkBizPartnerTypeId(1);
                moRegistry.getChildConfigs().add(config);
            }

            moRegistry.getChildConfig(mnBizPartnerClass).setCode("");

            if (moRegistry.getChildBranches().isEmpty()) {
                branchAddress = new DDbBranchAddress();
                branchAddress.setDefault(true);

                branch = new DDbBranch();
                branch.setAddressPrintable(true);
                branch.getChildAddresses().add(branchAddress);

                moRegistry.getChildBranches().add(branch);
            }

            if (moRegistry.getFkEmissionTypeId() == DLibConsts.UNDEFINED) {
                moRegistry.setFkEmissionTypeId(DModSysConsts.TS_EMI_TP_BPR);
            }

            if (moRegistry.getFkXmlAddendaTypeId()== DLibConsts.UNDEFINED) {
                moRegistry.setFkXmlAddendaTypeId(DModSysConsts.TS_XML_ADD_TP_NA);
            }
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));

            config = moRegistry.getChildConfig(mnBizPartnerClass);
        }

        moTextName.setValue(moRegistry.getName());
        moTextLastname.setValue(moRegistry.getLastname());
        moTextFirstname.setValue(moRegistry.getFirstname());
        moTextNickname.setValue(moRegistry.getNickname());
        moTextFiscalId.setValue(moRegistry.getFiscalId());
        moTextAlternativeId.setValue(moRegistry.getAlternativeId());
        moTextForeignId.setValue(moRegistry.getForeignId());
        moTextWeb.setValue(moRegistry.getWeb());
        moTextNote.setValue(moRegistry.getNote());
        moBoolFiscalHomologous.setValue(moRegistry.isFiscalHomologous());
        moBoolBank.setValue(moRegistry.isBank());
        moBoolCarrier.setValue(moRegistry.isCarrier());
        moKeyIdentityType.setValue(new int[] { moRegistry.getFkIdentityTypeId() });
        moKeyEmissionType.setValue(new int[] { moRegistry.getFkEmissionTypeId() });
        moKeyXmlAddendaType.setValue(new int[] { moRegistry.getFkXmlAddendaTypeId()});

        moTextCode.setValue(config.getCode());
        moTextCodeOwn.setValue(config.getCodeOwn());
        moCurCreditLimit.getField().setValue(config.getCreditLimit());
        moIntCreditDays.setValue(config.getCreditDays());
        moIntCreditDaysGrace.setValue(config.getCreditDaysGrace());
        moKeyCfdUsage.setValue(new int[] { moXmlCatalogCfdUsage.getId(config.getCfdUsage()) });
        moDateStart.setValue(config.getDateStart());
        moDateEnd.setValue(config.getDateEnd_n());
        moBoolCreditByUser.setValue(config.isCreditByUser());
        moKeyBizPartnerType.setValue(new int[] { config.getFkBizPartnerClassId(), config.getFkBizPartnerTypeId() });
        moKeyCurrency.setValue(new int[] { config.getFkCurrencyId_n() });
        moKeyCreditType.setValue(new int[] { config.getFkCreditTypeId_n() });
        moKeyModeOfPaymentType.setValue(new int[] { config.getFkModeOfPaymentTypeId_n() });
        moKeyAbpBizPartner.setValue(new int[] { config.getFkAbpBizPartnerId_n() });

        moBoolAgent.setValue(moRegistry.getChildAgentConfig() != null && !moRegistry.getChildAgentConfig().isDeleted());
        moKeyAgentType.setValue(new int[] { moRegistry.getChildAgentConfig() == null ? DLibConsts.UNDEFINED : moRegistry.getChildAgentConfig().getFkAgentTypeId() });

        moBoolAbpBizPartnerByUser.setValue(config.getFkAbpBizPartnerId_n() != DLibConsts.UNDEFINED);

        moPanelBranch.setRegistry(moRegistry.getChildBranches().get(0));
        moPanelBranchAddress.setRegistry(moRegistry.getChildBranches().get(0).getChildAddresses().get(0));

        if (moRegistry.getChildBranches().get(0).getChildAddresses().size() > 1) {
            for (int i = 1; i < moRegistry.getChildBranches().get(0).getChildAddresses().size(); i++) {
                addresses.add(moRegistry.getChildBranches().get(0).getChildAddresses().get(i));
            }
        }

        moGridBranchAddresses.populateGrid(addresses);

        jTabbedPane.setSelectedIndex(0);
        setFormEditable(true);
        itemStateKeyIdentityType();
        itemStateKeyBizPartnerType();
        itemStateKeyCreditType();
        itemStateBoolAgent();
        itemStateBoolCreditByUser();
        itemStateBoolAbpBizPartnerByUser();

        moTextCode.setEnabled(((DDbConfigCompany) miClient.getSession().getConfigCompany()).isCodeBizPartnerApplying());
        
        // Prevent undesired modifications to currency:

        jbCurrency.setEnabled(true);
        moKeyCurrency.setEnabled(false);

        // Prevent undesired or inappropriate modifications to XML-addenda type:

        moKeyXmlAddendaType.setEnabled(false);
        
        switch (mnBizPartnerClass) {
            case DModSysConsts.BS_BPR_CL_CUS:
                jlXmlAddendaType.setEnabled(true);
                jbXmlAddendaType.setEnabled(true);
                break;
            case DModSysConsts.BS_BPR_CL_VEN:
            case DModSysConsts.BS_BPR_CL_CDR:
            case DModSysConsts.BS_BPR_CL_DBR:
                jlXmlAddendaType.setEnabled(false);
                jbXmlAddendaType.setEnabled(false);
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
        
        addAllListeners();
    }

    @Override
    public DDbBizPartner getRegistry() throws Exception {
        DDbBizPartner registry = moRegistry.clone();
        DDbBizPartnerConfig config = null;

        if (registry.isRegistryNew()) { }

        registry.setName(moTextName.getValue());
        registry.setLastname(moTextLastname.getValue());
        registry.setFirstname(moTextFirstname.getValue());
        registry.setNickname(moTextNickname.getValue());
        registry.setFiscalId(moTextFiscalId.getValue());
        registry.setAlternativeId(moTextAlternativeId.getValue());
        registry.setForeignId(moTextForeignId.getValue());
        registry.setWeb(moTextWeb.getValue());
        registry.setNote(moTextNote.getValue());
        registry.setFiscalHomologous(moBoolFiscalHomologous.getValue());
        registry.setBank(moBoolBank.getValue());
        registry.setCarrier(moBoolCarrier.getValue());
        registry.setFkIdentityTypeId(moKeyIdentityType.getValue()[0]);
        registry.setFkEmissionTypeId(moKeyEmissionType.getValue()[0]);
        registry.setFkXmlAddendaTypeId(moKeyXmlAddendaType.getValue()[0]);

        config = registry.getChildConfig(mnBizPartnerClass);

        config.setCode(moTextCode.getValue());
        config.setCodeOwn(moTextCodeOwn.getValue());
        config.setDateStart(moDateStart.getValue());
        config.setDateEnd_n(moDateEnd.getValue());
        config.setFkBizPartnerClassId(moKeyBizPartnerType.getValue()[0]);
        config.setFkBizPartnerTypeId(moKeyBizPartnerType.getValue()[1]);
        config.setFkCurrencyId_n(moKeyCurrency.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyCurrency.getValue()[0]);

        if (!moBoolCreditByUser.getValue()) {
            config.setCreditByUser(false);
            config.setCreditLimit(0);
            config.setCreditDays(0);
            config.setCreditDaysGrace(0);
            config.setCfdUsage("");
            config.setFkCreditTypeId_n(DLibConsts.UNDEFINED);
            config.setFkModeOfPaymentTypeId_n(DLibConsts.UNDEFINED);
        }
        else {
            config.setCreditByUser(true);
            config.setCreditLimit(moCurCreditLimit.getField().getValue());
            config.setCreditDays(moIntCreditDays.getValue());
            config.setCreditDaysGrace(moIntCreditDaysGrace.getValue());
            config.setCfdUsage(!moKeyCfdUsage.isEnabled() || moKeyCfdUsage.getSelectedIndex() <= 0 ? "" : moXmlCatalogCfdUsage.getCode(moKeyCfdUsage.getValue()[0]));
            config.setFkCreditTypeId_n(moKeyCreditType.getValue()[0]);
            config.setFkModeOfPaymentTypeId_n(!moKeyModeOfPaymentType.isEnabled() || moKeyModeOfPaymentType.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyModeOfPaymentType.getValue()[0]);
        }

        if (!moBoolAgent.getValue()) {
            if (registry.getChildAgentConfig() != null) {
                registry.getChildAgentConfig().setDeleted(true);
            }
        }
        else {
            if (registry.getChildAgentConfig() == null) {
                registry.setChildAgentConfig(new DDbAgentConfig());
            }
            registry.getChildAgentConfig().setDeleted(false);
            registry.getChildAgentConfig().setFkAgentTypeId(moKeyAgentType.getValue()[0]);
        }

        if (!moBoolAbpBizPartnerByUser.getValue()) {
            config.setFkAbpBizPartnerId_n(DLibConsts.UNDEFINED);
        }
        else {
            config.setFkAbpBizPartnerId_n(moKeyAbpBizPartner.getValue()[0]);
        }

        registry.getChildBranches().set(0, moPanelBranch.getRegistry());
        registry.getChildBranches().get(0).getChildAddresses().set(0, moPanelBranchAddress.getRegistry());

        while (registry.getChildBranches().get(0).getChildAddresses().size() > 1) {
            registry.getChildBranches().get(0).getChildAddresses().remove(1);
        }

        for (int i = 0; i < moGridBranchAddresses.getModel().getGridRows().size(); i++) {
            registry.getChildBranches().get(0).getChildAddresses().add((DDbBranchAddress) moGridBranchAddresses.getModel().getGridRows().get(i));
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        int count = 0;
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = moPanelBranch.validatePanel();

            if (validation.isValid()) {
                validation = moPanelBranchAddress.validatePanel();

                if (validation.isValid()) {
                    try {
                        if (moPanelBranchAddress.getRegistry().isDefault()) {
                            count++;
                        }

                        for (DGridRow row : moGridBranchAddresses.getModel().getGridRows()) {
                            if (((DDbBranchAddress) row).isDefault()) {
                                count++;
                            }
                        }

                        if (count == 0) {
                            validation.setMessage("Se debe especificar cuál es el domicilio por default.");
                        }
                        else if (count > 1){
                            validation.setMessage("Se debe especificar solamente un domicilio por default.");
                        }
                    }
                    catch (Exception e) {
                        validation.setMessage(e.toString());
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbFiscalId) {
                actionFiscalId();
            }
            else if (button == jbXmlAddendaType) {
                actionXmlAddendaType();
            }
            else if (button == jbCurrency) {
                actionCurrency();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyIdentityType) {
                    itemStateKeyIdentityType();
                }
                else if (field == moKeyBizPartnerType) {
                    itemStateKeyBizPartnerType();
                }
                else if (field == moKeyCreditType) {
                    itemStateKeyCreditType();
                }
            }
        }
        else if (e.getSource() instanceof DBeanFieldBoolean) {
            DBeanFieldBoolean field = (DBeanFieldBoolean) e.getSource();

            if (field == moBoolAgent) {
                itemStateBoolAgent();
            }
            else if (field == moBoolCreditByUser) {
                itemStateBoolCreditByUser();
            }
            else if (field == moBoolAbpBizPartnerByUser) {
                itemStateBoolAbpBizPartnerByUser();
            }
        }
    }
}
