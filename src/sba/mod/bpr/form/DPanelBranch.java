/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DPanelBranch.java
 *
 * Created on 1/10/2011, 01:32:10 PM
 */

package sba.mod.bpr.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanPanel;
import sba.mod.DModConsts;
import sba.mod.bpr.db.DDbBranch;

/**
 *
 * @author Sergio Flores
 */
public class DPanelBranch extends DBeanPanel implements ActionListener {

    private DDbBranch moRegistry;
    private boolean mbForHeadquarters;
    private boolean mbForCompany;

    /** Creates new form DPanelBranch */
    public DPanelBranch() {
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpRegistry1 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sba.lib.gui.bean.DBeanFieldText();
        moTextCode = new sba.lib.gui.bean.DBeanFieldText();
        jpRegistry2 = new javax.swing.JPanel();
        jlTaxRegion = new javax.swing.JLabel();
        moKeyTaxRegion = new sba.lib.gui.bean.DBeanFieldKey();
        jbTaxRegion = new javax.swing.JButton();
        jpRegistry3 = new javax.swing.JPanel();
        jlAddressFormatType = new javax.swing.JLabel();
        moKeyAddressFormatType = new sba.lib.gui.bean.DBeanFieldKey();
        jbAddressFormatType = new javax.swing.JButton();
        jpRegistry4 = new javax.swing.JPanel();
        moBoolAddressPrintable = new sba.lib.gui.bean.DBeanFieldBoolean();
        jpRegistry5 = new javax.swing.JPanel();
        jlNote = new javax.swing.JLabel();
        moTextNote = new sba.lib.gui.bean.DBeanFieldText();

        setLayout(new java.awt.BorderLayout());

        jpRegistry.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jpRegistry1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRegistry1.add(jlName);

        moTextName.setToolTipText("Nombre");
        moTextName.setPreferredSize(new java.awt.Dimension(200, 23));
        jpRegistry1.add(moTextName);

        moTextCode.setToolTipText("Código");
        moTextCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jpRegistry1.add(moTextCode);

        jpRegistry.add(jpRegistry1);

        jpRegistry2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxRegion.setText("Región impuestos:");
        jlTaxRegion.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRegistry2.add(jlTaxRegion);

        moKeyTaxRegion.setPreferredSize(new java.awt.Dimension(200, 23));
        jpRegistry2.add(moKeyTaxRegion);

        jbTaxRegion.setText("<");
        jbTaxRegion.setToolTipText("Modificar región impuestos");
        jbTaxRegion.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbTaxRegion.setPreferredSize(new java.awt.Dimension(23, 23));
        jpRegistry2.add(jbTaxRegion);

        jpRegistry.add(jpRegistry2);

        jpRegistry3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAddressFormatType.setText("Formato domicilio:");
        jlAddressFormatType.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRegistry3.add(jlAddressFormatType);

        moKeyAddressFormatType.setPreferredSize(new java.awt.Dimension(200, 23));
        jpRegistry3.add(moKeyAddressFormatType);

        jbAddressFormatType.setText("<");
        jbAddressFormatType.setToolTipText("Modificar formato domicilio");
        jbAddressFormatType.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbAddressFormatType.setPreferredSize(new java.awt.Dimension(23, 23));
        jpRegistry3.add(jbAddressFormatType);

        jpRegistry.add(jpRegistry3);

        jpRegistry4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolAddressPrintable.setText("Imprimir domicilio propio de la sucursal en documentos");
        moBoolAddressPrintable.setPreferredSize(new java.awt.Dimension(300, 23));
        jpRegistry4.add(moBoolAddressPrintable);

        jpRegistry.add(jpRegistry4);

        jpRegistry5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNote.setText("Notas:");
        jlNote.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRegistry5.add(jlNote);

        moTextNote.setPreferredSize(new java.awt.Dimension(255, 23));
        jpRegistry5.add(moTextNote);

        jpRegistry.add(jpRegistry5);

        add(jpRegistry, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        mbForHeadquarters = false;
        mbForCompany = false;

        moTextName.setTextSettings(DGuiUtils.getLabelName(jlName.getText()), 50);
        moTextCode.setTextSettings(DGuiUtils.getLabelName(moTextCode.getComponent().getToolTipText()), 5);
        moKeyTaxRegion.setKeySettings(miClient, DGuiUtils.getLabelName(jlTaxRegion.getText()), false);
        moKeyAddressFormatType.setKeySettings(miClient, DGuiUtils.getLabelName(jlAddressFormatType.getText()), false);
        moBoolAddressPrintable.setBooleanSettings(moBoolAddressPrintable.getText(), true);
        moTextNote.setTextSettings(DGuiUtils.getLabelName(jlNote.getText()), 100, 0);

        moFields.addField(moTextName);
        moFields.addField(moTextCode);
        moFields.addField(moKeyTaxRegion);
        moFields.addField(moKeyAddressFormatType);
        moFields.addField(moBoolAddressPrintable);
        moFields.addField(moTextNote);
    }

    private void actionTaxRegion() {
        jbTaxRegion.setEnabled(false);
        moKeyTaxRegion.setEnabled(true);
        moKeyTaxRegion.requestFocus();
    }

    private void actionAddressFormatType() {
        jbAddressFormatType.setEnabled(false);
        moKeyAddressFormatType.setEnabled(true);
        moKeyAddressFormatType.requestFocus();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAddressFormatType;
    private javax.swing.JButton jbTaxRegion;
    private javax.swing.JLabel jlAddressFormatType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlTaxRegion;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpRegistry1;
    private javax.swing.JPanel jpRegistry2;
    private javax.swing.JPanel jpRegistry3;
    private javax.swing.JPanel jpRegistry4;
    private javax.swing.JPanel jpRegistry5;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolAddressPrintable;
    private sba.lib.gui.bean.DBeanFieldKey moKeyAddressFormatType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyTaxRegion;
    private sba.lib.gui.bean.DBeanFieldText moTextCode;
    private sba.lib.gui.bean.DBeanFieldText moTextName;
    private sba.lib.gui.bean.DBeanFieldText moTextNote;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods
     */

    public void setForHeadquarters(boolean forHeadquarters) {
        mbForHeadquarters = forHeadquarters;

        if (mbForHeadquarters) {
            moTextName.setEnabled(false);
            moTextNote.setEnabled(false);
            moBoolAddressPrintable.setEnabled(false);
        }
        else {
            moTextName.setEnabled(true);
            moTextNote.setEnabled(true);
            moBoolAddressPrintable.setEnabled(true);
        }
    }

    public void setForCompany(boolean forCompany) {
        mbForCompany = forCompany;

        if (mbForCompany) {
            moTextCode.setEnabled(true);
        }
        else {
            moTextCode.setEnabled(false);
        }
    }

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbTaxRegion.addActionListener(this);
        jbAddressFormatType.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbTaxRegion.removeActionListener(this);
        jbAddressFormatType.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyTaxRegion, DModConsts.FU_TAX_REG, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAddressFormatType, DModConsts.BS_BAF_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        moRegistry = (DDbBranch) registry;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();

            moRegistry.setName(!mbForHeadquarters ? "" : DUtilConsts.HEADQUARTERS_BRA);
            moRegistry.setAddressPrintable(true);
        }
        else {

        }

        moTextName.setValue(moRegistry.getName());
        moTextCode.setValue(moRegistry.getCode());
        moTextNote.setValue(moRegistry.getNote());
        moBoolAddressPrintable.setValue(moRegistry.isAddressPrintable());
        moKeyAddressFormatType.setValue(new int[] { moRegistry.getFkAddressFormatTypeId_n() });
        moKeyTaxRegion.setValue(new int[] { moRegistry.getFkTaxRegionId_n() });

        setPanelEditable(true);
        setForHeadquarters(mbForHeadquarters);
        setForCompany(mbForCompany);

        jbTaxRegion.setEnabled(true);
        moKeyTaxRegion.setEnabled(false);
        jbAddressFormatType.setEnabled(true);
        moKeyAddressFormatType.setEnabled(false);

        addAllListeners();
    }

    @Override
    public DDbBranch getRegistry() throws Exception {
        DDbBranch registry = moRegistry.clone();

        if (registry.isRegistryNew()) { } else { }

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setNote(moTextNote.getValue());
        registry.setFkAddressFormatTypeId_n(moKeyAddressFormatType.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyAddressFormatType.getValue()[0]);
        registry.setFkTaxRegionId_n(moKeyTaxRegion.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyTaxRegion.getValue()[0]);

        return registry;
    }

    @Override
    public DGuiValidation validatePanel() {
        DGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbTaxRegion) {
                actionTaxRegion();
            }
            else if (button == jbAddressFormatType) {
                actionAddressFormatType();
            }
        }
    }
}
