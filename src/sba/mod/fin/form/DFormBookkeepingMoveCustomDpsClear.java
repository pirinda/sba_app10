/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormBookkeepingMoveCustomDpsClear.java
 *
 * Created on 13/12/2011, 07:25:39 AM
 */

package sba.mod.fin.form;

import sba.gui.DGuiClientSessionCustom;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.fin.db.DDbAbpBizPartner;
import sba.mod.fin.db.DDbBookkeepingMove;
import sba.mod.fin.db.DDbBookkeepingMoveCustom;
import sba.mod.fin.db.DFinUtils;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DTrnAmount;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DFormBookkeepingMoveCustomDpsClear extends DBeanForm {

    private DDbBookkeepingMoveCustom moRegistry;
    private DDbBookkeepingMove moBkkMoveBizPartner;
    private DDbDps moDps;
    private int[] manSystemMoveTypeKey;

    /** Creates new form DFormBookkeepingMoveCustom
     */
    public DFormBookkeepingMoveCustomDpsClear(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DLibConsts.UNDEFINED, DLibConsts.UNDEFINED, title);

        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlAmountCy = new javax.swing.JLabel();
        moCurAmountCy = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel9 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        moDecExchangeRate = new sba.lib.gui.bean.DBeanFieldDecimal();
        jbExchangeRate = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlAmount = new javax.swing.JLabel();
        moCurAmount = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        moPanelDps = new sba.mod.trn.form.DPanelDps();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del movimiento:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout(0, 25));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:");
        jlDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jlDate);
        jPanel5.add(moDate);

        jPanel2.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmountCy.setText("Saldo:*");
        jlAmountCy.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlAmountCy);
        jPanel6.add(moCurAmountCy);

        jPanel4.add(jPanel6);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("T. cambio:*");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlExchangeRate);

        moDecExchangeRate.setToolTipText("Tipo de cambio");
        jPanel9.add(moDecExchangeRate);

        jbExchangeRate.setText("...");
        jbExchangeRate.setToolTipText("Buscar tipo de cambio");
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbExchangeRate);

        jPanel4.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmount.setText("Saldo ML:*");
        jlAmount.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlAmount);
        jPanel10.add(moCurAmount);

        jPanel4.add(jPanel10);

        jPanel2.add(jPanel4, java.awt.BorderLayout.SOUTH);
        jPanel2.add(moPanelDps, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 800, 500);

        moDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDate.getText()), true);
        moCurAmountCy.setCompoundFieldSettings(miClient);
        moCurAmountCy.getField().setDecimalSettings(DGuiUtils.getLabelName(jlAmountCy.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecExchangeRate.setDecimalSettings(DGuiUtils.getLabelName(jlExchangeRate.getText()), DGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moCurAmount.setCompoundFieldSettings(miClient);
        moCurAmount.getField().setDecimalSettings(DGuiUtils.getLabelName(jlAmount.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, true);

        moFields.addField(moDate);
        moFields.addField(moCurAmountCy.getField());
        moFields.addField(moDecExchangeRate);
        moFields.addField(moCurAmount.getField());

        moFields.setFormButton(jbSave);

        moPanelDps.setPanelSettings(miClient);
        moPanelDps.enableShowCardex();
    }

    private void renderCurrencySettings() {
        int[] key = moDps.getCurrencyKey();

        moCurAmountCy.setCurrencyKey(key);

        if (miClient.getSession().getSessionCustom().isLocalCurrency(key)) {
            moCurAmount.getField().setEnabled(false);
            moDecExchangeRate.setEnabled(false);
            jbExchangeRate.setEnabled(false);
        }
        else {
            moCurAmount.getField().setEnabled(true);
            moDecExchangeRate.setEnabled(true);
            jbExchangeRate.setEnabled(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JLabel jlAmount;
    private javax.swing.JLabel jlAmountCy;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlExchangeRate;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurAmount;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurAmountCy;
    private sba.lib.gui.bean.DBeanFieldDate moDate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecExchangeRate;
    private sba.mod.trn.form.DPanelDps moPanelDps;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        int[] key = null;
        DGuiClientSessionCustom sessionCustom = (DGuiClientSessionCustom) miClient.getSession().getSessionCustom();

        moRegistry = new DDbBookkeepingMoveCustom();
        moBkkMoveBizPartner = new DDbBookkeepingMove();

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        if (moRegistry.isRegistryNew()) {
            // Validate if new registry can be created:

            if (sessionCustom.getBranchKey() == null) {
                mbCanShowForm = false;
                msCanShowFormMessage = DUtilConsts.ERR_MSG_USR_SES_BRA;
                return;
            }
        }

        // Set registry:

        removeAllListeners();
        reloadCatalogues();

        moDps = null;
        manSystemMoveTypeKey = null;

        moRegistry.initPrimaryKey();
        jtfRegistryKey.setText("");

        key = sessionCustom.getBranchKey();
        moRegistry.setFkOwnerBizPartnerId(key[0]);
        moRegistry.setFkOwnerBranchId(key[1]);

        moDate.setValue(miClient.getSession().getWorkingDate());
        moPanelDps.setRegistry(null);
        moCurAmountCy.getField().resetField();
        moCurAmount.getField().resetField();
        moDecExchangeRate.resetField();

        setFormEditable(true);  // enable all controls before setting form values

        moDate.setEditable(false);
        moCurAmountCy.setEditable(false);
        moCurAmount.setEditable(false);
        moDecExchangeRate.setEditable(false);

        addAllListeners();
    }

    @Override
    public DDbBookkeepingMoveCustom getRegistry() throws Exception {
        DDbBookkeepingMoveCustom registry = moRegistry.clone();
        DDbAbpBizPartner abpBizPartner = DFinUtils.readAbpBizPartner(miClient.getSession(), moDps.getBizPartnerKey(), DTrnUtils.getBizPartnerClassByDpsCategory(moDps.getFkDpsCategoryId()));

        if (registry.isRegistryNew()) {
            registry.setPkBookkeepingYearId(miClient.getSession().getWorkingYear());
            registry.setPkBookkeepingNumberId(0);
        }

        registry.setDate(moDate.getValue());
        registry.setFkSystemMoveClassId(manSystemMoveTypeKey[0]);
        registry.setFkSystemMoveTypeId(manSystemMoveTypeKey[1]);

        if (moBkkMoveBizPartner.isRegistryNew()) {
            moBkkMoveBizPartner.setPkYearId(miClient.getSession().getWorkingYear());
            moBkkMoveBizPartner.setPkMoveId(0);
        }

        //moBookkeepingMove.setDate(?);     // value will be set by bookkeeping custom move object
        moBkkMoveBizPartner.setSupporting("");
        moBkkMoveBizPartner.setReference(moDps.getDpsReference(miClient.getSession()));
        moBkkMoveBizPartner.setText("LIMPIEZA SALDO");  // XXX Improve this!!!

        if (moDps.isDpsForPurchase() && moCurAmountCy.getField().getValue() > 0 || moDps.isDpsForSale() && moCurAmountCy.getField().getValue() < 0) {
            moBkkMoveBizPartner.setDebit(Math.abs(moCurAmount.getField().getValue()));
            moBkkMoveBizPartner.setCredit(0);
            moBkkMoveBizPartner.setDebitCy(Math.abs(moCurAmountCy.getField().getValue()));
            moBkkMoveBizPartner.setCreditCy(0);
        }
        else {
            moBkkMoveBizPartner.setDebit(0);
            moBkkMoveBizPartner.setCredit(Math.abs(moCurAmount.getField().getValue()));
            moBkkMoveBizPartner.setDebitCy(0);
            moBkkMoveBizPartner.setCreditCy(Math.abs(moCurAmountCy.getField().getValue()));
        }

        moBkkMoveBizPartner.setExchangeRate(moDecExchangeRate.getValue());
        moBkkMoveBizPartner.setUnits(0);
        //moBkkMoveBizPartner.setSortingPos(?);               // value will be set by bookkeeping custom move object
        moBkkMoveBizPartner.setExchangeRateDifference(false); // XXX Code for future versions
        moBkkMoveBizPartner.setAvailable(true);
        moBkkMoveBizPartner.setDeleted(false);
        moBkkMoveBizPartner.setSystem(false);
        moBkkMoveBizPartner.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
        moBkkMoveBizPartner.setFkSystemAccountTypeId(DFinUtils.getSysAccountTypeForBizPartnerClass(DTrnUtils.getBizPartnerClassByDpsCategory(moDps.getFkDpsCategoryId())));
        moBkkMoveBizPartner.setFkSystemMoveClassId(manSystemMoveTypeKey[0]);
        moBkkMoveBizPartner.setFkSystemMoveTypeId(manSystemMoveTypeKey[1]);
        moBkkMoveBizPartner.setFkDiverseMoveTypeId(DModSysConsts.FS_DIV_MOV_TP_NA);
        moBkkMoveBizPartner.setFkCurrencyId(moDps.getFkCurrencyId());
        moBkkMoveBizPartner.setFkPaymentTypeId(DModSysConsts.FS_PAY_TP_NA);
        moBkkMoveBizPartner.setFkModeOfPaymentTypeId(DModSysConsts.FS_MOP_TP_NA);
        moBkkMoveBizPartner.setFkValueTypeId(DModSysConsts.FS_VAL_TP_NA);
        //moBkkMoveBizPartner.setFkOwnerBizPartnerId(?);    // value will be set by bookkeeping custom move object
        //moBkkMoveBizPartner.setFkOwnerBranchId(?);        // value will be set by bookkeeping custom move object
        moBkkMoveBizPartner.setFkCashBizPartnerId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkCashBranchId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkCashCashId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkWarehouseBizPartnerId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkWarehouseBranchId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkWarehouseWarehouseId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkBizPartnerBizPartnerId_n(moDps.getFkBizPartnerBizPartnerId());
        moBkkMoveBizPartner.setFkBizPartnerBranchId_n(moDps.getFkBizPartnerBranchId());
        moBkkMoveBizPartner.setFkDpsInvId_n(moDps.getPkDpsId());
        moBkkMoveBizPartner.setFkDpsAdjId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkDfrId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkIogId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkIomId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkPusId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkItemId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkItemAuxId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkUnitId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkRecordYearId_n(DLibConsts.UNDEFINED);
        moBkkMoveBizPartner.setFkRecordRecordId_n(DLibConsts.UNDEFINED);
        //moBkkMoveBizPartner.setFkBookkeepingYearId_n(?);    // value will be set by bookkeeping custom move object
        //moBkkMoveBizPartner.setFkBookkeepingNumberId_n(?);  // value will be set by bookkeeping custom move object
        moBkkMoveBizPartner.setFkUserAvailableId(DUtilConsts.USR_NA_ID);

        registry.getChildMoves().clear();
        registry.getChildMoves().add(moBkkMoveBizPartner);
        registry.getChildMoves().add(moBkkMoveBizPartner.createComplement(miClient.getSession()));

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moDps.getFkCurrencyId() != miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0]) {
                validation.setMessage("El documento debe estar en moneda local.");
            }
        }

        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        DTrnAmount amount = null;

        removeAllListeners();

        switch (type) {
            case DGuiConsts.PARAM_DPS:
                moDps = (DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, (int[]) value);

                try {
                    moPanelDps.setRegistry(moDps);
                }
                catch (Exception e) {
                    DLibUtils.showException(this, e);
                }

                amount = DTrnUtils.getBalanceForDps(miClient.getSession(), miClient.getSession().getWorkingYear(), moDps.getPrimaryKey());
                moCurAmountCy.getField().setValue(amount.getAmountCy());
                moCurAmount.getField().setValue(amount.getAmount());
                moDecExchangeRate.setValue(amount.getExchangeRate());
                renderCurrencySettings();

                if ((moDps.isDpsForPurchase() && amount.getAmountCy() > 0) || (moDps.isDpsForSale() && amount.getAmountCy() < 0)) {
                    manSystemMoveTypeKey = moDps.isDpsForPurchase() ? DModSysConsts.FS_SYS_MOV_TP_VEN_DOC_DEC_ADJ : DModSysConsts.FS_SYS_MOV_TP_CUS_DOC_INC_ADJ;
                }
                else {
                    manSystemMoveTypeKey = moDps.isDpsForPurchase() ? DModSysConsts.FS_SYS_MOV_TP_VEN_DOC_INC_ADJ : DModSysConsts.FS_SYS_MOV_TP_CUS_DOC_DEC_ADJ;
                }
                break;

            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        addAllListeners();
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
