/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFormBookkeepingMoveCustom.java
 *
 * Created on 13/12/2011, 07:25:39 AM
 */

package sba.mod.fin.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import javax.swing.JToggleButton;
import sba.gui.DGuiClientSessionCustom;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanForm;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.bpr.db.DBprUtils;
import sba.mod.cfg.db.DDbBranchCash;
import sba.mod.fin.db.DDbAbpBranchCash;
import sba.mod.fin.db.DDbBookkeepingMove;
import sba.mod.fin.db.DDbBookkeepingMoveCustom;
import sba.mod.fin.db.DFinUtils;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DTrnAmount;
import sba.mod.trn.db.DTrnUtils;
import sba.mod.trn.form.DDialogFindBizPartner;

/**
 *
 * @author Sergio Flores
 */
public class DFormBookkeepingMoveCustom extends DBeanForm implements ActionListener, ItemListener, FocusListener {

    private DDbBookkeepingMoveCustom moRegistry;
    private DDbBookkeepingMove moBkkMoveCash;
    private DDbBookkeepingMove moBkkMoveComplement;
    private DDbBranchCash moBranchCash;
    private DDbDps moDps;
    private DDialogFindBizPartner moDialogFindBizPartner;
    private int mnOriginalYear;
    private int[] manSystemMoveTypeKey;
    private int[] manCurrencyKey;

    /** Creates new form DFormBookkeepingMoveCustom
     */
    public DFormBookkeepingMoveCustom(DGuiClient client, String title) {
        setFormSettings(client, DGuiConsts.BEAN_FORM_EDIT, DLibConsts.UNDEFINED, DLibConsts.UNDEFINED, title);

        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlSysMoveType = new javax.swing.JLabel();
        jtfSysMoveType = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sba.lib.gui.bean.DBeanFieldDate();
        jPanel13 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        moKeyBizPartner = new sba.lib.gui.bean.DBeanFieldKey();
        jbBizPartner = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jlDps = new javax.swing.JLabel();
        moKeyDps = new sba.lib.gui.bean.DBeanFieldKey();
        jtbDps = new javax.swing.JToggleButton();
        jPanel14 = new javax.swing.JPanel();
        jlDiverseMoveType = new javax.swing.JLabel();
        moKeyDiverseMoveType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel6 = new javax.swing.JPanel();
        jlAmountCy = new javax.swing.JLabel();
        moCurAmountCy = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel9 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        moDecExchangeRate = new sba.lib.gui.bean.DBeanFieldDecimal();
        jbExchangeRate = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jlAmount = new javax.swing.JLabel();
        moCurAmount = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jPanel11 = new javax.swing.JPanel();
        jlModeOfPaymentType = new javax.swing.JLabel();
        moKeyModeOfPaymentType = new sba.lib.gui.bean.DBeanFieldKey();
        moBoolAvailable = new sba.lib.gui.bean.DBeanFieldBoolean();
        jPanel12 = new javax.swing.JPanel();
        jlValueType = new javax.swing.JLabel();
        moKeyValueType = new sba.lib.gui.bean.DBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlSupporting = new javax.swing.JLabel();
        moTextSupporting = new sba.lib.gui.bean.DBeanFieldText();
        jlCodeOwnInfo = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jlText = new javax.swing.JLabel();
        moTextText = new sba.lib.gui.bean.DBeanFieldText();
        jPanel53 = new javax.swing.JPanel();
        jlOwnBranch = new javax.swing.JLabel();
        jtfOwnBranch = new javax.swing.JTextField();
        jtfBranchCash = new javax.swing.JTextField();
        jtfBranchCashCurrency = new javax.swing.JTextField();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del movimiento:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(12, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSysMoveType.setText("Movimiento:");
        jlSysMoveType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jlSysMoveType);

        jtfSysMoveType.setEditable(false);
        jtfSysMoveType.setFocusable(false);
        jtfSysMoveType.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel4.add(jtfSysMoveType);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jlDate);
        jPanel5.add(moDate);

        jPanel3.add(jPanel5);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner.setText("[Asociado]:*");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jlBizPartner);

        moKeyBizPartner.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel13.add(moKeyBizPartner);

        jbBizPartner.setText("...");
        jbBizPartner.setToolTipText("Buscar [F9]");
        jbBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbBizPartner);

        jPanel3.add(jPanel13);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDps.setText("Documento:*");
        jlDps.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jlDps);

        moKeyDps.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel15.add(moKeyDps);

        jtbDps.setText("+");
        jtbDps.setToolTipText("Todos los documentos");
        jtbDps.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jtbDps.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jtbDps);

        jPanel3.add(jPanel15);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDiverseMoveType.setText("Tipo mov.:*");
        jlDiverseMoveType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jlDiverseMoveType);

        moKeyDiverseMoveType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(moKeyDiverseMoveType);

        jPanel3.add(jPanel14);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmountCy.setText("Monto:*");
        jlAmountCy.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlAmountCy);
        jPanel6.add(moCurAmountCy);

        jPanel3.add(jPanel6);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("T. cambio:*");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlExchangeRate);

        moDecExchangeRate.setToolTipText("Tipo de cambio");
        jPanel9.add(moDecExchangeRate);

        jbExchangeRate.setText("...");
        jbExchangeRate.setToolTipText("Buscar tipo de cambio");
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbExchangeRate);

        jPanel3.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmount.setText("Monto ML:*");
        jlAmount.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlAmount);
        jPanel10.add(moCurAmount);

        jPanel3.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlModeOfPaymentType.setText("Forma pago:*");
        jlModeOfPaymentType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jlModeOfPaymentType);

        moKeyModeOfPaymentType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(moKeyModeOfPaymentType);

        moBoolAvailable.setText("Disponible");
        jPanel11.add(moBoolAvailable);

        jPanel3.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlValueType.setText("Respaldo:*");
        jlValueType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlValueType);

        moKeyValueType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel12.add(moKeyValueType);

        jPanel3.add(jPanel12);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSupporting.setText("Soporte:");
        jlSupporting.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlSupporting);

        moTextSupporting.setToolTipText("Soporte");
        jPanel7.add(moTextSupporting);

        jlCodeOwnInfo.setForeground(java.awt.Color.gray);
        jlCodeOwnInfo.setText("(e.g. ficha depósito, número de cheque o tarjeta)");
        jlCodeOwnInfo.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(jlCodeOwnInfo);

        jPanel3.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlText.setText("Concepto:*");
        jlText.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jlText);

        moTextText.setToolTipText("Concepto");
        moTextText.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel8.add(moTextText);

        jPanel3.add(jPanel8);

        jPanel1.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel53.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOwnBranch.setText("Cta. dinero:");
        jlOwnBranch.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel53.add(jlOwnBranch);

        jtfOwnBranch.setEditable(false);
        jtfOwnBranch.setToolTipText(DUtilConsts.TXT_BRANCH);
        jtfOwnBranch.setFocusable(false);
        jtfOwnBranch.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel53.add(jtfOwnBranch);

        jtfBranchCash.setEditable(false);
        jtfBranchCash.setToolTipText(DUtilConsts.TXT_BRANCH_CSH);
        jtfBranchCash.setFocusable(false);
        jtfBranchCash.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel53.add(jtfBranchCash);

        jtfBranchCashCurrency.setEditable(false);
        jtfBranchCashCurrency.setToolTipText(DUtilConsts.TXT_CURRENCY);
        jtfBranchCashCurrency.setFocusable(false);
        jtfBranchCashCurrency.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel53.add(jtfBranchCashCurrency);

        jPanel1.add(jPanel53, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {
        DGuiUtils.setWindowBounds(this, 800, 500);

        moDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDate.getText()), true);
        moKeyBizPartner.setKeySettings(miClient, DGuiUtils.getLabelName(jlBizPartner.getText()), true);
        moKeyBizPartner.setFieldButton(jbBizPartner);
        moKeyDps.setKeySettings(miClient, DGuiUtils.getLabelName(jlDps.getText()), true);
        moKeyDiverseMoveType.setKeySettings(miClient, DGuiUtils.getLabelName(jlDiverseMoveType.getText()), true);
        moCurAmountCy.setCompoundFieldSettings(miClient);
        moCurAmountCy.getField().setDecimalSettings(DGuiUtils.getLabelName(jlAmountCy.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecExchangeRate.setDecimalSettings(DGuiUtils.getLabelName(jlExchangeRate.getText()), DGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moCurAmount.setCompoundFieldSettings(miClient);
        moCurAmount.getField().setDecimalSettings(DGuiUtils.getLabelName(jlAmount.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moKeyModeOfPaymentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlModeOfPaymentType.getText()), true);
        moBoolAvailable.setBooleanSettings(DGuiUtils.getLabelName(moBoolAvailable.getText()), false);
        moKeyValueType.setKeySettings(miClient, DGuiUtils.getLabelName(jlValueType.getText()), true);
        moTextSupporting.setTextSettings(DGuiUtils.getLabelName(jlSupporting.getText()), 10, 0);
        moTextText.setTextSettings(DGuiUtils.getLabelName(jlText.getText()), 100);

        moFields.addField(moDate);
        moFields.addField(moKeyBizPartner);
        moFields.addField(moKeyDps);
        moFields.addField(moKeyDiverseMoveType);
        moFields.addField(moCurAmountCy.getField());
        moFields.addField(moDecExchangeRate);
        moFields.addField(moCurAmount.getField());
        moFields.addField(moKeyModeOfPaymentType);
        moFields.addField(moBoolAvailable);
        moFields.addField(moKeyValueType);
        moFields.addField(moTextSupporting);
        moFields.addField(moTextText);

        moFields.setFormButton(jbSave);
    }

    private void renderSysMoveTypeSettings() {
        int bizPartnerClass = DLibConsts.UNDEFINED;

        jtfSysMoveType.setText((String) miClient.getSession().readField(DModConsts.FS_SYS_MOV_TP, manSystemMoveTypeKey, DDbRegistry.FIELD_NAME));
        jtfSysMoveType.setCaretPosition(0);

        if (!DFinUtils.isSysMoveTypeForBranchCashBizPartnerMove(manSystemMoveTypeKey)) {
            jlBizPartner.setEnabled(false);
            jbBizPartner.setEnabled(false);
            moKeyBizPartner.setEnabled(false);
            moKeyBizPartner.removeAllItems();

            jlBizPartner.setText("Asociado:*");

            jlDiverseMoveType.setEnabled(false);
            moKeyDiverseMoveType.setEnabled(false);
            moKeyDiverseMoveType.resetField();
        }
        else {
            jlBizPartner.setEnabled(true);
            jbBizPartner.setEnabled(true);
            moKeyBizPartner.setEnabled(true);

            bizPartnerClass = DFinUtils.getBizPartnerClassForSysMoveType(manSystemMoveTypeKey);
            miClient.getSession().populateCatalogue(moKeyBizPartner, DModConsts.BU_BPR, bizPartnerClass, null);
            jlBizPartner.setText(DBprUtils.getBizPartnerClassNameSng(bizPartnerClass) + ":*");

            moDialogFindBizPartner = new DDialogFindBizPartner(miClient, bizPartnerClass);

            if (!DFinUtils.isSysMoveTypeForBranchCashBizPartnerDiverse(manSystemMoveTypeKey)) {
                jlDiverseMoveType.setEnabled(false);
                moKeyDiverseMoveType.setEnabled(false);
                moKeyDiverseMoveType.resetField();
            }
            else {
                jlDiverseMoveType.setEnabled(true);
                moKeyDiverseMoveType.setEnabled(true);
            }
        }
    }

    private void renderCurrencySettings() {
        manCurrencyKey = new int[] { moDps != null ? moDps.getFkCurrencyId() : moBranchCash.getFkCurrencyId() };

        moCurAmountCy.setCurrencyKey(manCurrencyKey);

        if (miClient.getSession().getSessionCustom().isLocalCurrency(manCurrencyKey)) {
            moCurAmount.getField().setEnabled(false);
            moDecExchangeRate.setEnabled(false);
            jbExchangeRate.setEnabled(false);
        }
        else {
            moCurAmount.getField().setEnabled(true);
            moDecExchangeRate.setEnabled(true);
            jbExchangeRate.setEnabled(true);
        }
    }

    private void computeValue() {
        moCurAmount.getField().setValue(moCurAmountCy.getField().getValue() * moDecExchangeRate.getValue());
    }

    private void actionBizPartner() {
        moDialogFindBizPartner.resetForm();
        moDialogFindBizPartner.initForm();
        moDialogFindBizPartner.setVisible(true);

        if (moDialogFindBizPartner.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
            if (moDialogFindBizPartner.getNewRegistries()) {
                miClient.getSession().populateCatalogue(moKeyBizPartner, DModConsts.BU_BPR, DTrnUtils.getBizPartnerClassByDpsCategory(mnFormSubtype), null);
            }
            moKeyBizPartner.setValue(moDialogFindBizPartner.getValue(DModConsts.BU_BPR));
            moKeyBizPartner.requestFocus();
        }
    }

    private void actionDps() {
        DGuiParams params = new DGuiParams();

        params.getParamsMap().put(DModSysConsts.PARAM_YEAR, mnOriginalYear);
        params.getParamsMap().put(DModSysConsts.PARAM_BPR_CL, DFinUtils.getBizPartnerClassForSysMoveType(manSystemMoveTypeKey));
        params.getParamsMap().put(DModSysConsts.PARAM_BPR, moKeyBizPartner.getValue()[0]);
        //params.getParamsMap().put(DModSysConsts.PARAM_CUR, moBranchCash.getFkCurrencyId());
        params.getParamsMap().put(DModSysConsts.PARAM_BKK_NUM_KEY, moRegistry.getPrimaryKey());
        params.getParamsMap().put(DModSysConsts.PARAM_BAL, DUtilConsts.BAL_CY); // document's currency balance

        if (!jtbDps.isSelected()) {
            miClient.getSession().populateCatalogue(moKeyDps, DModConsts.TX_ACC_PAY, DLibConsts.UNDEFINED, params);     // show only pending documents
        }
        else {
            miClient.getSession().populateCatalogue(moKeyDps, DModConsts.TX_ACC_PAY_COL, DLibConsts.UNDEFINED, params); // show all documents: pending and collected
        }
    }

    private void itemStateKeyBizPartner() {
        if (!DFinUtils.isSysMoveTypeForBranchCashPaymentDps(manSystemMoveTypeKey) || moKeyBizPartner.getSelectedIndex() <= 0) {
            jlDps.setEnabled(false);
            jtbDps.setEnabled(false);
            moKeyDps.setEnabled(false);

            jtbDps.setSelected(false);
            moKeyDps.removeAllItems();
        }
        else {
            jlDps.setEnabled(true);
            jtbDps.setEnabled(true);
            moKeyDps.setEnabled(true);

            actionDps();
        }
    }

    private void itemStateKeyDps() {
        String text = "";
        DTrnAmount amount = null;

        if (moKeyDps.getSelectedIndex() <= 0) {
            moDps = null;

            moCurAmountCy.getField().setValue(0d);
            moCurAmount.getField().setValue(0d);
            moDecExchangeRate.setValue(1d);
            moTextText.setValue("");
        }
        else {
            moDps = (DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, moKeyDps.getValue(), DDbConsts.MODE_VERBOSE);

            text = DFinUtils.getCashMoveNameAcronym(manSystemMoveTypeKey[0]) + " " + moDps.getBookkeepingText(miClient.getSession());
            if (text.length() > moTextText.getMaxLength()) {
                text = text.substring(0, moTextText.getMaxLength());
            }

            amount = DTrnUtils.getBalanceForDps(miClient.getSession(), mnOriginalYear, moKeyDps.getValue(), moRegistry.getPrimaryKey());

            moCurAmountCy.getField().setValue(amount.getAmountCy());
            moCurAmount.getField().setValue(amount.getAmount());
            moDecExchangeRate.setValue(amount.getAmountCy() == 0d ? 0d : (amount.getAmount() / amount.getAmountCy()));
            moTextText.setValue(text);
        }

        renderCurrencySettings();
    }

    private void itemStateKeyModeOfPaymentType() {
        if (moKeyModeOfPaymentType.getSelectedIndex() <= 0 || moKeyModeOfPaymentType.getValue()[0] == DModSysConsts.FS_MOP_TP_NA) {
            moBoolAvailable.setEnabled(false);
            moKeyValueType.setEnabled(false);
            moTextSupporting.setEditable(false);

            moBoolAvailable.resetField();
            moKeyValueType.resetField();
            moTextSupporting.resetField();
        }
        else {
            switch (moKeyModeOfPaymentType.getValue()[0]) {
                case DModSysConsts.FS_MOP_TP_CHK:
                    moBoolAvailable.setEnabled(true);
                    moBoolAvailable.setValue(true);
                    break;
                default:
                    moBoolAvailable.setEnabled(false);
                    moBoolAvailable.setValue(true);
            }

            switch (moKeyModeOfPaymentType.getValue()[0]) {
                case DModSysConsts.FS_MOP_TP_CSH:
                    moKeyValueType.setEnabled(false);
                    moKeyValueType.setValue(new int[] { DModSysConsts.FS_VAL_TP_CSH });
                    break;
                case DModSysConsts.FS_MOP_TP_CHK:
                    moKeyValueType.setEnabled(false);
                    moKeyValueType.setValue(new int[] { DModSysConsts.FS_VAL_TP_CHK });
                    break;
                default:
                    moKeyValueType.setEnabled(false);
                    moKeyValueType.setValue(new int[] { DModSysConsts.FS_VAL_TP_SUP });
            }

            switch (moKeyModeOfPaymentType.getValue()[0]) {
                case DModSysConsts.FS_MOP_TP_CSH:
                    moTextSupporting.setEditable(false);
                    moTextSupporting.resetField();
                    break;
                default:
                    moTextSupporting.setEditable(true);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel53;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbBizPartner;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JLabel jlAmount;
    private javax.swing.JLabel jlAmountCy;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlCodeOwnInfo;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDiverseMoveType;
    private javax.swing.JLabel jlDps;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlModeOfPaymentType;
    private javax.swing.JLabel jlOwnBranch;
    private javax.swing.JLabel jlSupporting;
    private javax.swing.JLabel jlSysMoveType;
    private javax.swing.JLabel jlText;
    private javax.swing.JLabel jlValueType;
    private javax.swing.JToggleButton jtbDps;
    private javax.swing.JTextField jtfBranchCash;
    private javax.swing.JTextField jtfBranchCashCurrency;
    private javax.swing.JTextField jtfOwnBranch;
    private javax.swing.JTextField jtfSysMoveType;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolAvailable;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurAmount;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurAmountCy;
    private sba.lib.gui.bean.DBeanFieldDate moDate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecExchangeRate;
    private sba.lib.gui.bean.DBeanFieldKey moKeyBizPartner;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDiverseMoveType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyDps;
    private sba.lib.gui.bean.DBeanFieldKey moKeyModeOfPaymentType;
    private sba.lib.gui.bean.DBeanFieldKey moKeyValueType;
    private sba.lib.gui.bean.DBeanFieldText moTextSupporting;
    private sba.lib.gui.bean.DBeanFieldText moTextText;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addAllListeners() {
        jbBizPartner.addActionListener(this);
        jtbDps.addActionListener(this);
        moKeyBizPartner.addItemListener(this);
        moKeyDps.addItemListener(this);
        moKeyModeOfPaymentType.addItemListener(this);
        moCurAmountCy.getField().getComponent().addFocusListener(this);
        moCurAmount.getField().getComponent().addFocusListener(this);
        moDecExchangeRate.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbBizPartner.removeActionListener(this);
        jtbDps.removeActionListener(this);
        moKeyBizPartner.removeItemListener(this);
        moKeyDps.removeItemListener(this);
        moKeyModeOfPaymentType.removeItemListener(this);
        moCurAmountCy.getField().getComponent().removeFocusListener(this);
        moCurAmount.getField().getComponent().removeFocusListener(this);
        moDecExchangeRate.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyDiverseMoveType, DModConsts.FS_DIV_MOV_TP, DLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyModeOfPaymentType, DModConsts.FS_MOP_TP, DLibConsts.UNDEFINED, new DGuiParams(DModConsts.FX_MOP_TP_COL));
        miClient.getSession().populateCatalogue(moKeyValueType, DModConsts.FS_VAL_TP, DLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        int[] key = null;
        DGuiClientSessionCustom sessionCustom = (DGuiClientSessionCustom) miClient.getSession().getSessionCustom();

        moRegistry = (DDbBookkeepingMoveCustom) registry;

        mnFormResult = DLibConsts.UNDEFINED;
        mbFirstActivation = true;

        if (moRegistry.isRegistryNew()) {
            // Validate if new registry can be created:

            if (sessionCustom.getBranchKey() == null) {
                mbCanShowForm = false;
                msCanShowFormMessage = DUtilConsts.ERR_MSG_USR_SES_BRA;
                return;
            }
            else if (sessionCustom.getBranchCashKey() == null) {
                mbCanShowForm = false;
                msCanShowFormMessage = DUtilConsts.ERR_MSG_USR_SES_BRA_CSH;
                return;
            }
        }

        // Set registry:

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");

            moRegistry.setDate(miClient.getSession().getWorkingDate());
            moRegistry.setFkSystemMoveClassId(manSystemMoveTypeKey[0]);
            moRegistry.setFkSystemMoveTypeId(manSystemMoveTypeKey[1]);

            key = sessionCustom.getBranchKey();
            moRegistry.setFkOwnerBizPartnerId(key[0]);
            moRegistry.setFkOwnerBranchId(key[1]);

            key = sessionCustom.getBranchCashKey();
            moBkkMoveCash = new DDbBookkeepingMove();
            moBkkMoveComplement = null;

            moBkkMoveCash.setFkCashBizPartnerId_n(key[0]);
            moBkkMoveCash.setFkCashBranchId_n(key[1]);
            moBkkMoveCash.setFkCashCashId_n(key[2]);
        }
        else {
            jtfRegistryKey.setText(DLibUtils.textKey(moRegistry.getPrimaryKey()));

            manSystemMoveTypeKey = moRegistry.getSystemMoveKey();

            moBkkMoveCash = moRegistry.getChildMoveBySortingPos(1);         // first move is related to branch cash
            moBkkMoveComplement = moRegistry.getChildMoveBySortingPos(2);   // second move is complement one
        }

        setFormEditable(true);  // enable all controls before setting form values

        moBranchCash = (DDbBranchCash) miClient.getSession().readRegistry(DModConsts.CU_CSH, moBkkMoveCash.getBranchCashKey_n(), DDbConsts.MODE_VERBOSE);
        mnOriginalYear = DLibTimeUtils.digestYear(moRegistry.getDate())[0];

        if (moRegistry.isRegistryNew()) {
            if (miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { moBranchCash.getFkCurrencyId() })) {
                moBkkMoveCash.setExchangeRate(1d);
            }

            if (DFinUtils.isSysMoveTypeForBranchCashOnlyCash(manSystemMoveTypeKey)) {
                moBkkMoveCash.setAvailable(true);
                moBkkMoveCash.setFkModeOfPaymentTypeId(DModSysConsts.FS_MOP_TP_CSH);
                moBkkMoveCash.setFkValueTypeId(DModSysConsts.FS_VAL_TP_CSH);
            }
        }

        renderSysMoveTypeSettings();

        moKeyBizPartner.setValue(moBkkMoveCash.getBizPartnerKey_n());
        itemStateKeyBizPartner();

        moKeyDps.setValue(new int[] { moBkkMoveCash.getFkDpsInvId_n() });
        itemStateKeyDps();

        moKeyModeOfPaymentType.setValue(new int[] { moBkkMoveCash.getFkModeOfPaymentTypeId() });
        itemStateKeyModeOfPaymentType();

        moDate.setValue(moRegistry.getDate());
        moTextSupporting.setValue(moBkkMoveCash.getSupporting());
        moTextText.setValue(moBkkMoveCash.getText());
        moCurAmount.getField().setValue(DFinUtils.isSysMoveTypeForDebit(manSystemMoveTypeKey) ? moBkkMoveCash.getDebit() : moBkkMoveCash.getCredit());
        moDecExchangeRate.setValue(moBkkMoveCash.getExchangeRate());
        moCurAmountCy.getField().setValue(DFinUtils.isSysMoveTypeForDebit(manSystemMoveTypeKey) ? moBkkMoveCash.getDebitCy() : moBkkMoveCash.getCreditCy());
        moBoolAvailable.setValue(moBkkMoveCash.isAvailable());
        moKeyDiverseMoveType.setValue(new int[] { moBkkMoveCash.getFkDiverseMoveTypeId() });
        moKeyValueType.setValue(new int[] { moBkkMoveCash.getFkValueTypeId() });

        jtfOwnBranch.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, moRegistry.getCompanyBranchKey(), DDbRegistry.FIELD_CODE));
        jtfBranchCash.setText(moBranchCash.getCode());
        jtfBranchCashCurrency.setText(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { moBranchCash.getFkCurrencyId() }));
        jtfOwnBranch.setCaretPosition(0);
        jtfBranchCash.setCaretPosition(0);
        jtfBranchCashCurrency.setCaretPosition(0);

        addAllListeners();
    }

    @Override
    public DDbBookkeepingMoveCustom getRegistry() throws Exception {
        DDbBookkeepingMoveCustom registry = moRegistry.clone();
        DDbAbpBranchCash abpBranchCash = DFinUtils.readAbpBranchCash(miClient.getSession(), moBranchCash.getPrimaryKey());

        if (registry.isRegistryNew()) {
            registry.setPkBookkeepingYearId(mnOriginalYear);
            registry.setPkBookkeepingNumberId(0);
        }

        registry.setDate(moDate.getValue());

        if (moBkkMoveCash.isRegistryNew()) {
            moBkkMoveCash.setPkYearId(mnOriginalYear);
            moBkkMoveCash.setPkMoveId(0);
        }

        //moBookkeepingMove.setDate(?);     // value will be set by bookkeeping custom move object
        moBkkMoveCash.setSupporting(moTextSupporting.getValue());
        moBkkMoveCash.setReference("");
        moBkkMoveCash.setText(moTextText.getValue());

        if (DFinUtils.isSysMoveTypeForDebit(manSystemMoveTypeKey)) {
            moBkkMoveCash.setDebit(moCurAmount.getField().getValue());
            moBkkMoveCash.setCredit(0);
            moBkkMoveCash.setDebitCy(moCurAmountCy.getField().getValue());
            moBkkMoveCash.setCreditCy(0);
        }
        else {
            moBkkMoveCash.setDebit(0);
            moBkkMoveCash.setCredit(moCurAmount.getField().getValue());
            moBkkMoveCash.setDebitCy(0);
            moBkkMoveCash.setCreditCy(moCurAmountCy.getField().getValue());
        }

        moBkkMoveCash.setExchangeRate(moDecExchangeRate.getValue());
        moBkkMoveCash.setUnits(0);
        //moBkkMoveCash.setSortingPos(?);               // value will be set by bookkeeping custom move object
        moBkkMoveCash.setExchangeRateDifference(false); // XXX Code for future versions
        moBkkMoveCash.setAvailable(moBoolAvailable.getValue());
        moBkkMoveCash.setDeleted(false);
        moBkkMoveCash.setSystem(false);
        moBkkMoveCash.setFkAccountId(abpBranchCash.getFkAccountCashId());
        moBkkMoveCash.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_ENT_CSH);
        moBkkMoveCash.setFkSystemMoveClassId(manSystemMoveTypeKey[0]);
        moBkkMoveCash.setFkSystemMoveTypeId(manSystemMoveTypeKey[1]);
        moBkkMoveCash.setFkDiverseMoveTypeId(!moKeyDiverseMoveType.isEnabled() ? DModSysConsts.FS_DIV_MOV_TP_NA : moKeyDiverseMoveType.getValue()[0]);
        moBkkMoveCash.setFkCurrencyId(manCurrencyKey[0]);
        moBkkMoveCash.setFkPaymentTypeId(DModSysConsts.FS_PAY_TP_NA);
        moBkkMoveCash.setFkModeOfPaymentTypeId(moKeyModeOfPaymentType.getValue()[0]);
        moBkkMoveCash.setFkValueTypeId(moKeyValueType.getValue()[0]);
        //moBkkMoveCash.setFkOwnerBizPartnerId(?);      // value will be set by bookkeeping custom move object
        //moBkkMoveCash.setFkOwnerBranchId(?);          // value will be set by bookkeeping custom move object
        moBkkMoveCash.setFkCashBizPartnerId_n(moBranchCash.getPkBizPartnerId());
        moBkkMoveCash.setFkCashBranchId_n(moBranchCash.getPkBranchId());
        moBkkMoveCash.setFkCashCashId_n(moBranchCash.getPkCashId());
        moBkkMoveCash.setFkWarehouseBizPartnerId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkWarehouseBranchId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkWarehouseWarehouseId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkBizPartnerBizPartnerId_n(moKeyBizPartner.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyBizPartner.getValue()[0]);
        moBkkMoveCash.setFkBizPartnerBranchId_n(moKeyBizPartner.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : DUtilConsts.BPR_BRA_ID);
        moBkkMoveCash.setFkDpsInvId_n(moKeyDps.getSelectedIndex() <= 0 ? DLibConsts.UNDEFINED : moKeyDps.getValue()[0]);
        moBkkMoveCash.setFkDpsAdjId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkDfrId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkIogId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkIomId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkPusId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkItemId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkItemAuxId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkUnitId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkRecordYearId_n(DLibConsts.UNDEFINED);
        moBkkMoveCash.setFkRecordRecordId_n(DLibConsts.UNDEFINED);
        //moBookkeepingMove.setFkBookkeepingYearId_n(?);    // value will be set by bookkeeping custom move object
        //moBookkeepingMove.setFkBookkeepingNumberId_n(?);  // value will be set by bookkeeping custom move object
        moBkkMoveCash.setFkUserAvailableId(!moBoolAvailable.getValue() ? DUtilConsts.USR_NA_ID : miClient.getSession().getUser().getPkUserId());

        registry.getChildMoves().clear();
        registry.getChildMoves().add(moBkkMoveCash);
        registry.getChildMoves().add(moBkkMoveCash.createComplement(miClient.getSession()));

        if (moBkkMoveComplement != null) {
            registry.getChildMoves().get(1).setPrimaryKey(moBkkMoveComplement.getPrimaryKey());
        }

        if (moKeyDps.getSelectedIndex() > 0) {
            registry.getChildMoves().get(1).setReference(moDps.getDpsReference(miClient.getSession()));
        }

        return registry;
    }

    @Override
    public DGuiValidation validateForm() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (mnOriginalYear != DLibTimeUtils.digestYear(moDate.getValue())[0]) {
                validation.setMessage("El año de la fecha original es " + mnOriginalYear + ", por lo que el año del campo '" + DGuiUtils.getLabelName(jlDate.getText()) + "' debe ser igualmente " + mnOriginalYear + ".\n"
                        + "Si desea capturar una fecha de otro año, pruebe cambiando la fecha de trabajo de su sesión de usuario, y capture nuevamente el movimiento.");
                validation.setComponent(moDate);
            }
            else if (moKeyDiverseMoveType.isEnabled() && moKeyDiverseMoveType.getValue()[0] == DModSysConsts.FS_DIV_MOV_TP_NA) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlDiverseMoveType.getText()) + "'.");
                validation.setComponent(moKeyDiverseMoveType);
            }
            else if (moKeyModeOfPaymentType.isEnabled() && moKeyModeOfPaymentType.getValue()[0] == DModSysConsts.FS_MOP_TP_NA) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlModeOfPaymentType.getText()) + "'.");
                validation.setComponent(moKeyModeOfPaymentType);
            }
            else if (moKeyValueType.isEnabled() && moKeyValueType.getValue()[0] == DModSysConsts.FS_VAL_TP_NA) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ + "'" + DGuiUtils.getLabelName(jlValueType.getText()) + "'.");
                validation.setComponent(moKeyValueType);
            }
        }

        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        DDbDps dps = null;

        removeAllListeners();

        switch (type) {
            case DGuiConsts.PARAM_SYS_MOV_TP:
                manSystemMoveTypeKey = (int[]) value;
                break;
            case DGuiConsts.PARAM_DPS:
                dps = (DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, (int[]) value);
                moKeyBizPartner.setValue(dps.getBizPartnerKey());
                itemStateKeyBizPartner();
                moKeyDps.setValue(dps.getPrimaryKey());
                itemStateKeyDps();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        addAllListeners();
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbBizPartner) {
                actionBizPartner();
            }
        }
        else if (e.getSource() instanceof JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (toggleButton == jtbDps) {
                actionDps();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyBizPartner) {
                    itemStateKeyBizPartner();
                }
                else if (field == moKeyDps) {
                    itemStateKeyDps();
                }
                else if (field == moKeyModeOfPaymentType) {
                    itemStateKeyModeOfPaymentType();
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();
            if (field == moCurAmountCy.getField()) {
                computeValue();
            }
            else if (field == moCurAmount.getField()) {
                computeValue();
            }
            else if (field == moDecExchangeRate) {
                computeValue();
            }
        }
    }
}
