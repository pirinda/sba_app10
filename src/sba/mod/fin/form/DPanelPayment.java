/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DPanelPayment.java
 *
 * Created on 8/12/2011, 08:18:21 AM
 */

package sba.mod.fin.form;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import sba.gui.DGuiClientSessionCustom;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.DLibTimeUtils;
import sba.lib.DLibUtils;
import sba.lib.db.DDbRegistry;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.lib.gui.DGuiParams;
import sba.lib.gui.DGuiUtils;
import sba.lib.gui.DGuiValidation;
import sba.lib.gui.bean.DBeanFieldDecimal;
import sba.lib.gui.bean.DBeanFieldKey;
import sba.lib.gui.bean.DBeanPanel;
import sba.mod.DModConsts;
import sba.mod.DModSysConsts;
import sba.mod.cfg.db.DDbBranchCash;
import sba.mod.fin.db.DDbAbpBizPartner;
import sba.mod.fin.db.DDbAbpBranchCash;
import sba.mod.fin.db.DDbBookkeepingMove;
import sba.mod.fin.db.DDbBookkeepingMoveCustom;
import sba.mod.fin.db.DFinConsts;
import sba.mod.fin.db.DFinUtils;
import sba.mod.trn.db.DDbDps;
import sba.mod.trn.db.DTrnUtils;

/**
 *
 * @author Sergio Flores
 */
public class DPanelPayment extends DBeanPanel implements ActionListener, ItemListener, FocusListener {

    private static final int MOVE_DBT = 1;
    private static final int MOVE_CDT = 2;

    private int mnYear;
    private int[] manSystemMoveTypeKey;
    private int[] manBizPartnerKey;
    private int[] manBizPartnerBranchKey;
    private int mnBizPartnerClass;
    private DDbDps moDps;
    private int mnLocalCurrency;
    private int mnCurrency1;
    private int mnCurrency2;
    private boolean mbIsBothPaymentsApplying;
    private boolean mbIsExchangeRateDifference;
    private DDbBranchCash moBranchCashMain;
    private DDbBranchCash moBranchCashAux;
    private DGuiClientSessionCustom moSessionCustom;

    /** Creates new form DPanelPayment */
    public DPanelPayment() {
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jpSystemMove = new javax.swing.JPanel();
        jlSystemMoveType = new javax.swing.JLabel();
        jtfSystemMoveType = new javax.swing.JTextField();
        jpDate = new javax.swing.JPanel();
        jlDateDate = new javax.swing.JLabel();
        moDateDate = new sba.lib.gui.bean.DBeanFieldDate();
        jpPayment1 = new javax.swing.JPanel();
        jlPayment1 = new javax.swing.JLabel();
        moCurPayment1Cy = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        moDecExchangeRate1 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jbExchangeRate1 = new javax.swing.JButton();
        moCurPayment1 = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jtfBranchCode1 = new javax.swing.JTextField();
        jtfBranchCashCode1 = new javax.swing.JTextField();
        jtfBranchCashCurrencyCode1 = new javax.swing.JTextField();
        jpPayment2 = new javax.swing.JPanel();
        jlPayment2 = new javax.swing.JLabel();
        moCurPayment2Cy = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        moDecExchangeRate2 = new sba.lib.gui.bean.DBeanFieldDecimal();
        jbExchangeRate2 = new javax.swing.JButton();
        moCurPayment2 = new sba.lib.gui.bean.DBeanCompoundFieldCurrency();
        jtfBranchCode2 = new javax.swing.JTextField();
        jtfBranchCashCode2 = new javax.swing.JTextField();
        jtfBranchCashCurrencyCode2 = new javax.swing.JTextField();
        jpModeOfPayment = new javax.swing.JPanel();
        jlModeOfPaymentType = new javax.swing.JLabel();
        moKeyModeOfPaymentType = new sba.lib.gui.bean.DBeanFieldKey();
        moBoolAvailable = new sba.lib.gui.bean.DBeanFieldBoolean();
        moTextSupporting = new sba.lib.gui.bean.DBeanFieldText();
        jpText = new javax.swing.JPanel();
        jlText = new javax.swing.JLabel();
        moTextText = new sba.lib.gui.bean.DBeanFieldText();

        setLayout(new java.awt.BorderLayout());

        jPanel.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jpSystemMove.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSystemMoveType.setText("Movimiento:");
        jlSystemMoveType.setPreferredSize(new java.awt.Dimension(75, 23));
        jpSystemMove.add(jlSystemMoveType);

        jtfSystemMoveType.setEditable(false);
        jtfSystemMoveType.setToolTipText("Sucursal");
        jtfSystemMoveType.setFocusable(false);
        jtfSystemMoveType.setPreferredSize(new java.awt.Dimension(200, 23));
        jpSystemMove.add(jtfSystemMoveType);

        jPanel.add(jpSystemMove);

        jpDate.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDate.setText("Fecha mov.:*");
        jlDateDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDate.add(jlDateDate);
        jpDate.add(moDateDate);

        jPanel.add(jpDate);

        jpPayment1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayment1.setText("[Monto 1]:*");
        jlPayment1.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPayment1.add(jlPayment1);
        jpPayment1.add(moCurPayment1Cy);

        moDecExchangeRate1.setToolTipText("Tipo de cambio");
        moDecExchangeRate1.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPayment1.add(moDecExchangeRate1);

        jbExchangeRate1.setText("...");
        jbExchangeRate1.setToolTipText("Buscar tipo de cambio");
        jbExchangeRate1.setPreferredSize(new java.awt.Dimension(23, 23));
        jpPayment1.add(jbExchangeRate1);
        jpPayment1.add(moCurPayment1);

        jtfBranchCode1.setEditable(false);
        jtfBranchCode1.setToolTipText(DUtilConsts.TXT_BRANCH);
        jtfBranchCode1.setFocusable(false);
        jtfBranchCode1.setPreferredSize(new java.awt.Dimension(50, 23));
        jpPayment1.add(jtfBranchCode1);

        jtfBranchCashCode1.setEditable(false);
        jtfBranchCashCode1.setToolTipText(DUtilConsts.TXT_BRANCH_CSH);
        jtfBranchCashCode1.setFocusable(false);
        jtfBranchCashCode1.setPreferredSize(new java.awt.Dimension(50, 23));
        jpPayment1.add(jtfBranchCashCode1);

        jtfBranchCashCurrencyCode1.setEditable(false);
        jtfBranchCashCurrencyCode1.setToolTipText(DUtilConsts.TXT_CURRENCY);
        jtfBranchCashCurrencyCode1.setFocusable(false);
        jtfBranchCashCurrencyCode1.setPreferredSize(new java.awt.Dimension(35, 23));
        jpPayment1.add(jtfBranchCashCurrencyCode1);

        jPanel.add(jpPayment1);

        jpPayment2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayment2.setText("[Monto 2]:*");
        jlPayment2.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPayment2.add(jlPayment2);
        jpPayment2.add(moCurPayment2Cy);

        moDecExchangeRate2.setToolTipText("Tipo de cambio");
        moDecExchangeRate2.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPayment2.add(moDecExchangeRate2);

        jbExchangeRate2.setText("...");
        jbExchangeRate2.setToolTipText("Buscar tipo de cambio");
        jbExchangeRate2.setPreferredSize(new java.awt.Dimension(23, 23));
        jpPayment2.add(jbExchangeRate2);
        jpPayment2.add(moCurPayment2);

        jtfBranchCode2.setEditable(false);
        jtfBranchCode2.setToolTipText(DUtilConsts.TXT_BRANCH);
        jtfBranchCode2.setFocusable(false);
        jtfBranchCode2.setPreferredSize(new java.awt.Dimension(50, 23));
        jpPayment2.add(jtfBranchCode2);

        jtfBranchCashCode2.setEditable(false);
        jtfBranchCashCode2.setToolTipText(DUtilConsts.TXT_BRANCH_CSH);
        jtfBranchCashCode2.setFocusable(false);
        jtfBranchCashCode2.setPreferredSize(new java.awt.Dimension(50, 23));
        jpPayment2.add(jtfBranchCashCode2);

        jtfBranchCashCurrencyCode2.setEditable(false);
        jtfBranchCashCurrencyCode2.setToolTipText(DUtilConsts.TXT_CURRENCY);
        jtfBranchCashCurrencyCode2.setFocusable(false);
        jtfBranchCashCurrencyCode2.setPreferredSize(new java.awt.Dimension(35, 23));
        jpPayment2.add(jtfBranchCashCurrencyCode2);

        jPanel.add(jpPayment2);

        jpModeOfPayment.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlModeOfPaymentType.setText("Forma pago:*");
        jlModeOfPaymentType.setPreferredSize(new java.awt.Dimension(75, 23));
        jpModeOfPayment.add(jlModeOfPaymentType);

        moKeyModeOfPaymentType.setPreferredSize(new java.awt.Dimension(150, 23));
        jpModeOfPayment.add(moKeyModeOfPaymentType);

        moBoolAvailable.setText("Disponible");
        jpModeOfPayment.add(moBoolAvailable);

        moTextSupporting.setToolTipText("Soporte");
        moTextSupporting.setPreferredSize(new java.awt.Dimension(140, 23));
        jpModeOfPayment.add(moTextSupporting);

        jPanel.add(jpModeOfPayment);

        jpText.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlText.setText("Concepto:*");
        jlText.setPreferredSize(new java.awt.Dimension(75, 23));
        jpText.add(jlText);

        moTextText.setToolTipText("Concepto");
        moTextText.setPreferredSize(new java.awt.Dimension(400, 23));
        jpText.add(moTextText);

        jPanel.add(jpText);

        add(jPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsCustom() {

    }

    private void computePayment1() {
        moCurPayment1.getField().setValue(DLibUtils.round(moCurPayment1Cy.getField().getValue() * moDecExchangeRate1.getValue(), DLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
    }

    private void computePayment2() {
        moCurPayment2.getField().setValue(DLibUtils.round(moCurPayment2Cy.getField().getValue() * moDecExchangeRate2.getValue(), DLibUtils.getDecimalFormatAmount().getMaximumFractionDigits()));
    }

    private void computeExchangeRate1() {
        moDecExchangeRate1.setValue(moCurPayment1Cy.getField().getValue() == 0 ? 0 : DLibUtils.round(moCurPayment1.getField().getValue() / moCurPayment1Cy.getField().getValue(), DLibUtils.getDecimalFormatExchangeRate().getMaximumFractionDigits()));
    }

    private void computeExchangeRate2() {
        moDecExchangeRate2.setValue(moCurPayment2Cy.getField().getValue() == 0 ? 0 : DLibUtils.round(moCurPayment2.getField().getValue() / moCurPayment2Cy.getField().getValue(), DLibUtils.getDecimalFormatExchangeRate().getMaximumFractionDigits()));
    }

    private void preparePaymentFields() {
        if (mnCurrency2 == DLibConsts.UNDEFINED || mnCurrency1 == mnCurrency2) {
            moCurPayment2Cy.getField().setEditable(false);
            moCurPayment2.getField().setEditable(false);
            moDecExchangeRate2.setEnabled(false);
            jbExchangeRate2.setEnabled(false);
        }
    }

    private DDbBookkeepingMove createBookkeepingMove(final int moveType) throws Exception {
        DDbAbpBizPartner abpBizPartner = null;
        DDbAbpBranchCash abpBranchCash = null;
        DDbBookkeepingMove move = new DDbBookkeepingMove();

        move.setPkYearId(DLibTimeUtils.digestYear(moDateDate.getValue())[0]);
        move.setPkMoveId(0);
        move.setDate(moDateDate.getValue());
        move.setSupporting(moTextSupporting.getValue());
        move.setReference(moDps == null ? "" : moDps.getDpsReference(miClient.getSession()));
        move.setText(moTextText.getValue());

        /*
         * USE CASE:            GUI_FIELDS_1        GUI_FIELDS_2            MOVE_DBT            MOVE_CDT            Combination
         * a) Payment move:     Business partner    Cash main       In      Cash main           Business partner    Fields 2 - Fields 1
         *                                                          Out     Business partner    Cash main           Fields 1 - Fields 2
         * b) Branch cash move: Cash main           -               In      Cash main           Account             Fields 1 - Fields 1
         *                                                          Out     Account             Cash main           Fields 1 - Fields 1
         * c) Transfer move:    Cash main           Cash aux        In      Cash main           Cash aux            Fields 1 - Fields 2     << non applying
         *                                                          Out     Cash aux            Cash main           Fields 2 - Fields 1
         */

        switch (moveType) {
            case MOVE_DBT:
                if (DFinUtils.isSysMoveTypeForBranchCashBizPartnerMoveOut(manSystemMoveTypeKey) ||
                    DFinUtils.isSysMoveTypeForBranchCashMove(manSystemMoveTypeKey) ||
                    DFinUtils.isSysMoveTypeForBranchCashTransferIn(manSystemMoveTypeKey)) {
                    // Debit amount in fields 1:

                    move.setDebit(moCurPayment1.getField().getValue());
                    move.setCredit(0);
                    move.setExchangeRate(moDecExchangeRate1.getValue());
                    move.setDebitCy(moCurPayment1Cy.getField().getValue());
                    move.setCreditCy(0);

                    move.setFkCurrencyId(mnCurrency1);
                }
                else {
                    // Debit amount in fields 2:

                    move.setDebit(moCurPayment2.getField().getValue());
                    move.setCredit(0);
                    move.setExchangeRate(moDecExchangeRate2.getValue());
                    move.setDebitCy(moCurPayment2Cy.getField().getValue());
                    move.setCreditCy(0);

                    move.setFkCurrencyId(mnCurrency2);
                }
                break;

            case MOVE_CDT:
                if (DFinUtils.isSysMoveTypeForBranchCashBizPartnerMoveIn(manSystemMoveTypeKey) ||
                    DFinUtils.isSysMoveTypeForBranchCashMove(manSystemMoveTypeKey) ||
                    DFinUtils.isSysMoveTypeForBranchCashTransferOut(manSystemMoveTypeKey)) {
                    // Credit amount in fields 1:

                    move.setDebit(0);
                    move.setCredit(moCurPayment1.getField().getValue());
                    move.setExchangeRate(moDecExchangeRate1.getValue());
                    move.setDebitCy(0);
                    move.setCreditCy(moCurPayment1Cy.getField().getValue());

                    move.setFkCurrencyId(mnCurrency1);
                }
                else {
                    // Credit amount in fields 2:

                    move.setDebit(0);
                    move.setCredit(moCurPayment2.getField().getValue());
                    move.setExchangeRate(moDecExchangeRate2.getValue());
                    move.setDebitCy(0);
                    move.setCreditCy(moCurPayment2Cy.getField().getValue());

                    move.setFkCurrencyId(mnCurrency2);
                }
                break;

            default:
                throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        move.setUnits(0);
        move.setSortingPos(0);
        move.setExchangeRateDifference(mbIsExchangeRateDifference);
        move.setAvailable(moBoolAvailable.getValue());
        move.setDeleted(false);
        move.setSystem(false);

        switch (moveType) {
            case MOVE_DBT:
                if (DFinUtils.isSysMoveTypeForBranchCashBizPartnerMoveIn(manSystemMoveTypeKey) ||
                    DFinUtils.isSysMoveTypeForBranchCashMoveIn(manSystemMoveTypeKey) ||
                    DFinUtils.isSysMoveTypeForBranchCashTransferIn(manSystemMoveTypeKey)) {
                    abpBranchCash = DFinUtils.readAbpBranchCash(miClient.getSession(), moBranchCashMain.getPrimaryKey());
                    move.setFkAccountId(abpBranchCash.getFkAccountCashId());
                    move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_ENT_CSH);
                }
                else if (DFinUtils.isSysMoveTypeForBranchCashBizPartnerMoveOut(manSystemMoveTypeKey)) {
                    abpBizPartner = DFinUtils.readAbpBizPartner(miClient.getSession(), manBizPartnerKey, mnBizPartnerClass);

                    if /**/ (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_VEN_PAY)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_VEN);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_CUS_PAY)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_CUS);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_VEN_ADV)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerAdvanceId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_VEN);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_CUS_ADV)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerAdvanceId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_CUS);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_CDR_PAY)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_CDR);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_DBR_PAY)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_DBR);
                    }
                }
                else if (DFinUtils.isSysMoveTypeForBranchCashMoveOut(manSystemMoveTypeKey)) {
                    abpBranchCash = DFinUtils.readAbpBranchCash(miClient.getSession(), moBranchCashMain.getPrimaryKey());

                    if /**/ (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_EQY)) {
                        move.setFkAccountId(abpBranchCash.getFkAccountOutOwnersEquityId());
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_EXR)) {
                        move.setFkAccountId(abpBranchCash.getFkAccountOutExchangeRateId());
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MO_ADJ)) {
                        move.setFkAccountId(abpBranchCash.getFkAccountOutAdjustmentId());
                    }

                    move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_NA);
                }
                else if (DFinUtils.isSysMoveTypeForBranchCashTransferOut(manSystemMoveTypeKey)) {
                    abpBranchCash = DFinUtils.readAbpBranchCash(miClient.getSession(), moBranchCashAux.getPrimaryKey());
                    move.setFkAccountId(abpBranchCash.getFkAccountCashId());
                    move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_ENT_CSH);
                }
                else {
                    throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
                }
                break;

            case MOVE_CDT:
                if (DFinUtils.isSysMoveTypeForBranchCashBizPartnerMoveOut(manSystemMoveTypeKey) ||
                    DFinUtils.isSysMoveTypeForBranchCashMoveOut(manSystemMoveTypeKey) ||
                    DFinUtils.isSysMoveTypeForBranchCashTransferOut(manSystemMoveTypeKey)) {
                    abpBranchCash = DFinUtils.readAbpBranchCash(miClient.getSession(), moBranchCashMain.getPrimaryKey());
                    move.setFkAccountId(abpBranchCash.getFkAccountCashId());
                    move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_ENT_CSH);
                }
                else if (DFinUtils.isSysMoveTypeForBranchCashBizPartnerMoveIn(manSystemMoveTypeKey)) {
                    abpBizPartner = DFinUtils.readAbpBizPartner(miClient.getSession(), manBizPartnerKey, mnBizPartnerClass);

                    if /**/ (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_VEN_PAY)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_VEN);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_CUS_PAY)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_CUS);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_VEN_ADV)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerAdvanceId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_VEN);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_CUS_ADV)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerAdvanceId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_CUS);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_CDR_PAY)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_CDR);
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_DBR_PAY)) {
                        move.setFkAccountId(abpBizPartner.getFkAccountBizPartnerId());
                        move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_BPR_DBR);
                    }
                }
                else if (DFinUtils.isSysMoveTypeForBranchCashMoveIn(manSystemMoveTypeKey)) {
                    abpBranchCash = DFinUtils.readAbpBranchCash(miClient.getSession(), moBranchCashMain.getPrimaryKey());

                    if /**/ (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_EQY)) {
                        move.setFkAccountId(abpBranchCash.getFkAccountOutOwnersEquityId());
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_EXR)) {
                        move.setFkAccountId(abpBranchCash.getFkAccountOutExchangeRateId());
                    }
                    else if (DLibUtils.compareKeys(manSystemMoveTypeKey, DModSysConsts.FS_SYS_MOV_TP_MI_ADJ)) {
                        move.setFkAccountId(abpBranchCash.getFkAccountOutAdjustmentId());
                    }

                    move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_NA);
                }
                else if (DFinUtils.isSysMoveTypeForBranchCashTransferIn(manSystemMoveTypeKey)) {
                    abpBranchCash = DFinUtils.readAbpBranchCash(miClient.getSession(), moBranchCashAux.getPrimaryKey());
                    move.setFkAccountId(abpBranchCash.getFkAccountCashId());
                    move.setFkSystemAccountTypeId(DModSysConsts.FS_SYS_ACC_TP_ENT_CSH);
                }
                else {
                    throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
                }
                break;

            default:
                throw new Exception(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        move.setFkSystemMoveClassId(manSystemMoveTypeKey[0]);
        move.setFkSystemMoveTypeId(manSystemMoveTypeKey[1]);
        move.setFkDiverseMoveTypeId(DModSysConsts.FS_DIV_MOV_TP_NA);

        move.setFkPaymentTypeId(DModSysConsts.FS_PAY_TP_NA);
        move.setFkModeOfPaymentTypeId(moKeyModeOfPaymentType.getValue()[0]);
        move.setFkValueTypeId(DModSysConsts.FS_VAL_TP_NA);
        move.setFkOwnerBizPartnerId(moSessionCustom.getBranchKey()[0]);
        move.setFkOwnerBranchId(moSessionCustom.getBranchKey()[1]);
        move.setFkCashBizPartnerId_n(moSessionCustom.getBranchCashKey()[0]);
        move.setFkCashBranchId_n(moSessionCustom.getBranchCashKey()[1]);
        move.setFkCashCashId_n(moSessionCustom.getBranchCashKey()[2]);
        move.setFkWarehouseBizPartnerId_n(DLibConsts.UNDEFINED);
        move.setFkWarehouseBranchId_n(DLibConsts.UNDEFINED);
        move.setFkWarehouseWarehouseId_n(DLibConsts.UNDEFINED);
        move.setFkBizPartnerBizPartnerId_n(manBizPartnerBranchKey == null ? DLibConsts.UNDEFINED : manBizPartnerBranchKey[0]);
        move.setFkBizPartnerBranchId_n(manBizPartnerBranchKey == null ? DLibConsts.UNDEFINED : manBizPartnerBranchKey[1]);
        move.setFkDpsInvId_n(moDps == null ? DLibConsts.UNDEFINED : moDps.getPkDpsId());
        move.setFkDpsAdjId_n(DLibConsts.UNDEFINED);
        move.setFkDfrId_n(DLibConsts.UNDEFINED);
        move.setFkIogId_n(DLibConsts.UNDEFINED);
        move.setFkIomId_n(DLibConsts.UNDEFINED);
        move.setFkPusId_n(DLibConsts.UNDEFINED);
        move.setFkItemId_n(DLibConsts.UNDEFINED);
        move.setFkItemAuxId_n(DLibConsts.UNDEFINED);
        move.setFkUnitId_n(DLibConsts.UNDEFINED);
        move.setFkRecordYearId_n(DLibConsts.UNDEFINED);
        move.setFkRecordRecordId_n(DLibConsts.UNDEFINED);
        move.setFkBookkeepingYearId_n(DLibConsts.UNDEFINED);
        move.setFkBookkeepingNumberId_n(DLibConsts.UNDEFINED);
        move.setFkUserAvailableId(DUtilConsts.USR_NA_ID);
        move.setFkUserInsertId(DUtilConsts.USR_NA_ID);
        move.setFkUserUpdateId(DUtilConsts.USR_NA_ID);
        move.setTsUserAvailable(null);
        move.setTsUserInsert(null);
        move.setTsUserUpdate(null);

        return move;
    }

    private void actionExchangeRate1() {

    }

    private void actionExchangeRate2() {

    }

    private void focusLostCurPayment1Cy() {
        computePayment1();

        if (mnCurrency2 == mnLocalCurrency) {
            moCurPayment2Cy.getField().setValue(moCurPayment1.getField().getValue());   // input shortcut
            computePayment2();
        }
        else if (mnCurrency1 == mnCurrency2) {
            moCurPayment2Cy.getField().setValue(moCurPayment1Cy.getField().getValue());
            computePayment2();
        }
    }

    private void focusLostDecExchangeRate1() {
        computePayment1();

        if (mnCurrency2 == mnLocalCurrency) {
            moCurPayment2Cy.getField().setValue(moCurPayment1.getField().getValue());   // input shortcut
            computePayment2();
        }
        else if (mnCurrency1 == mnCurrency2) {
            moDecExchangeRate2.setValue(moDecExchangeRate1.getValue());
            computePayment2();
        }
    }

    private void focusLostCurPayment1() {
        computeExchangeRate1();

        if (mnCurrency2 == mnLocalCurrency) {
            moCurPayment2Cy.getField().setValue(moCurPayment1.getField().getValue());   // input shortcut
            computePayment2();
        }
        else if (mnCurrency1 == mnCurrency2) {
            moCurPayment2.getField().setValue(moCurPayment1.getField().getValue());
            computeExchangeRate2();
        }
    }

    private void focusLostCurPayment2Cy() {
        computePayment2();

        if (mnCurrency1 == mnCurrency2) {
            moCurPayment1Cy.getField().setValue(moCurPayment2Cy.getField().getValue());
            computePayment1();
        }
    }

    private void focusLostDecExchangeRate2() {
        computePayment2();

        if (mnCurrency1 == mnCurrency2) {
            moDecExchangeRate1.setValue(moDecExchangeRate2.getValue());
            computePayment1();
        }
    }

    private void focusLostCurPayment2() {
        computeExchangeRate2();

        if (mnCurrency1 == mnCurrency2) {
            moCurPayment1.getField().setValue(moCurPayment2.getField().getValue());
            computeExchangeRate1();
        }
    }

    private void itemStateKeyModeOfPayment() {
        if (moKeyModeOfPaymentType.getSelectedIndex() <= 0) {
            moBoolAvailable.setValue(false);
            moTextSupporting.setEditable(false);

            moTextSupporting.resetField();
        }
        else {
            //moBoolAvailable.setValue((Boolean) moKeyModeOfPaymentType.getSelectedItem().getComplement());
            moBoolAvailable.setValue(true);
            moTextSupporting.setEditable(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel;
    private javax.swing.JButton jbExchangeRate1;
    private javax.swing.JButton jbExchangeRate2;
    private javax.swing.JLabel jlDateDate;
    private javax.swing.JLabel jlModeOfPaymentType;
    private javax.swing.JLabel jlPayment1;
    private javax.swing.JLabel jlPayment2;
    private javax.swing.JLabel jlSystemMoveType;
    private javax.swing.JLabel jlText;
    private javax.swing.JPanel jpDate;
    private javax.swing.JPanel jpModeOfPayment;
    private javax.swing.JPanel jpPayment1;
    private javax.swing.JPanel jpPayment2;
    private javax.swing.JPanel jpSystemMove;
    private javax.swing.JPanel jpText;
    private javax.swing.JTextField jtfBranchCashCode1;
    private javax.swing.JTextField jtfBranchCashCode2;
    private javax.swing.JTextField jtfBranchCashCurrencyCode1;
    private javax.swing.JTextField jtfBranchCashCurrencyCode2;
    private javax.swing.JTextField jtfBranchCode1;
    private javax.swing.JTextField jtfBranchCode2;
    private javax.swing.JTextField jtfSystemMoveType;
    private sba.lib.gui.bean.DBeanFieldBoolean moBoolAvailable;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurPayment1;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurPayment1Cy;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurPayment2;
    private sba.lib.gui.bean.DBeanCompoundFieldCurrency moCurPayment2Cy;
    private sba.lib.gui.bean.DBeanFieldDate moDateDate;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecExchangeRate1;
    private sba.lib.gui.bean.DBeanFieldDecimal moDecExchangeRate2;
    private sba.lib.gui.bean.DBeanFieldKey moKeyModeOfPaymentType;
    private sba.lib.gui.bean.DBeanFieldText moTextSupporting;
    private sba.lib.gui.bean.DBeanFieldText moTextText;
    // End of variables declaration//GEN-END:variables

    /*
     * Public methods:
     */

    public void resetPanel() {
        removeAllListeners();
        reloadCatalogues();

        manSystemMoveTypeKey = null;
        manBizPartnerKey = null;
        manBizPartnerBranchKey = null;
        mnBizPartnerClass = DLibConsts.UNDEFINED;
        moDps = null;
        mnCurrency1 = DLibConsts.UNDEFINED;
        mnCurrency2 = DLibConsts.UNDEFINED;
        mbIsExchangeRateDifference = false;
        moBranchCashMain = null;
        moBranchCashAux = null;
        moSessionCustom = (DGuiClientSessionCustom) miClient.getSession().getSessionCustom();

        moFields.resetFields();
        moFields.setFieldsEnabled(true);
        moFields.setFieldsEditable(true);

        moDateDate.setValue(miClient.getSession().getWorkingDate());

        addAllListeners();
    }

    public void setSystemMoveType(final int[] sysMoveTypeKey, final DDbBranchCash cash) {
        setSystemMoveType(sysMoveTypeKey, cash, null);
    }

    public void setSystemMoveType(final int[] sysMoveTypeKey, final DDbBranchCash cashMain, final DDbBranchCash cashAux) {
        manSystemMoveTypeKey = sysMoveTypeKey;
        moBranchCashMain = cashMain;
        moBranchCashAux = cashAux;

        mnCurrency1 = DLibConsts.UNDEFINED;
        mnCurrency2 = DLibConsts.UNDEFINED;
        mbIsBothPaymentsApplying = true;
        mbIsExchangeRateDifference = manSystemMoveTypeKey == null ? false : DFinUtils.isSysMoveTypeForExchangeRate(manSystemMoveTypeKey);
        moTextText.setValue(DFinConsts.getSysMovePaymentName(manSystemMoveTypeKey[0]).toUpperCase());
        jtfSystemMoveType.setText((String) miClient.getSession().readField(DModConsts.FS_SYS_MOV_TP, manSystemMoveTypeKey, DDbRegistry.FIELD_NAME));
        jtfSystemMoveType.setCaretPosition(0);

        jpPayment1.setVisible(true);
        jpPayment2.setVisible(true);
        jtfBranchCode1.setVisible(true);
        jtfBranchCashCode1.setVisible(true);
        jtfBranchCashCurrencyCode1.setVisible(true);
        jtfBranchCode2.setVisible(true);
        jtfBranchCashCode2.setVisible(true);
        jtfBranchCashCurrencyCode2.setVisible(true);
        jlPayment1.setText(DUtilConsts.TXT_AMOUNT + ":*");
        jlPayment2.setText(DUtilConsts.TXT_AMOUNT + ":*");
        moCurPayment1Cy.getField().setEnabled(true);
        moCurPayment1.getField().setEnabled(true);
        moDecExchangeRate1.setEnabled(true);
        jbExchangeRate1.setEnabled(true);
        moCurPayment2Cy.getField().setEnabled(true);
        moCurPayment2.getField().setEnabled(true);
        moDecExchangeRate2.setEnabled(true);
        jbExchangeRate2.setEnabled(true);

        moBoolAvailable.setEnabled(false);

        if (manSystemMoveTypeKey != null) {
            if (DFinUtils.isSysMoveTypeForBranchCashBizPartnerMoveIn(manSystemMoveTypeKey)) {
                jlPayment1.setText(DUtilConsts.TXT_PAY_IN + ":*");
                jlPayment2.setText(DUtilConsts.TXT_MONEY_IN + ":*");
                setBranchCash1(null);
                setBranchCash2(moBranchCashMain);
            }
            else if (DFinUtils.isSysMoveTypeForBranchCashBizPartnerMoveOut(manSystemMoveTypeKey)) {
                jlPayment1.setText(DUtilConsts.TXT_PAY_OUT + ":*");
                jlPayment2.setText(DUtilConsts.TXT_MONEY_OUT + ":*");
                setBranchCash1(null);
                setBranchCash2(moBranchCashMain);
            }
            else if (DFinUtils.isSysMoveTypeForBranchCashMoveIn(manSystemMoveTypeKey)) {
                jlPayment1.setText(DUtilConsts.TXT_AMOUNT + ":*");
                jlPayment2.setText(DUtilConsts.TXT_MONEY_IN + ":*");
                setBranchCash1(moBranchCashMain);
                setBranchCash2(null);
                jpPayment2.setVisible(false);
                mbIsBothPaymentsApplying = false;
            }
            else if (DFinUtils.isSysMoveTypeForBranchCashMoveOut(manSystemMoveTypeKey)) {
                jlPayment1.setText(DUtilConsts.TXT_AMOUNT + ":*");
                jlPayment2.setText(DUtilConsts.TXT_MONEY_OUT + ":*");
                setBranchCash1(moBranchCashMain);
                setBranchCash2(null);
                jpPayment2.setVisible(false);
                mbIsBothPaymentsApplying = false;
            }
            /*  This case is not needed:
            else if (DFinUtils.isSysMoveTypeForBranchCashTransferIn(manSystemMoveTypeKey)) {
                jlPayment1.setText(DUtilConsts.TXT_MONEY_IN + ":*");
                jlPayment2.setText(DUtilConsts.TXT_MONEY_OUT + ":*");
                setBranchCash1(moBranchCashMain);
                setBranchCash2(moBranchCashAux);
            }
            */
            else if (DFinUtils.isSysMoveTypeForBranchCashTransferOut(manSystemMoveTypeKey)) {
                jlPayment1.setText(DUtilConsts.TXT_MONEY_OUT + ":*");
                jlPayment2.setText(DUtilConsts.TXT_MONEY_IN + ":*");
                setBranchCash1(moBranchCashMain);
                setBranchCash2(moBranchCashAux);
            }
            else {
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
            }
        }

        moCurPayment1Cy.getField().setFieldName(DGuiUtils.getLabelName(jlPayment1.getText()));
        moCurPayment1.getField().setFieldName(DGuiUtils.getLabelName(jlPayment1.getText()));
        moCurPayment2Cy.getField().setFieldName(DGuiUtils.getLabelName(jlPayment2.getText()));
        moCurPayment2.getField().setFieldName(DGuiUtils.getLabelName(jlPayment2.getText()));

        preparePaymentFields();
    }

    public void setBizPartnerBranch(final int bizPartnerClass, final int[] bizPartnerKey) {
        mnBizPartnerClass = bizPartnerClass;
        manBizPartnerKey = new int[] { bizPartnerKey[0] };
        manBizPartnerBranchKey = bizPartnerKey;
    }

    public void setDps(final int[] dpsKey) {
        setDps((DDbDps) miClient.getSession().readRegistry(DModConsts.T_DPS, dpsKey));
    }

    public void setDps(final DDbDps dps) {
        String text = moTextText.getValue();

        moDps = dps;

        mnBizPartnerClass = DTrnUtils.getBizPartnerClassByDpsCategory(moDps.getFkDpsCategoryId());
        manBizPartnerKey = moDps.getBizPartnerKey();
        manBizPartnerBranchKey = moDps.getBizPartnerBranchKey();

        moKeyModeOfPaymentType.setValue(new int[] { moDps.getFkModeOfPaymentTypeId() });

        text += (text.length() == 0 ? "" : ": ") + moDps.getBookkeepingText(miClient.getSession());

        if (text.length() > DDbBookkeepingMove.LEN_TEXT) {
            text = text.substring(0, DDbBookkeepingMove.LEN_TEXT);
        }

        moTextText.setValue(text);

        setCurrency1(moDps.getFkCurrencyId());
    }

    public void setCurrency1(final int currency) {
        mnCurrency1 = currency;
        moCurPayment1Cy.setCurrencyKey(mnCurrency1 == DLibConsts.UNDEFINED ? null : new int[] { mnCurrency1 });

        if (mnCurrency1 == DLibConsts.UNDEFINED) {
            moCurPayment1Cy.getField().setEditable(false);
            moCurPayment1.getField().setEditable(false);
            moDecExchangeRate1.setValue(0d);
            moDecExchangeRate1.setEnabled(false);
            jbExchangeRate1.setEnabled(false);
        }
        else if (mnCurrency1 == mnLocalCurrency) {
            moCurPayment1Cy.getField().setEditable(true);
            moCurPayment1.getField().setEditable(false);
            moDecExchangeRate1.setValue(mbIsExchangeRateDifference ? 0d : 1d);
            moDecExchangeRate1.setEnabled(false);
            jbExchangeRate1.setEnabled(false);
        }
        else {
            if (mbIsExchangeRateDifference) {
                moCurPayment1Cy.getField().setEditable(false);
                moCurPayment1.getField().setEditable(true);
                moDecExchangeRate1.setValue(0d);
                moDecExchangeRate1.setEnabled(false);
                jbExchangeRate1.setEnabled(false);
            }
            else {
                moCurPayment1Cy.getField().setEditable(true);
                moCurPayment1.getField().setEditable(true);
                moDecExchangeRate1.setValue(0d);
                moDecExchangeRate1.setEnabled(true);
                jbExchangeRate1.setEnabled(true);
            }
        }

        preparePaymentFields();
    }

    public void setCurrency2(final int currency) {
        mnCurrency2 = currency;
        moCurPayment2Cy.setCurrencyKey(mnCurrency2 == DLibConsts.UNDEFINED ? null : new int[] { mnCurrency2 });

        if (mnCurrency2 == DLibConsts.UNDEFINED) {
            moCurPayment2Cy.getField().setEditable(false);
            moCurPayment2.getField().setEditable(false);
            moDecExchangeRate2.setValue(0d);
            moDecExchangeRate2.setEnabled(false);
            jbExchangeRate2.setEnabled(false);
        }
        else if (mnCurrency2 == mnLocalCurrency) {
            moCurPayment2Cy.getField().setEditable(false);  // special feature
            moCurPayment2.getField().setEditable(false);
            moDecExchangeRate2.setValue(mbIsExchangeRateDifference ? 0d : 1d);
            moDecExchangeRate2.setEnabled(false);
            jbExchangeRate2.setEnabled(false);
        }
        else {
            if (mbIsExchangeRateDifference) {
                moCurPayment2Cy.getField().setEditable(false);
                moCurPayment2.getField().setEditable(true);
                moDecExchangeRate2.setValue(0d);
                moDecExchangeRate2.setEnabled(false);
                jbExchangeRate2.setEnabled(false);
            }
            else {
                moCurPayment2Cy.getField().setEditable(true);
                moCurPayment2.getField().setEditable(true);
                moDecExchangeRate2.setValue(0d);
                moDecExchangeRate2.setEnabled(true);
                jbExchangeRate2.setEnabled(true);
            }
        }

        preparePaymentFields();
    }

    public void setBranchCash1(final DDbBranchCash cash) {
        if (cash == null) {
            setCurrency1(DLibConsts.UNDEFINED);

            jtfBranchCode1.setText("");
            jtfBranchCashCode1.setText("");
            jtfBranchCashCurrencyCode1.setText("");

            jtfBranchCode1.setVisible(false);
            jtfBranchCashCode1.setVisible(false);
            jtfBranchCashCurrencyCode1.setVisible(false);
        }
        else {
            setCurrency1(cash.getFkCurrencyId());

            jtfBranchCode1.setText(cash.getDbBranchCode());
            jtfBranchCashCode1.setText(cash.getCode());
            jtfBranchCashCurrencyCode1.setText(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { mnCurrency1 }));

            jtfBranchCode1.setCaretPosition(0);
            jtfBranchCashCode1.setCaretPosition(0);
            jtfBranchCashCurrencyCode1.setCaretPosition(0);
        }
    }

    public void setBranchCash2(final DDbBranchCash cash) {
        if (cash == null) {
            setCurrency2(DLibConsts.UNDEFINED);

            jtfBranchCode2.setText("");
            jtfBranchCashCode2.setText("");
            jtfBranchCashCurrencyCode2.setText("");

            jtfBranchCode2.setVisible(false);
            jtfBranchCashCode2.setVisible(false);
            jtfBranchCashCurrencyCode2.setVisible(false);
        }
        else {
            setCurrency2(cash.getFkCurrencyId());

            jtfBranchCode2.setText(cash.getDbBranchCode());
            jtfBranchCashCode2.setText(cash.getCode());
            jtfBranchCashCurrencyCode2.setText(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { mnCurrency2 }));

            jtfBranchCode2.setCaretPosition(0);
            jtfBranchCashCode2.setCaretPosition(0);
            jtfBranchCashCurrencyCode2.setCaretPosition(0);
        }
    }

    public void setPayment1Cy(double payment) {
        moCurPayment1Cy.getField().setValue(payment);
        focusLostCurPayment1Cy();
    }

    public void setPayment2Cy(double payment) {
        moCurPayment2Cy.getField().setValue(payment);
        focusLostCurPayment2Cy();
    }

    /*
     * Overriden methods:
     */

    @Override
    public void addAllListeners() {
        jbExchangeRate1.addActionListener(this);
        jbExchangeRate2.addActionListener(this);
        moDecExchangeRate1.addFocusListener(this);
        moDecExchangeRate2.addFocusListener(this);
        moCurPayment1Cy.getField().getComponent().addFocusListener(this);
        moCurPayment1.getField().getComponent().addFocusListener(this);
        moCurPayment2Cy.getField().getComponent().addFocusListener(this);
        moCurPayment2.getField().getComponent().addFocusListener(this);
        moKeyModeOfPaymentType.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbExchangeRate1.removeActionListener(this);
        jbExchangeRate2.removeActionListener(this);
        moDecExchangeRate1.removeFocusListener(this);
        moDecExchangeRate2.removeFocusListener(this);
        moCurPayment1Cy.getField().getComponent().removeFocusListener(this);
        moCurPayment1.getField().getComponent().removeFocusListener(this);
        moCurPayment2Cy.getField().getComponent().removeFocusListener(this);
        moCurPayment2.getField().getComponent().removeFocusListener(this);
        moKeyModeOfPaymentType.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyModeOfPaymentType, DModConsts.FS_MOP_TP, DLibConsts.UNDEFINED, new DGuiParams(DModConsts.FX_MOP_TP_COL));
    }

    @Override
    public void setRegistry(DDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public DDbBookkeepingMoveCustom getRegistry() throws Exception {
        DDbBookkeepingMoveCustom registry = new DDbBookkeepingMoveCustom();

        if (registry.isRegistryNew()) { } else { }

        registry.setPkBookkeepingYearId(DLibTimeUtils.digestYear(moDateDate.getValue())[0]);
        registry.setPkBookkeepingNumberId(0);

        registry.getChildMoves().add(createBookkeepingMove(MOVE_DBT));
        registry.getChildMoves().add(createBookkeepingMove(MOVE_CDT));

        return registry;
    }

    @Override
    public DGuiValidation validatePanel() {
        DGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (DLibTimeUtils.digestDate(moDateDate.getValue())[0] != mnYear) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + DGuiUtils.getLabelName(jlDateDate.getText()) + "'" +
                        DGuiConsts.ERR_MSG_FIELD_DATE_YEAR + DLibUtils.DecimalFormatCalendarYear.format(mnYear) + ".");
                validation.setComponent(moDateDate);
            }
            else if (moKeyModeOfPaymentType.getValue()[0] == DModSysConsts.FS_MOP_TP_NA) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_DIF + "'" + DGuiUtils.getLabelName(jlModeOfPaymentType.getText()) + "'.");
                validation.setComponent(moKeyModeOfPaymentType);
            }
            else if (mbIsBothPaymentsApplying && moCurPayment1.getField().getValue().compareTo(moCurPayment2.getField().getValue()) != 0) {
                validation.setMessage(DGuiConsts.ERR_MSG_FIELD_REQ_EQUAL + "'" + DGuiUtils.getLabelName(jlPayment1.getText()) + "', '" + DGuiUtils.getLabelName(jlPayment2.getText()) + "'.");
                validation.setComponent(moCurPayment1Cy.getField().getComponent());
            }
        }

        return validation;
    }

    @Override
    public void setPanelSettings(final DGuiClient client) {
        super.setPanelSettings(client);

        mnLocalCurrency = miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0];

        moDateDate.setDateSettings(miClient, DGuiUtils.getLabelName(jlDateDate.getText()), true);
        moCurPayment1Cy.setCompoundFieldSettings(miClient);
        moCurPayment1Cy.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPayment1.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecExchangeRate1.setDecimalSettings(moDecExchangeRate1.getToolTipText(), DGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecExchangeRate1.setFieldButton(jbExchangeRate1);
        moCurPayment1.setCompoundFieldSettings(miClient);
        moCurPayment1.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPayment1.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurPayment2Cy.setCompoundFieldSettings(miClient);
        moCurPayment2Cy.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPayment2.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecExchangeRate2.setDecimalSettings(moDecExchangeRate2.getToolTipText(), DGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecExchangeRate2.setFieldButton(jbExchangeRate2);
        moCurPayment2.setCompoundFieldSettings(miClient);
        moCurPayment2.getField().setDecimalSettings(DGuiUtils.getLabelName(jlPayment2.getText()), DGuiConsts.GUI_TYPE_DEC_AMT, true);
        moKeyModeOfPaymentType.setKeySettings(miClient, DGuiUtils.getLabelName(jlModeOfPaymentType.getText()), true);
        moBoolAvailable.setBooleanSettings(DGuiUtils.getLabelName(moBoolAvailable.getText()), true);
        moTextSupporting.setTextSettings(DGuiUtils.getLabelName(moTextSupporting.getToolTipText()), 10, 0);
        moTextText.setTextSettings(DGuiUtils.getLabelName(jlText.getText()), 100);

        moFields.addField(moDateDate);
        moFields.addField(moCurPayment1Cy.getField());
        moFields.addField(moDecExchangeRate1);
        moFields.addField(moCurPayment1.getField());
        moFields.addField(moCurPayment2Cy.getField());
        moFields.addField(moDecExchangeRate2);
        moFields.addField(moCurPayment2.getField());
        moFields.addField(moKeyModeOfPaymentType);
        moFields.addField(moBoolAvailable);
        moFields.addField(moTextSupporting);
        moFields.addField(moTextText);
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case DModSysConsts.PARAM_YEAR:
                mnYear = (Integer) value;
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;

        switch (type) {
            case DUtilConsts.AMT:
                value = moCurPayment1.getField().getValue();
                break;
            case DUtilConsts.AMT_CY:
                value = moCurPayment1Cy.getField().getValue();
                break;
            default:
                miClient.showMsgBoxError(DLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return value;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbExchangeRate1) {
                actionExchangeRate1();
            }
            else if (button == jbExchangeRate2) {
                actionExchangeRate2();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof DBeanFieldDecimal) {
            DBeanFieldDecimal field = (DBeanFieldDecimal) e.getSource();

            if (field == moDecExchangeRate1) {
                focusLostDecExchangeRate1();
            }
            else if (field == moDecExchangeRate2) {
                focusLostDecExchangeRate2();
            }
            else if (field == moCurPayment1Cy.getField()) {
                focusLostCurPayment1Cy();
            }
            else if (field == moCurPayment1.getField()) {
                focusLostCurPayment1();
            }
            else if (field == moCurPayment2Cy.getField()) {
                focusLostCurPayment2Cy();
            }
            else if (field == moCurPayment2.getField()) {
                focusLostCurPayment2();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof DBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                DBeanFieldKey field = (DBeanFieldKey) e.getSource();

                if (field == moKeyModeOfPaymentType) {
                    itemStateKeyModeOfPayment();
                }
            }
        }
    }
}
