/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DMyGridFilterBranchEntity.java
 *
 * Created on 23/07/2012, 07:33:45 PM
 */

package sba.gui.mygrid;

import javax.swing.JPanel;
import sba.gui.util.DUtilConsts;
import sba.lib.DLibConsts;
import sba.lib.db.DDbRegistry;
import sba.lib.grid.DGridFilter;
import sba.lib.grid.DGridPaneView;
import sba.lib.gui.DGuiClient;
import sba.lib.gui.DGuiConsts;
import sba.mod.DModConsts;
import sba.mod.cfg.form.DDialogSelectBranchEntity;

/**
 *
 * @author Sergio Flores
 */
public class DMyGridFilterBranchEntity extends JPanel implements DGridFilter {

    protected DGuiClient miClient;
    protected DGridPaneView moPaneView;
    protected int mnType;

    protected int mnFilterType;
    protected int[] manSelectionKey;
    protected DDialogSelectBranchEntity moDialogSelectBranchEntity;

    /** Creates new form DMyGridFilterBranchEntity */
    public DMyGridFilterBranchEntity(DGridPaneView paneView, int type) {
        miClient = paneView.getClient();
        moPaneView = paneView;
        mnType = type;
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfBranch = new javax.swing.JTextField();
        jtfBranchEntity = new javax.swing.JTextField();
        jbBranchEntity = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfBranch.setEditable(false);
        jtfBranch.setFocusable(false);
        jtfBranch.setPreferredSize(new java.awt.Dimension(50, 23));
        add(jtfBranch);

        jtfBranchEntity.setEditable(false);
        jtfBranchEntity.setFocusable(false);
        jtfBranchEntity.setPreferredSize(new java.awt.Dimension(50, 23));
        add(jtfBranchEntity);

        jbBranchEntity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sba/gui/img/cmd_fil_bra_ent.gif"))); // NOI18N
        jbBranchEntity.setToolTipText("Filtrar entidad");
        jbBranchEntity.setPreferredSize(new java.awt.Dimension(23, 23));
        jbBranchEntity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBranchEntityActionPerformed(evt);
            }
        });
        add(jbBranchEntity);
    }// </editor-fold>//GEN-END:initComponents

    private void jbBranchEntityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBranchEntityActionPerformed
        actionBranchEntity();
    }//GEN-LAST:event_jbBranchEntityActionPerformed

    private void initComponentsCustom() {
        manSelectionKey = null;
        moDialogSelectBranchEntity = new DDialogSelectBranchEntity(miClient, mnType);

        jtfBranch.setToolTipText(DUtilConsts.TXT_BRANCH);

        switch (mnType) {
            case DModConsts.CU_CSH:
                mnFilterType = DMyGridConsts.FILTER_BRANCH_CSH;
                jbBranchEntity.setToolTipText(DUtilConsts.TXT_FILTER + " " + DUtilConsts.TXT_BRANCH_CSH.toLowerCase());
                jtfBranchEntity.setToolTipText(DUtilConsts.TXT_BRANCH_CSH);
                break;
            case DModConsts.CU_WAH:
                mnFilterType = DMyGridConsts.FILTER_BRANCH_WAH;
                jbBranchEntity.setToolTipText(DUtilConsts.TXT_FILTER + " " + DUtilConsts.TXT_BRANCH_WAH.toLowerCase());
                jtfBranchEntity.setToolTipText(DUtilConsts.TXT_BRANCH_WAH);
                break;
            default:
        }

        renderBranchEntity();
    }

    private void renderBranchEntity() {
        if (manSelectionKey == null) {
            jtfBranch.setText("");
            jtfBranchEntity.setText("");
        }
        else {
            if (manSelectionKey[1] == DLibConsts.UNDEFINED) {
                jtfBranch.setText("");
                jtfBranchEntity.setText("");
            }
            else {
                jtfBranch.setText((String) miClient.getSession().readField(DModConsts.BU_BRA, manSelectionKey, DDbRegistry.FIELD_CODE));

                if (manSelectionKey[2] == DLibConsts.UNDEFINED) {
                    jtfBranchEntity.setText("");
                }
                else {
                    jtfBranchEntity.setText((String) miClient.getSession().readField(mnType, manSelectionKey, DDbRegistry.FIELD_CODE));
                }
            }

            jtfBranch.setCaretPosition(0);
            jtfBranchEntity.setCaretPosition(0);
        }
    }

    private void actionBranchEntity() {
        moDialogSelectBranchEntity.resetDialog();
        moDialogSelectBranchEntity.setSelectionKey(manSelectionKey);
        moDialogSelectBranchEntity.setVisible(true);

        if (moDialogSelectBranchEntity.getFormResult() == DGuiConsts.FORM_RESULT_OK) {
            manSelectionKey = moDialogSelectBranchEntity.getSelectionKey();
            renderBranchEntity();
            moPaneView.putFilter(mnFilterType, manSelectionKey);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbBranchEntity;
    private javax.swing.JTextField jtfBranch;
    private javax.swing.JTextField jtfBranchEntity;
    // End of variables declaration//GEN-END:variables

    @Override
    public void initFilter(Object value) {
        manSelectionKey = (int[]) value;
        renderBranchEntity();
        moPaneView.getFiltersMap().put(mnFilterType, manSelectionKey);
    }
}
